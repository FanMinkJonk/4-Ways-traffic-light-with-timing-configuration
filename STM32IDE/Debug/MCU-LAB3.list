
MCU-LAB3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002a0c  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002b18  08002b18  00003b18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002b3c  08002b3c  00004028  2**0
                  CONTENTS
  4 .ARM          00000000  08002b3c  08002b3c  00004028  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002b3c  08002b3c  00004028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002b3c  08002b3c  00003b3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002b40  08002b40  00003b40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000028  20000000  08002b44  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000098  20000028  08002b6c  00004028  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000c0  08002b6c  000040c0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00004028  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008bf4  00000000  00000000  00004051  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d30  00000000  00000000  0000cc45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a80  00000000  00000000  0000e978  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000804  00000000  00000000  0000f3f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017000  00000000  00000000  0000fbfc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cc4f  00000000  00000000  00026bfc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082824  00000000  00000000  0003384b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b606f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002930  00000000  00000000  000b60b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  000b89e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000028 	.word	0x20000028
 8000128:	00000000 	.word	0x00000000
 800012c:	08002b00 	.word	0x08002b00

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000002c 	.word	0x2000002c
 8000148:	08002b00 	.word	0x08002b00

0800014c <fsm_input_processing>:

uint8_t buttonState[N0_OF_BUTTONS] = {BUTTON_STATE_RELEASE, BUTTON_STATE_RELEASE, BUTTON_STATE_RELEASE};

//--- Functions Definition -----------------------

void fsm_input_processing(){
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
	for(uint8_t i = BUTTON_MODE; i<N0_OF_BUTTONS; ++i){
 8000152:	2300      	movs	r3, #0
 8000154:	71fb      	strb	r3, [r7, #7]
 8000156:	e040      	b.n	80001da <fsm_input_processing+0x8e>
		switch(buttonState[i]){
 8000158:	79fb      	ldrb	r3, [r7, #7]
 800015a:	4a24      	ldr	r2, [pc, #144]	@ (80001ec <fsm_input_processing+0xa0>)
 800015c:	5cd3      	ldrb	r3, [r2, r3]
 800015e:	2b01      	cmp	r3, #1
 8000160:	d002      	beq.n	8000168 <fsm_input_processing+0x1c>
 8000162:	2b02      	cmp	r3, #2
 8000164:	d027      	beq.n	80001b6 <fsm_input_processing+0x6a>
//			if(is_button_pressed_1s(INPUT_MODE_ID)){
//				flag_m = 1;
//			}
//			break;
		default:
			break;
 8000166:	e035      	b.n	80001d4 <fsm_input_processing+0x88>
			if(is_button_pressed(i)){
 8000168:	79fb      	ldrb	r3, [r7, #7]
 800016a:	4618      	mov	r0, r3
 800016c:	f000 fdd0 	bl	8000d10 <is_button_pressed>
 8000170:	4603      	mov	r3, r0
 8000172:	2b00      	cmp	r3, #0
 8000174:	d02b      	beq.n	80001ce <fsm_input_processing+0x82>
				buttonState[i] = BUTTON_STATE_PRESSED;
 8000176:	79fb      	ldrb	r3, [r7, #7]
 8000178:	4a1c      	ldr	r2, [pc, #112]	@ (80001ec <fsm_input_processing+0xa0>)
 800017a:	2102      	movs	r1, #2
 800017c:	54d1      	strb	r1, [r2, r3]
				flag_m = (i == BUTTON_MODE);
 800017e:	79fb      	ldrb	r3, [r7, #7]
 8000180:	2b00      	cmp	r3, #0
 8000182:	bf0c      	ite	eq
 8000184:	2301      	moveq	r3, #1
 8000186:	2300      	movne	r3, #0
 8000188:	b2db      	uxtb	r3, r3
 800018a:	461a      	mov	r2, r3
 800018c:	4b18      	ldr	r3, [pc, #96]	@ (80001f0 <fsm_input_processing+0xa4>)
 800018e:	701a      	strb	r2, [r3, #0]
				flag_i = (i == BUTTON_INCREASE);
 8000190:	79fb      	ldrb	r3, [r7, #7]
 8000192:	2b01      	cmp	r3, #1
 8000194:	bf0c      	ite	eq
 8000196:	2301      	moveq	r3, #1
 8000198:	2300      	movne	r3, #0
 800019a:	b2db      	uxtb	r3, r3
 800019c:	461a      	mov	r2, r3
 800019e:	4b15      	ldr	r3, [pc, #84]	@ (80001f4 <fsm_input_processing+0xa8>)
 80001a0:	701a      	strb	r2, [r3, #0]
				flag_s = (i == BUTTON_SET);
 80001a2:	79fb      	ldrb	r3, [r7, #7]
 80001a4:	2b02      	cmp	r3, #2
 80001a6:	bf0c      	ite	eq
 80001a8:	2301      	moveq	r3, #1
 80001aa:	2300      	movne	r3, #0
 80001ac:	b2db      	uxtb	r3, r3
 80001ae:	461a      	mov	r2, r3
 80001b0:	4b11      	ldr	r3, [pc, #68]	@ (80001f8 <fsm_input_processing+0xac>)
 80001b2:	701a      	strb	r2, [r3, #0]
			break;
 80001b4:	e00b      	b.n	80001ce <fsm_input_processing+0x82>
			if(!is_button_pressed(i)){
 80001b6:	79fb      	ldrb	r3, [r7, #7]
 80001b8:	4618      	mov	r0, r3
 80001ba:	f000 fda9 	bl	8000d10 <is_button_pressed>
 80001be:	4603      	mov	r3, r0
 80001c0:	2b00      	cmp	r3, #0
 80001c2:	d106      	bne.n	80001d2 <fsm_input_processing+0x86>
				buttonState[i] = BUTTON_STATE_RELEASE;
 80001c4:	79fb      	ldrb	r3, [r7, #7]
 80001c6:	4a09      	ldr	r2, [pc, #36]	@ (80001ec <fsm_input_processing+0xa0>)
 80001c8:	2101      	movs	r1, #1
 80001ca:	54d1      	strb	r1, [r2, r3]
				break;
 80001cc:	e002      	b.n	80001d4 <fsm_input_processing+0x88>
			break;
 80001ce:	bf00      	nop
 80001d0:	e000      	b.n	80001d4 <fsm_input_processing+0x88>
			break;
 80001d2:	bf00      	nop
	for(uint8_t i = BUTTON_MODE; i<N0_OF_BUTTONS; ++i){
 80001d4:	79fb      	ldrb	r3, [r7, #7]
 80001d6:	3301      	adds	r3, #1
 80001d8:	71fb      	strb	r3, [r7, #7]
 80001da:	79fb      	ldrb	r3, [r7, #7]
 80001dc:	2b02      	cmp	r3, #2
 80001de:	d9bb      	bls.n	8000158 <fsm_input_processing+0xc>
		}
	}
}
 80001e0:	bf00      	nop
 80001e2:	bf00      	nop
 80001e4:	3708      	adds	r7, #8
 80001e6:	46bd      	mov	sp, r7
 80001e8:	bd80      	pop	{r7, pc}
 80001ea:	bf00      	nop
 80001ec:	20000000 	.word	0x20000000
 80001f0:	20000050 	.word	0x20000050
 80001f4:	20000051 	.word	0x20000051
 80001f8:	20000052 	.word	0x20000052

080001fc <config_leds>:
uint8_t counter_green = 3;

//--- Functions Definition -----------------------

//- Private Functions ----------------------------
void config_leds(uint8_t pattern){
 80001fc:	b580      	push	{r7, lr}
 80001fe:	b082      	sub	sp, #8
 8000200:	af00      	add	r7, sp, #0
 8000202:	4603      	mov	r3, r0
 8000204:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, 	 LED_RED_1_Pin,   (0x20 & pattern));
 8000206:	79fb      	ldrb	r3, [r7, #7]
 8000208:	f003 0320 	and.w	r3, r3, #32
 800020c:	b2db      	uxtb	r3, r3
 800020e:	461a      	mov	r2, r3
 8000210:	2110      	movs	r1, #16
 8000212:	481b      	ldr	r0, [pc, #108]	@ (8000280 <config_leds+0x84>)
 8000214:	f001 fc53 	bl	8001abe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_AMBER_1_GPIO_Port, LED_AMBER_1_Pin, (0x10 & pattern));
 8000218:	79fb      	ldrb	r3, [r7, #7]
 800021a:	f003 0310 	and.w	r3, r3, #16
 800021e:	b2db      	uxtb	r3, r3
 8000220:	461a      	mov	r2, r3
 8000222:	2120      	movs	r1, #32
 8000224:	4816      	ldr	r0, [pc, #88]	@ (8000280 <config_leds+0x84>)
 8000226:	f001 fc4a 	bl	8001abe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, (0x08 & pattern));
 800022a:	79fb      	ldrb	r3, [r7, #7]
 800022c:	f003 0308 	and.w	r3, r3, #8
 8000230:	b2db      	uxtb	r3, r3
 8000232:	461a      	mov	r2, r3
 8000234:	2140      	movs	r1, #64	@ 0x40
 8000236:	4812      	ldr	r0, [pc, #72]	@ (8000280 <config_leds+0x84>)
 8000238:	f001 fc41 	bl	8001abe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, 	 LED_RED_2_Pin,   (0x04 & pattern));
 800023c:	79fb      	ldrb	r3, [r7, #7]
 800023e:	f003 0304 	and.w	r3, r3, #4
 8000242:	b2db      	uxtb	r3, r3
 8000244:	461a      	mov	r2, r3
 8000246:	2180      	movs	r1, #128	@ 0x80
 8000248:	480d      	ldr	r0, [pc, #52]	@ (8000280 <config_leds+0x84>)
 800024a:	f001 fc38 	bl	8001abe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_AMBER_2_GPIO_Port, LED_AMBER_2_Pin, (0x02 & pattern));
 800024e:	79fb      	ldrb	r3, [r7, #7]
 8000250:	f003 0302 	and.w	r3, r3, #2
 8000254:	b2db      	uxtb	r3, r3
 8000256:	461a      	mov	r2, r3
 8000258:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800025c:	4808      	ldr	r0, [pc, #32]	@ (8000280 <config_leds+0x84>)
 800025e:	f001 fc2e 	bl	8001abe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, (0x01 & pattern));
 8000262:	79fb      	ldrb	r3, [r7, #7]
 8000264:	f003 0301 	and.w	r3, r3, #1
 8000268:	b2db      	uxtb	r3, r3
 800026a:	461a      	mov	r2, r3
 800026c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000270:	4803      	ldr	r0, [pc, #12]	@ (8000280 <config_leds+0x84>)
 8000272:	f001 fc24 	bl	8001abe <HAL_GPIO_WritePin>
}
 8000276:	bf00      	nop
 8000278:	3708      	adds	r7, #8
 800027a:	46bd      	mov	sp, r7
 800027c:	bd80      	pop	{r7, pc}
 800027e:	bf00      	nop
 8000280:	40010800 	.word	0x40010800

08000284 <init_auto_mode>:

//- Init Traffic Modes ---------------------------
void init_auto_mode(void){
 8000284:	b580      	push	{r7, lr}
 8000286:	af00      	add	r7, sp, #0
	counter_red   = red;
 8000288:	4b26      	ldr	r3, [pc, #152]	@ (8000324 <init_auto_mode+0xa0>)
 800028a:	781a      	ldrb	r2, [r3, #0]
 800028c:	4b26      	ldr	r3, [pc, #152]	@ (8000328 <init_auto_mode+0xa4>)
 800028e:	701a      	strb	r2, [r3, #0]
	counter_amber = amber;
 8000290:	4b26      	ldr	r3, [pc, #152]	@ (800032c <init_auto_mode+0xa8>)
 8000292:	781a      	ldrb	r2, [r3, #0]
 8000294:	4b26      	ldr	r3, [pc, #152]	@ (8000330 <init_auto_mode+0xac>)
 8000296:	701a      	strb	r2, [r3, #0]
	counter_green = green;
 8000298:	4b26      	ldr	r3, [pc, #152]	@ (8000334 <init_auto_mode+0xb0>)
 800029a:	781a      	ldrb	r2, [r3, #0]
 800029c:	4b26      	ldr	r3, [pc, #152]	@ (8000338 <init_auto_mode+0xb4>)
 800029e:	701a      	strb	r2, [r3, #0]
	buffer_led[0] = counter_red / 10;
 80002a0:	4b21      	ldr	r3, [pc, #132]	@ (8000328 <init_auto_mode+0xa4>)
 80002a2:	781b      	ldrb	r3, [r3, #0]
 80002a4:	4a25      	ldr	r2, [pc, #148]	@ (800033c <init_auto_mode+0xb8>)
 80002a6:	fba2 2303 	umull	r2, r3, r2, r3
 80002aa:	08db      	lsrs	r3, r3, #3
 80002ac:	b2db      	uxtb	r3, r3
 80002ae:	461a      	mov	r2, r3
 80002b0:	4b23      	ldr	r3, [pc, #140]	@ (8000340 <init_auto_mode+0xbc>)
 80002b2:	601a      	str	r2, [r3, #0]
	buffer_led[1] = counter_red % 10;
 80002b4:	4b1c      	ldr	r3, [pc, #112]	@ (8000328 <init_auto_mode+0xa4>)
 80002b6:	781a      	ldrb	r2, [r3, #0]
 80002b8:	4b20      	ldr	r3, [pc, #128]	@ (800033c <init_auto_mode+0xb8>)
 80002ba:	fba3 1302 	umull	r1, r3, r3, r2
 80002be:	08d9      	lsrs	r1, r3, #3
 80002c0:	460b      	mov	r3, r1
 80002c2:	009b      	lsls	r3, r3, #2
 80002c4:	440b      	add	r3, r1
 80002c6:	005b      	lsls	r3, r3, #1
 80002c8:	1ad3      	subs	r3, r2, r3
 80002ca:	b2db      	uxtb	r3, r3
 80002cc:	461a      	mov	r2, r3
 80002ce:	4b1c      	ldr	r3, [pc, #112]	@ (8000340 <init_auto_mode+0xbc>)
 80002d0:	605a      	str	r2, [r3, #4]
	buffer_led[2] = counter_green / 10;
 80002d2:	4b19      	ldr	r3, [pc, #100]	@ (8000338 <init_auto_mode+0xb4>)
 80002d4:	781b      	ldrb	r3, [r3, #0]
 80002d6:	4a19      	ldr	r2, [pc, #100]	@ (800033c <init_auto_mode+0xb8>)
 80002d8:	fba2 2303 	umull	r2, r3, r2, r3
 80002dc:	08db      	lsrs	r3, r3, #3
 80002de:	b2db      	uxtb	r3, r3
 80002e0:	461a      	mov	r2, r3
 80002e2:	4b17      	ldr	r3, [pc, #92]	@ (8000340 <init_auto_mode+0xbc>)
 80002e4:	609a      	str	r2, [r3, #8]
	buffer_led[3] = counter_green % 10;
 80002e6:	4b14      	ldr	r3, [pc, #80]	@ (8000338 <init_auto_mode+0xb4>)
 80002e8:	781a      	ldrb	r2, [r3, #0]
 80002ea:	4b14      	ldr	r3, [pc, #80]	@ (800033c <init_auto_mode+0xb8>)
 80002ec:	fba3 1302 	umull	r1, r3, r3, r2
 80002f0:	08d9      	lsrs	r1, r3, #3
 80002f2:	460b      	mov	r3, r1
 80002f4:	009b      	lsls	r3, r3, #2
 80002f6:	440b      	add	r3, r1
 80002f8:	005b      	lsls	r3, r3, #1
 80002fa:	1ad3      	subs	r3, r2, r3
 80002fc:	b2db      	uxtb	r3, r3
 80002fe:	461a      	mov	r2, r3
 8000300:	4b0f      	ldr	r3, [pc, #60]	@ (8000340 <init_auto_mode+0xbc>)
 8000302:	60da      	str	r2, [r3, #12]
	flag_l 		  = 0;
 8000304:	4b0f      	ldr	r3, [pc, #60]	@ (8000344 <init_auto_mode+0xc0>)
 8000306:	2200      	movs	r2, #0
 8000308:	701a      	strb	r2, [r3, #0]
	flag_seg 	  = 0;
 800030a:	4b0f      	ldr	r3, [pc, #60]	@ (8000348 <init_auto_mode+0xc4>)
 800030c:	2200      	movs	r2, #0
 800030e:	701a      	strb	r2, [r3, #0]
	toggle7SEG(0);
 8000310:	2000      	movs	r0, #0
 8000312:	f000 fe5d 	bl	8000fd0 <toggle7SEG>
	config_leds(0x1e);
 8000316:	201e      	movs	r0, #30
 8000318:	f7ff ff70 	bl	80001fc <config_leds>
	set_one_sec_timer();
 800031c:	f001 f83c 	bl	8001398 <set_one_sec_timer>
}
 8000320:	bf00      	nop
 8000322:	bd80      	pop	{r7, pc}
 8000324:	20000003 	.word	0x20000003
 8000328:	20000006 	.word	0x20000006
 800032c:	20000004 	.word	0x20000004
 8000330:	20000007 	.word	0x20000007
 8000334:	20000005 	.word	0x20000005
 8000338:	20000008 	.word	0x20000008
 800033c:	cccccccd 	.word	0xcccccccd
 8000340:	20000058 	.word	0x20000058
 8000344:	2000004f 	.word	0x2000004f
 8000348:	20000054 	.word	0x20000054

0800034c <init_red_config_mode>:

void init_red_config_mode(void){
 800034c:	b580      	push	{r7, lr}
 800034e:	af00      	add	r7, sp, #0
	buffer_led[0] = 0 / 10;
 8000350:	4b19      	ldr	r3, [pc, #100]	@ (80003b8 <init_red_config_mode+0x6c>)
 8000352:	2200      	movs	r2, #0
 8000354:	601a      	str	r2, [r3, #0]
	buffer_led[1] = 2 % 10;
 8000356:	4b18      	ldr	r3, [pc, #96]	@ (80003b8 <init_red_config_mode+0x6c>)
 8000358:	2202      	movs	r2, #2
 800035a:	605a      	str	r2, [r3, #4]
	buffer_led[2] = red / 10;
 800035c:	4b17      	ldr	r3, [pc, #92]	@ (80003bc <init_red_config_mode+0x70>)
 800035e:	781b      	ldrb	r3, [r3, #0]
 8000360:	4a17      	ldr	r2, [pc, #92]	@ (80003c0 <init_red_config_mode+0x74>)
 8000362:	fba2 2303 	umull	r2, r3, r2, r3
 8000366:	08db      	lsrs	r3, r3, #3
 8000368:	b2db      	uxtb	r3, r3
 800036a:	461a      	mov	r2, r3
 800036c:	4b12      	ldr	r3, [pc, #72]	@ (80003b8 <init_red_config_mode+0x6c>)
 800036e:	609a      	str	r2, [r3, #8]
	buffer_led[3] = red % 10;
 8000370:	4b12      	ldr	r3, [pc, #72]	@ (80003bc <init_red_config_mode+0x70>)
 8000372:	781a      	ldrb	r2, [r3, #0]
 8000374:	4b12      	ldr	r3, [pc, #72]	@ (80003c0 <init_red_config_mode+0x74>)
 8000376:	fba3 1302 	umull	r1, r3, r3, r2
 800037a:	08d9      	lsrs	r1, r3, #3
 800037c:	460b      	mov	r3, r1
 800037e:	009b      	lsls	r3, r3, #2
 8000380:	440b      	add	r3, r1
 8000382:	005b      	lsls	r3, r3, #1
 8000384:	1ad3      	subs	r3, r2, r3
 8000386:	b2db      	uxtb	r3, r3
 8000388:	461a      	mov	r2, r3
 800038a:	4b0b      	ldr	r3, [pc, #44]	@ (80003b8 <init_red_config_mode+0x6c>)
 800038c:	60da      	str	r2, [r3, #12]
	flag_seg 	  = 0;
 800038e:	4b0d      	ldr	r3, [pc, #52]	@ (80003c4 <init_red_config_mode+0x78>)
 8000390:	2200      	movs	r2, #0
 8000392:	701a      	strb	r2, [r3, #0]
	counter_red   = red;
 8000394:	4b09      	ldr	r3, [pc, #36]	@ (80003bc <init_red_config_mode+0x70>)
 8000396:	781a      	ldrb	r2, [r3, #0]
 8000398:	4b0b      	ldr	r3, [pc, #44]	@ (80003c8 <init_red_config_mode+0x7c>)
 800039a:	701a      	strb	r2, [r3, #0]
	flag_blinky_led = 0;
 800039c:	4b0b      	ldr	r3, [pc, #44]	@ (80003cc <init_red_config_mode+0x80>)
 800039e:	2200      	movs	r2, #0
 80003a0:	701a      	strb	r2, [r3, #0]
	toggle7SEG(0);
 80003a2:	2000      	movs	r0, #0
 80003a4:	f000 fe14 	bl	8000fd0 <toggle7SEG>
	config_leds(0x1b);
 80003a8:	201b      	movs	r0, #27
 80003aa:	f7ff ff27 	bl	80001fc <config_leds>
	set_one_sec_timer();
 80003ae:	f000 fff3 	bl	8001398 <set_one_sec_timer>
}
 80003b2:	bf00      	nop
 80003b4:	bd80      	pop	{r7, pc}
 80003b6:	bf00      	nop
 80003b8:	20000058 	.word	0x20000058
 80003bc:	20000003 	.word	0x20000003
 80003c0:	cccccccd 	.word	0xcccccccd
 80003c4:	20000054 	.word	0x20000054
 80003c8:	20000006 	.word	0x20000006
 80003cc:	20000055 	.word	0x20000055

080003d0 <init_amber_config_mode>:

void init_amber_config_mode(void){
 80003d0:	b580      	push	{r7, lr}
 80003d2:	af00      	add	r7, sp, #0
	buffer_led[0] = 0 / 10;
 80003d4:	4b19      	ldr	r3, [pc, #100]	@ (800043c <init_amber_config_mode+0x6c>)
 80003d6:	2200      	movs	r2, #0
 80003d8:	601a      	str	r2, [r3, #0]
	buffer_led[1] = 3 % 10;
 80003da:	4b18      	ldr	r3, [pc, #96]	@ (800043c <init_amber_config_mode+0x6c>)
 80003dc:	2203      	movs	r2, #3
 80003de:	605a      	str	r2, [r3, #4]
	buffer_led[2] = amber / 10;
 80003e0:	4b17      	ldr	r3, [pc, #92]	@ (8000440 <init_amber_config_mode+0x70>)
 80003e2:	781b      	ldrb	r3, [r3, #0]
 80003e4:	4a17      	ldr	r2, [pc, #92]	@ (8000444 <init_amber_config_mode+0x74>)
 80003e6:	fba2 2303 	umull	r2, r3, r2, r3
 80003ea:	08db      	lsrs	r3, r3, #3
 80003ec:	b2db      	uxtb	r3, r3
 80003ee:	461a      	mov	r2, r3
 80003f0:	4b12      	ldr	r3, [pc, #72]	@ (800043c <init_amber_config_mode+0x6c>)
 80003f2:	609a      	str	r2, [r3, #8]
	buffer_led[3] = amber % 10;
 80003f4:	4b12      	ldr	r3, [pc, #72]	@ (8000440 <init_amber_config_mode+0x70>)
 80003f6:	781a      	ldrb	r2, [r3, #0]
 80003f8:	4b12      	ldr	r3, [pc, #72]	@ (8000444 <init_amber_config_mode+0x74>)
 80003fa:	fba3 1302 	umull	r1, r3, r3, r2
 80003fe:	08d9      	lsrs	r1, r3, #3
 8000400:	460b      	mov	r3, r1
 8000402:	009b      	lsls	r3, r3, #2
 8000404:	440b      	add	r3, r1
 8000406:	005b      	lsls	r3, r3, #1
 8000408:	1ad3      	subs	r3, r2, r3
 800040a:	b2db      	uxtb	r3, r3
 800040c:	461a      	mov	r2, r3
 800040e:	4b0b      	ldr	r3, [pc, #44]	@ (800043c <init_amber_config_mode+0x6c>)
 8000410:	60da      	str	r2, [r3, #12]
	flag_seg 	  = 0;
 8000412:	4b0d      	ldr	r3, [pc, #52]	@ (8000448 <init_amber_config_mode+0x78>)
 8000414:	2200      	movs	r2, #0
 8000416:	701a      	strb	r2, [r3, #0]
	counter_amber = amber;
 8000418:	4b09      	ldr	r3, [pc, #36]	@ (8000440 <init_amber_config_mode+0x70>)
 800041a:	781a      	ldrb	r2, [r3, #0]
 800041c:	4b0b      	ldr	r3, [pc, #44]	@ (800044c <init_amber_config_mode+0x7c>)
 800041e:	701a      	strb	r2, [r3, #0]
	flag_blinky_led = 0;
 8000420:	4b0b      	ldr	r3, [pc, #44]	@ (8000450 <init_amber_config_mode+0x80>)
 8000422:	2200      	movs	r2, #0
 8000424:	701a      	strb	r2, [r3, #0]
	toggle7SEG(0);
 8000426:	2000      	movs	r0, #0
 8000428:	f000 fdd2 	bl	8000fd0 <toggle7SEG>
	config_leds(0x2d);
 800042c:	202d      	movs	r0, #45	@ 0x2d
 800042e:	f7ff fee5 	bl	80001fc <config_leds>
	set_one_sec_timer();
 8000432:	f000 ffb1 	bl	8001398 <set_one_sec_timer>
}
 8000436:	bf00      	nop
 8000438:	bd80      	pop	{r7, pc}
 800043a:	bf00      	nop
 800043c:	20000058 	.word	0x20000058
 8000440:	20000004 	.word	0x20000004
 8000444:	cccccccd 	.word	0xcccccccd
 8000448:	20000054 	.word	0x20000054
 800044c:	20000007 	.word	0x20000007
 8000450:	20000055 	.word	0x20000055

08000454 <init_green_config_mode>:

void init_green_config_mode(void){
 8000454:	b580      	push	{r7, lr}
 8000456:	af00      	add	r7, sp, #0
	green 		  = red - amber;
 8000458:	4b1d      	ldr	r3, [pc, #116]	@ (80004d0 <init_green_config_mode+0x7c>)
 800045a:	781a      	ldrb	r2, [r3, #0]
 800045c:	4b1d      	ldr	r3, [pc, #116]	@ (80004d4 <init_green_config_mode+0x80>)
 800045e:	781b      	ldrb	r3, [r3, #0]
 8000460:	1ad3      	subs	r3, r2, r3
 8000462:	b2da      	uxtb	r2, r3
 8000464:	4b1c      	ldr	r3, [pc, #112]	@ (80004d8 <init_green_config_mode+0x84>)
 8000466:	701a      	strb	r2, [r3, #0]
	buffer_led[0] = 0 / 10;
 8000468:	4b1c      	ldr	r3, [pc, #112]	@ (80004dc <init_green_config_mode+0x88>)
 800046a:	2200      	movs	r2, #0
 800046c:	601a      	str	r2, [r3, #0]
	buffer_led[1] = 4 % 10;
 800046e:	4b1b      	ldr	r3, [pc, #108]	@ (80004dc <init_green_config_mode+0x88>)
 8000470:	2204      	movs	r2, #4
 8000472:	605a      	str	r2, [r3, #4]
	buffer_led[2] = green / 10;
 8000474:	4b18      	ldr	r3, [pc, #96]	@ (80004d8 <init_green_config_mode+0x84>)
 8000476:	781b      	ldrb	r3, [r3, #0]
 8000478:	4a19      	ldr	r2, [pc, #100]	@ (80004e0 <init_green_config_mode+0x8c>)
 800047a:	fba2 2303 	umull	r2, r3, r2, r3
 800047e:	08db      	lsrs	r3, r3, #3
 8000480:	b2db      	uxtb	r3, r3
 8000482:	461a      	mov	r2, r3
 8000484:	4b15      	ldr	r3, [pc, #84]	@ (80004dc <init_green_config_mode+0x88>)
 8000486:	609a      	str	r2, [r3, #8]
	buffer_led[3] = green % 10;
 8000488:	4b13      	ldr	r3, [pc, #76]	@ (80004d8 <init_green_config_mode+0x84>)
 800048a:	781a      	ldrb	r2, [r3, #0]
 800048c:	4b14      	ldr	r3, [pc, #80]	@ (80004e0 <init_green_config_mode+0x8c>)
 800048e:	fba3 1302 	umull	r1, r3, r3, r2
 8000492:	08d9      	lsrs	r1, r3, #3
 8000494:	460b      	mov	r3, r1
 8000496:	009b      	lsls	r3, r3, #2
 8000498:	440b      	add	r3, r1
 800049a:	005b      	lsls	r3, r3, #1
 800049c:	1ad3      	subs	r3, r2, r3
 800049e:	b2db      	uxtb	r3, r3
 80004a0:	461a      	mov	r2, r3
 80004a2:	4b0e      	ldr	r3, [pc, #56]	@ (80004dc <init_green_config_mode+0x88>)
 80004a4:	60da      	str	r2, [r3, #12]
	flag_seg 	  = 0;
 80004a6:	4b0f      	ldr	r3, [pc, #60]	@ (80004e4 <init_green_config_mode+0x90>)
 80004a8:	2200      	movs	r2, #0
 80004aa:	701a      	strb	r2, [r3, #0]
	counter_green = green;
 80004ac:	4b0a      	ldr	r3, [pc, #40]	@ (80004d8 <init_green_config_mode+0x84>)
 80004ae:	781a      	ldrb	r2, [r3, #0]
 80004b0:	4b0d      	ldr	r3, [pc, #52]	@ (80004e8 <init_green_config_mode+0x94>)
 80004b2:	701a      	strb	r2, [r3, #0]
	flag_blinky_led = 0;
 80004b4:	4b0d      	ldr	r3, [pc, #52]	@ (80004ec <init_green_config_mode+0x98>)
 80004b6:	2200      	movs	r2, #0
 80004b8:	701a      	strb	r2, [r3, #0]
	toggle7SEG(0);
 80004ba:	2000      	movs	r0, #0
 80004bc:	f000 fd88 	bl	8000fd0 <toggle7SEG>
	config_leds(0x36);
 80004c0:	2036      	movs	r0, #54	@ 0x36
 80004c2:	f7ff fe9b 	bl	80001fc <config_leds>
	set_one_sec_timer();
 80004c6:	f000 ff67 	bl	8001398 <set_one_sec_timer>
}
 80004ca:	bf00      	nop
 80004cc:	bd80      	pop	{r7, pc}
 80004ce:	bf00      	nop
 80004d0:	20000003 	.word	0x20000003
 80004d4:	20000004 	.word	0x20000004
 80004d8:	20000005 	.word	0x20000005
 80004dc:	20000058 	.word	0x20000058
 80004e0:	cccccccd 	.word	0xcccccccd
 80004e4:	20000054 	.word	0x20000054
 80004e8:	20000008 	.word	0x20000008
 80004ec:	20000055 	.word	0x20000055

080004f0 <fsm_mode_auto>:

//- Traffic Modes --------------------------------
void fsm_mode_auto(void){
 80004f0:	b580      	push	{r7, lr}
 80004f2:	af00      	add	r7, sp, #0
	switch(status_light){
 80004f4:	4b8d      	ldr	r3, [pc, #564]	@ (800072c <fsm_mode_auto+0x23c>)
 80004f6:	781b      	ldrb	r3, [r3, #0]
 80004f8:	3b0b      	subs	r3, #11
 80004fa:	2b03      	cmp	r3, #3
 80004fc:	f200 81db 	bhi.w	80008b6 <fsm_mode_auto+0x3c6>
 8000500:	a201      	add	r2, pc, #4	@ (adr r2, 8000508 <fsm_mode_auto+0x18>)
 8000502:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000506:	bf00      	nop
 8000508:	08000519 	.word	0x08000519
 800050c:	080005f1 	.word	0x080005f1
 8000510:	080006d1 	.word	0x080006d1
 8000514:	080007d9 	.word	0x080007d9
	case STATUS_RED_GREEN:
		config_leds(0x1e);
 8000518:	201e      	movs	r0, #30
 800051a:	f7ff fe6f 	bl	80001fc <config_leds>
		if(flag_one_sec == 1){
 800051e:	4b84      	ldr	r3, [pc, #528]	@ (8000730 <fsm_mode_auto+0x240>)
 8000520:	781b      	ldrb	r3, [r3, #0]
 8000522:	2b01      	cmp	r3, #1
 8000524:	d117      	bne.n	8000556 <fsm_mode_auto+0x66>
			set_one_sec_timer();
 8000526:	f000 ff37 	bl	8001398 <set_one_sec_timer>
			flag_l = (--counter_green == 0);
 800052a:	4b82      	ldr	r3, [pc, #520]	@ (8000734 <fsm_mode_auto+0x244>)
 800052c:	781b      	ldrb	r3, [r3, #0]
 800052e:	3b01      	subs	r3, #1
 8000530:	b2da      	uxtb	r2, r3
 8000532:	4b80      	ldr	r3, [pc, #512]	@ (8000734 <fsm_mode_auto+0x244>)
 8000534:	701a      	strb	r2, [r3, #0]
 8000536:	4b7f      	ldr	r3, [pc, #508]	@ (8000734 <fsm_mode_auto+0x244>)
 8000538:	781b      	ldrb	r3, [r3, #0]
 800053a:	2b00      	cmp	r3, #0
 800053c:	bf0c      	ite	eq
 800053e:	2301      	moveq	r3, #1
 8000540:	2300      	movne	r3, #0
 8000542:	b2db      	uxtb	r3, r3
 8000544:	461a      	mov	r2, r3
 8000546:	4b7c      	ldr	r3, [pc, #496]	@ (8000738 <fsm_mode_auto+0x248>)
 8000548:	701a      	strb	r2, [r3, #0]
			--counter_red;
 800054a:	4b7c      	ldr	r3, [pc, #496]	@ (800073c <fsm_mode_auto+0x24c>)
 800054c:	781b      	ldrb	r3, [r3, #0]
 800054e:	3b01      	subs	r3, #1
 8000550:	b2da      	uxtb	r2, r3
 8000552:	4b7a      	ldr	r3, [pc, #488]	@ (800073c <fsm_mode_auto+0x24c>)
 8000554:	701a      	strb	r2, [r3, #0]
		}
		if(flag_l == 1){
 8000556:	4b78      	ldr	r3, [pc, #480]	@ (8000738 <fsm_mode_auto+0x248>)
 8000558:	781b      	ldrb	r3, [r3, #0]
 800055a:	2b01      	cmp	r3, #1
 800055c:	d10a      	bne.n	8000574 <fsm_mode_auto+0x84>
			flag_l = 0;
 800055e:	4b76      	ldr	r3, [pc, #472]	@ (8000738 <fsm_mode_auto+0x248>)
 8000560:	2200      	movs	r2, #0
 8000562:	701a      	strb	r2, [r3, #0]
			status_light = STATUS_RED_AMBER;
 8000564:	4b71      	ldr	r3, [pc, #452]	@ (800072c <fsm_mode_auto+0x23c>)
 8000566:	220c      	movs	r2, #12
 8000568:	701a      	strb	r2, [r3, #0]
			counter_green = green;
 800056a:	4b75      	ldr	r3, [pc, #468]	@ (8000740 <fsm_mode_auto+0x250>)
 800056c:	781a      	ldrb	r2, [r3, #0]
 800056e:	4b71      	ldr	r3, [pc, #452]	@ (8000734 <fsm_mode_auto+0x244>)
 8000570:	701a      	strb	r2, [r3, #0]
			break;
 8000572:	e1a9      	b.n	80008c8 <fsm_mode_auto+0x3d8>
		}
		if(flag_seg == 1){
 8000574:	4b73      	ldr	r3, [pc, #460]	@ (8000744 <fsm_mode_auto+0x254>)
 8000576:	781b      	ldrb	r3, [r3, #0]
 8000578:	2b01      	cmp	r3, #1
 800057a:	f040 819e 	bne.w	80008ba <fsm_mode_auto+0x3ca>
			flag_seg = 0;
 800057e:	4b71      	ldr	r3, [pc, #452]	@ (8000744 <fsm_mode_auto+0x254>)
 8000580:	2200      	movs	r2, #0
 8000582:	701a      	strb	r2, [r3, #0]
			buffer_led[0] = counter_red / 10;
 8000584:	4b6d      	ldr	r3, [pc, #436]	@ (800073c <fsm_mode_auto+0x24c>)
 8000586:	781b      	ldrb	r3, [r3, #0]
 8000588:	4a6f      	ldr	r2, [pc, #444]	@ (8000748 <fsm_mode_auto+0x258>)
 800058a:	fba2 2303 	umull	r2, r3, r2, r3
 800058e:	08db      	lsrs	r3, r3, #3
 8000590:	b2db      	uxtb	r3, r3
 8000592:	461a      	mov	r2, r3
 8000594:	4b6d      	ldr	r3, [pc, #436]	@ (800074c <fsm_mode_auto+0x25c>)
 8000596:	601a      	str	r2, [r3, #0]
			buffer_led[1] = counter_red % 10;
 8000598:	4b68      	ldr	r3, [pc, #416]	@ (800073c <fsm_mode_auto+0x24c>)
 800059a:	781a      	ldrb	r2, [r3, #0]
 800059c:	4b6a      	ldr	r3, [pc, #424]	@ (8000748 <fsm_mode_auto+0x258>)
 800059e:	fba3 1302 	umull	r1, r3, r3, r2
 80005a2:	08d9      	lsrs	r1, r3, #3
 80005a4:	460b      	mov	r3, r1
 80005a6:	009b      	lsls	r3, r3, #2
 80005a8:	440b      	add	r3, r1
 80005aa:	005b      	lsls	r3, r3, #1
 80005ac:	1ad3      	subs	r3, r2, r3
 80005ae:	b2db      	uxtb	r3, r3
 80005b0:	461a      	mov	r2, r3
 80005b2:	4b66      	ldr	r3, [pc, #408]	@ (800074c <fsm_mode_auto+0x25c>)
 80005b4:	605a      	str	r2, [r3, #4]
			buffer_led[2] = counter_green / 10;
 80005b6:	4b5f      	ldr	r3, [pc, #380]	@ (8000734 <fsm_mode_auto+0x244>)
 80005b8:	781b      	ldrb	r3, [r3, #0]
 80005ba:	4a63      	ldr	r2, [pc, #396]	@ (8000748 <fsm_mode_auto+0x258>)
 80005bc:	fba2 2303 	umull	r2, r3, r2, r3
 80005c0:	08db      	lsrs	r3, r3, #3
 80005c2:	b2db      	uxtb	r3, r3
 80005c4:	461a      	mov	r2, r3
 80005c6:	4b61      	ldr	r3, [pc, #388]	@ (800074c <fsm_mode_auto+0x25c>)
 80005c8:	609a      	str	r2, [r3, #8]
			buffer_led[3] = counter_green % 10;
 80005ca:	4b5a      	ldr	r3, [pc, #360]	@ (8000734 <fsm_mode_auto+0x244>)
 80005cc:	781a      	ldrb	r2, [r3, #0]
 80005ce:	4b5e      	ldr	r3, [pc, #376]	@ (8000748 <fsm_mode_auto+0x258>)
 80005d0:	fba3 1302 	umull	r1, r3, r3, r2
 80005d4:	08d9      	lsrs	r1, r3, #3
 80005d6:	460b      	mov	r3, r1
 80005d8:	009b      	lsls	r3, r3, #2
 80005da:	440b      	add	r3, r1
 80005dc:	005b      	lsls	r3, r3, #1
 80005de:	1ad3      	subs	r3, r2, r3
 80005e0:	b2db      	uxtb	r3, r3
 80005e2:	461a      	mov	r2, r3
 80005e4:	4b59      	ldr	r3, [pc, #356]	@ (800074c <fsm_mode_auto+0x25c>)
 80005e6:	60da      	str	r2, [r3, #12]
			toggle7SEG(1);
 80005e8:	2001      	movs	r0, #1
 80005ea:	f000 fcf1 	bl	8000fd0 <toggle7SEG>
		}
		break;
 80005ee:	e164      	b.n	80008ba <fsm_mode_auto+0x3ca>
	case STATUS_RED_AMBER:
		config_leds(0x1d);
 80005f0:	201d      	movs	r0, #29
 80005f2:	f7ff fe03 	bl	80001fc <config_leds>
		if(flag_one_sec == 1){
 80005f6:	4b4e      	ldr	r3, [pc, #312]	@ (8000730 <fsm_mode_auto+0x240>)
 80005f8:	781b      	ldrb	r3, [r3, #0]
 80005fa:	2b01      	cmp	r3, #1
 80005fc:	d117      	bne.n	800062e <fsm_mode_auto+0x13e>
			set_one_sec_timer();
 80005fe:	f000 fecb 	bl	8001398 <set_one_sec_timer>
			flag_l = (--counter_amber == 0);
 8000602:	4b53      	ldr	r3, [pc, #332]	@ (8000750 <fsm_mode_auto+0x260>)
 8000604:	781b      	ldrb	r3, [r3, #0]
 8000606:	3b01      	subs	r3, #1
 8000608:	b2da      	uxtb	r2, r3
 800060a:	4b51      	ldr	r3, [pc, #324]	@ (8000750 <fsm_mode_auto+0x260>)
 800060c:	701a      	strb	r2, [r3, #0]
 800060e:	4b50      	ldr	r3, [pc, #320]	@ (8000750 <fsm_mode_auto+0x260>)
 8000610:	781b      	ldrb	r3, [r3, #0]
 8000612:	2b00      	cmp	r3, #0
 8000614:	bf0c      	ite	eq
 8000616:	2301      	moveq	r3, #1
 8000618:	2300      	movne	r3, #0
 800061a:	b2db      	uxtb	r3, r3
 800061c:	461a      	mov	r2, r3
 800061e:	4b46      	ldr	r3, [pc, #280]	@ (8000738 <fsm_mode_auto+0x248>)
 8000620:	701a      	strb	r2, [r3, #0]
			--counter_red;
 8000622:	4b46      	ldr	r3, [pc, #280]	@ (800073c <fsm_mode_auto+0x24c>)
 8000624:	781b      	ldrb	r3, [r3, #0]
 8000626:	3b01      	subs	r3, #1
 8000628:	b2da      	uxtb	r2, r3
 800062a:	4b44      	ldr	r3, [pc, #272]	@ (800073c <fsm_mode_auto+0x24c>)
 800062c:	701a      	strb	r2, [r3, #0]
		}
		if(flag_l == 1){
 800062e:	4b42      	ldr	r3, [pc, #264]	@ (8000738 <fsm_mode_auto+0x248>)
 8000630:	781b      	ldrb	r3, [r3, #0]
 8000632:	2b01      	cmp	r3, #1
 8000634:	d10e      	bne.n	8000654 <fsm_mode_auto+0x164>
			flag_l = 0;
 8000636:	4b40      	ldr	r3, [pc, #256]	@ (8000738 <fsm_mode_auto+0x248>)
 8000638:	2200      	movs	r2, #0
 800063a:	701a      	strb	r2, [r3, #0]
			status_light = STATUS_GREEN_RED;
 800063c:	4b3b      	ldr	r3, [pc, #236]	@ (800072c <fsm_mode_auto+0x23c>)
 800063e:	220d      	movs	r2, #13
 8000640:	701a      	strb	r2, [r3, #0]
			counter_red = red;
 8000642:	4b44      	ldr	r3, [pc, #272]	@ (8000754 <fsm_mode_auto+0x264>)
 8000644:	781a      	ldrb	r2, [r3, #0]
 8000646:	4b3d      	ldr	r3, [pc, #244]	@ (800073c <fsm_mode_auto+0x24c>)
 8000648:	701a      	strb	r2, [r3, #0]
			counter_amber = amber;
 800064a:	4b43      	ldr	r3, [pc, #268]	@ (8000758 <fsm_mode_auto+0x268>)
 800064c:	781a      	ldrb	r2, [r3, #0]
 800064e:	4b40      	ldr	r3, [pc, #256]	@ (8000750 <fsm_mode_auto+0x260>)
 8000650:	701a      	strb	r2, [r3, #0]
			break;
 8000652:	e139      	b.n	80008c8 <fsm_mode_auto+0x3d8>
		}
		if(flag_seg == 1){
 8000654:	4b3b      	ldr	r3, [pc, #236]	@ (8000744 <fsm_mode_auto+0x254>)
 8000656:	781b      	ldrb	r3, [r3, #0]
 8000658:	2b01      	cmp	r3, #1
 800065a:	f040 8130 	bne.w	80008be <fsm_mode_auto+0x3ce>
			flag_seg = 0;
 800065e:	4b39      	ldr	r3, [pc, #228]	@ (8000744 <fsm_mode_auto+0x254>)
 8000660:	2200      	movs	r2, #0
 8000662:	701a      	strb	r2, [r3, #0]
			buffer_led[0] = counter_red / 10;
 8000664:	4b35      	ldr	r3, [pc, #212]	@ (800073c <fsm_mode_auto+0x24c>)
 8000666:	781b      	ldrb	r3, [r3, #0]
 8000668:	4a37      	ldr	r2, [pc, #220]	@ (8000748 <fsm_mode_auto+0x258>)
 800066a:	fba2 2303 	umull	r2, r3, r2, r3
 800066e:	08db      	lsrs	r3, r3, #3
 8000670:	b2db      	uxtb	r3, r3
 8000672:	461a      	mov	r2, r3
 8000674:	4b35      	ldr	r3, [pc, #212]	@ (800074c <fsm_mode_auto+0x25c>)
 8000676:	601a      	str	r2, [r3, #0]
			buffer_led[1] = counter_red % 10;
 8000678:	4b30      	ldr	r3, [pc, #192]	@ (800073c <fsm_mode_auto+0x24c>)
 800067a:	781a      	ldrb	r2, [r3, #0]
 800067c:	4b32      	ldr	r3, [pc, #200]	@ (8000748 <fsm_mode_auto+0x258>)
 800067e:	fba3 1302 	umull	r1, r3, r3, r2
 8000682:	08d9      	lsrs	r1, r3, #3
 8000684:	460b      	mov	r3, r1
 8000686:	009b      	lsls	r3, r3, #2
 8000688:	440b      	add	r3, r1
 800068a:	005b      	lsls	r3, r3, #1
 800068c:	1ad3      	subs	r3, r2, r3
 800068e:	b2db      	uxtb	r3, r3
 8000690:	461a      	mov	r2, r3
 8000692:	4b2e      	ldr	r3, [pc, #184]	@ (800074c <fsm_mode_auto+0x25c>)
 8000694:	605a      	str	r2, [r3, #4]
			buffer_led[2] = counter_amber / 10;
 8000696:	4b2e      	ldr	r3, [pc, #184]	@ (8000750 <fsm_mode_auto+0x260>)
 8000698:	781b      	ldrb	r3, [r3, #0]
 800069a:	4a2b      	ldr	r2, [pc, #172]	@ (8000748 <fsm_mode_auto+0x258>)
 800069c:	fba2 2303 	umull	r2, r3, r2, r3
 80006a0:	08db      	lsrs	r3, r3, #3
 80006a2:	b2db      	uxtb	r3, r3
 80006a4:	461a      	mov	r2, r3
 80006a6:	4b29      	ldr	r3, [pc, #164]	@ (800074c <fsm_mode_auto+0x25c>)
 80006a8:	609a      	str	r2, [r3, #8]
			buffer_led[3] = counter_amber % 10;
 80006aa:	4b29      	ldr	r3, [pc, #164]	@ (8000750 <fsm_mode_auto+0x260>)
 80006ac:	781a      	ldrb	r2, [r3, #0]
 80006ae:	4b26      	ldr	r3, [pc, #152]	@ (8000748 <fsm_mode_auto+0x258>)
 80006b0:	fba3 1302 	umull	r1, r3, r3, r2
 80006b4:	08d9      	lsrs	r1, r3, #3
 80006b6:	460b      	mov	r3, r1
 80006b8:	009b      	lsls	r3, r3, #2
 80006ba:	440b      	add	r3, r1
 80006bc:	005b      	lsls	r3, r3, #1
 80006be:	1ad3      	subs	r3, r2, r3
 80006c0:	b2db      	uxtb	r3, r3
 80006c2:	461a      	mov	r2, r3
 80006c4:	4b21      	ldr	r3, [pc, #132]	@ (800074c <fsm_mode_auto+0x25c>)
 80006c6:	60da      	str	r2, [r3, #12]
			toggle7SEG(1);
 80006c8:	2001      	movs	r0, #1
 80006ca:	f000 fc81 	bl	8000fd0 <toggle7SEG>
		}
		break;
 80006ce:	e0f6      	b.n	80008be <fsm_mode_auto+0x3ce>
	case STATUS_GREEN_RED:
		config_leds(0x33);
 80006d0:	2033      	movs	r0, #51	@ 0x33
 80006d2:	f7ff fd93 	bl	80001fc <config_leds>
		if(flag_one_sec == 1){
 80006d6:	4b16      	ldr	r3, [pc, #88]	@ (8000730 <fsm_mode_auto+0x240>)
 80006d8:	781b      	ldrb	r3, [r3, #0]
 80006da:	2b01      	cmp	r3, #1
 80006dc:	d117      	bne.n	800070e <fsm_mode_auto+0x21e>
			set_one_sec_timer();
 80006de:	f000 fe5b 	bl	8001398 <set_one_sec_timer>
			flag_l = (--counter_green == 0);
 80006e2:	4b14      	ldr	r3, [pc, #80]	@ (8000734 <fsm_mode_auto+0x244>)
 80006e4:	781b      	ldrb	r3, [r3, #0]
 80006e6:	3b01      	subs	r3, #1
 80006e8:	b2da      	uxtb	r2, r3
 80006ea:	4b12      	ldr	r3, [pc, #72]	@ (8000734 <fsm_mode_auto+0x244>)
 80006ec:	701a      	strb	r2, [r3, #0]
 80006ee:	4b11      	ldr	r3, [pc, #68]	@ (8000734 <fsm_mode_auto+0x244>)
 80006f0:	781b      	ldrb	r3, [r3, #0]
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	bf0c      	ite	eq
 80006f6:	2301      	moveq	r3, #1
 80006f8:	2300      	movne	r3, #0
 80006fa:	b2db      	uxtb	r3, r3
 80006fc:	461a      	mov	r2, r3
 80006fe:	4b0e      	ldr	r3, [pc, #56]	@ (8000738 <fsm_mode_auto+0x248>)
 8000700:	701a      	strb	r2, [r3, #0]
			--counter_red;
 8000702:	4b0e      	ldr	r3, [pc, #56]	@ (800073c <fsm_mode_auto+0x24c>)
 8000704:	781b      	ldrb	r3, [r3, #0]
 8000706:	3b01      	subs	r3, #1
 8000708:	b2da      	uxtb	r2, r3
 800070a:	4b0c      	ldr	r3, [pc, #48]	@ (800073c <fsm_mode_auto+0x24c>)
 800070c:	701a      	strb	r2, [r3, #0]
		}
		if(flag_l == 1){
 800070e:	4b0a      	ldr	r3, [pc, #40]	@ (8000738 <fsm_mode_auto+0x248>)
 8000710:	781b      	ldrb	r3, [r3, #0]
 8000712:	2b01      	cmp	r3, #1
 8000714:	d122      	bne.n	800075c <fsm_mode_auto+0x26c>
			flag_l = 0;
 8000716:	4b08      	ldr	r3, [pc, #32]	@ (8000738 <fsm_mode_auto+0x248>)
 8000718:	2200      	movs	r2, #0
 800071a:	701a      	strb	r2, [r3, #0]
			status_light = STATUS_AMBER_RED;
 800071c:	4b03      	ldr	r3, [pc, #12]	@ (800072c <fsm_mode_auto+0x23c>)
 800071e:	220e      	movs	r2, #14
 8000720:	701a      	strb	r2, [r3, #0]
			counter_green = green;
 8000722:	4b07      	ldr	r3, [pc, #28]	@ (8000740 <fsm_mode_auto+0x250>)
 8000724:	781a      	ldrb	r2, [r3, #0]
 8000726:	4b03      	ldr	r3, [pc, #12]	@ (8000734 <fsm_mode_auto+0x244>)
 8000728:	701a      	strb	r2, [r3, #0]
			break;
 800072a:	e0cd      	b.n	80008c8 <fsm_mode_auto+0x3d8>
 800072c:	20000045 	.word	0x20000045
 8000730:	20000053 	.word	0x20000053
 8000734:	20000008 	.word	0x20000008
 8000738:	2000004f 	.word	0x2000004f
 800073c:	20000006 	.word	0x20000006
 8000740:	20000005 	.word	0x20000005
 8000744:	20000054 	.word	0x20000054
 8000748:	cccccccd 	.word	0xcccccccd
 800074c:	20000058 	.word	0x20000058
 8000750:	20000007 	.word	0x20000007
 8000754:	20000003 	.word	0x20000003
 8000758:	20000004 	.word	0x20000004
		}
		if(flag_seg == 1){
 800075c:	4b5b      	ldr	r3, [pc, #364]	@ (80008cc <fsm_mode_auto+0x3dc>)
 800075e:	781b      	ldrb	r3, [r3, #0]
 8000760:	2b01      	cmp	r3, #1
 8000762:	f040 80ae 	bne.w	80008c2 <fsm_mode_auto+0x3d2>
			flag_seg = 0;
 8000766:	4b59      	ldr	r3, [pc, #356]	@ (80008cc <fsm_mode_auto+0x3dc>)
 8000768:	2200      	movs	r2, #0
 800076a:	701a      	strb	r2, [r3, #0]
			buffer_led[0] = counter_green / 10;
 800076c:	4b58      	ldr	r3, [pc, #352]	@ (80008d0 <fsm_mode_auto+0x3e0>)
 800076e:	781b      	ldrb	r3, [r3, #0]
 8000770:	4a58      	ldr	r2, [pc, #352]	@ (80008d4 <fsm_mode_auto+0x3e4>)
 8000772:	fba2 2303 	umull	r2, r3, r2, r3
 8000776:	08db      	lsrs	r3, r3, #3
 8000778:	b2db      	uxtb	r3, r3
 800077a:	461a      	mov	r2, r3
 800077c:	4b56      	ldr	r3, [pc, #344]	@ (80008d8 <fsm_mode_auto+0x3e8>)
 800077e:	601a      	str	r2, [r3, #0]
			buffer_led[1] = counter_green % 10;
 8000780:	4b53      	ldr	r3, [pc, #332]	@ (80008d0 <fsm_mode_auto+0x3e0>)
 8000782:	781a      	ldrb	r2, [r3, #0]
 8000784:	4b53      	ldr	r3, [pc, #332]	@ (80008d4 <fsm_mode_auto+0x3e4>)
 8000786:	fba3 1302 	umull	r1, r3, r3, r2
 800078a:	08d9      	lsrs	r1, r3, #3
 800078c:	460b      	mov	r3, r1
 800078e:	009b      	lsls	r3, r3, #2
 8000790:	440b      	add	r3, r1
 8000792:	005b      	lsls	r3, r3, #1
 8000794:	1ad3      	subs	r3, r2, r3
 8000796:	b2db      	uxtb	r3, r3
 8000798:	461a      	mov	r2, r3
 800079a:	4b4f      	ldr	r3, [pc, #316]	@ (80008d8 <fsm_mode_auto+0x3e8>)
 800079c:	605a      	str	r2, [r3, #4]
			buffer_led[2] = counter_red / 10;
 800079e:	4b4f      	ldr	r3, [pc, #316]	@ (80008dc <fsm_mode_auto+0x3ec>)
 80007a0:	781b      	ldrb	r3, [r3, #0]
 80007a2:	4a4c      	ldr	r2, [pc, #304]	@ (80008d4 <fsm_mode_auto+0x3e4>)
 80007a4:	fba2 2303 	umull	r2, r3, r2, r3
 80007a8:	08db      	lsrs	r3, r3, #3
 80007aa:	b2db      	uxtb	r3, r3
 80007ac:	461a      	mov	r2, r3
 80007ae:	4b4a      	ldr	r3, [pc, #296]	@ (80008d8 <fsm_mode_auto+0x3e8>)
 80007b0:	609a      	str	r2, [r3, #8]
			buffer_led[3] = counter_red % 10;
 80007b2:	4b4a      	ldr	r3, [pc, #296]	@ (80008dc <fsm_mode_auto+0x3ec>)
 80007b4:	781a      	ldrb	r2, [r3, #0]
 80007b6:	4b47      	ldr	r3, [pc, #284]	@ (80008d4 <fsm_mode_auto+0x3e4>)
 80007b8:	fba3 1302 	umull	r1, r3, r3, r2
 80007bc:	08d9      	lsrs	r1, r3, #3
 80007be:	460b      	mov	r3, r1
 80007c0:	009b      	lsls	r3, r3, #2
 80007c2:	440b      	add	r3, r1
 80007c4:	005b      	lsls	r3, r3, #1
 80007c6:	1ad3      	subs	r3, r2, r3
 80007c8:	b2db      	uxtb	r3, r3
 80007ca:	461a      	mov	r2, r3
 80007cc:	4b42      	ldr	r3, [pc, #264]	@ (80008d8 <fsm_mode_auto+0x3e8>)
 80007ce:	60da      	str	r2, [r3, #12]
			toggle7SEG(1);
 80007d0:	2001      	movs	r0, #1
 80007d2:	f000 fbfd 	bl	8000fd0 <toggle7SEG>
		}
		break;
 80007d6:	e074      	b.n	80008c2 <fsm_mode_auto+0x3d2>
	case STATUS_AMBER_RED:
		config_leds(0x2b);
 80007d8:	202b      	movs	r0, #43	@ 0x2b
 80007da:	f7ff fd0f 	bl	80001fc <config_leds>
		if(flag_one_sec == 1){
 80007de:	4b40      	ldr	r3, [pc, #256]	@ (80008e0 <fsm_mode_auto+0x3f0>)
 80007e0:	781b      	ldrb	r3, [r3, #0]
 80007e2:	2b01      	cmp	r3, #1
 80007e4:	d117      	bne.n	8000816 <fsm_mode_auto+0x326>
			set_one_sec_timer();
 80007e6:	f000 fdd7 	bl	8001398 <set_one_sec_timer>
			flag_l = (--counter_amber == 0);
 80007ea:	4b3e      	ldr	r3, [pc, #248]	@ (80008e4 <fsm_mode_auto+0x3f4>)
 80007ec:	781b      	ldrb	r3, [r3, #0]
 80007ee:	3b01      	subs	r3, #1
 80007f0:	b2da      	uxtb	r2, r3
 80007f2:	4b3c      	ldr	r3, [pc, #240]	@ (80008e4 <fsm_mode_auto+0x3f4>)
 80007f4:	701a      	strb	r2, [r3, #0]
 80007f6:	4b3b      	ldr	r3, [pc, #236]	@ (80008e4 <fsm_mode_auto+0x3f4>)
 80007f8:	781b      	ldrb	r3, [r3, #0]
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	bf0c      	ite	eq
 80007fe:	2301      	moveq	r3, #1
 8000800:	2300      	movne	r3, #0
 8000802:	b2db      	uxtb	r3, r3
 8000804:	461a      	mov	r2, r3
 8000806:	4b38      	ldr	r3, [pc, #224]	@ (80008e8 <fsm_mode_auto+0x3f8>)
 8000808:	701a      	strb	r2, [r3, #0]
			--counter_red;
 800080a:	4b34      	ldr	r3, [pc, #208]	@ (80008dc <fsm_mode_auto+0x3ec>)
 800080c:	781b      	ldrb	r3, [r3, #0]
 800080e:	3b01      	subs	r3, #1
 8000810:	b2da      	uxtb	r2, r3
 8000812:	4b32      	ldr	r3, [pc, #200]	@ (80008dc <fsm_mode_auto+0x3ec>)
 8000814:	701a      	strb	r2, [r3, #0]
		}
		if(flag_l == 1){
 8000816:	4b34      	ldr	r3, [pc, #208]	@ (80008e8 <fsm_mode_auto+0x3f8>)
 8000818:	781b      	ldrb	r3, [r3, #0]
 800081a:	2b01      	cmp	r3, #1
 800081c:	d10e      	bne.n	800083c <fsm_mode_auto+0x34c>
			flag_l = 0;
 800081e:	4b32      	ldr	r3, [pc, #200]	@ (80008e8 <fsm_mode_auto+0x3f8>)
 8000820:	2200      	movs	r2, #0
 8000822:	701a      	strb	r2, [r3, #0]
			status_light = STATUS_RED_GREEN;
 8000824:	4b31      	ldr	r3, [pc, #196]	@ (80008ec <fsm_mode_auto+0x3fc>)
 8000826:	220b      	movs	r2, #11
 8000828:	701a      	strb	r2, [r3, #0]
			counter_red = red;
 800082a:	4b31      	ldr	r3, [pc, #196]	@ (80008f0 <fsm_mode_auto+0x400>)
 800082c:	781a      	ldrb	r2, [r3, #0]
 800082e:	4b2b      	ldr	r3, [pc, #172]	@ (80008dc <fsm_mode_auto+0x3ec>)
 8000830:	701a      	strb	r2, [r3, #0]
			counter_amber = amber;
 8000832:	4b30      	ldr	r3, [pc, #192]	@ (80008f4 <fsm_mode_auto+0x404>)
 8000834:	781a      	ldrb	r2, [r3, #0]
 8000836:	4b2b      	ldr	r3, [pc, #172]	@ (80008e4 <fsm_mode_auto+0x3f4>)
 8000838:	701a      	strb	r2, [r3, #0]
			break;
 800083a:	e045      	b.n	80008c8 <fsm_mode_auto+0x3d8>
		}
		if(flag_seg == 1){
 800083c:	4b23      	ldr	r3, [pc, #140]	@ (80008cc <fsm_mode_auto+0x3dc>)
 800083e:	781b      	ldrb	r3, [r3, #0]
 8000840:	2b01      	cmp	r3, #1
 8000842:	d140      	bne.n	80008c6 <fsm_mode_auto+0x3d6>
			flag_seg = 0;
 8000844:	4b21      	ldr	r3, [pc, #132]	@ (80008cc <fsm_mode_auto+0x3dc>)
 8000846:	2200      	movs	r2, #0
 8000848:	701a      	strb	r2, [r3, #0]
			buffer_led[0] = counter_amber / 10;
 800084a:	4b26      	ldr	r3, [pc, #152]	@ (80008e4 <fsm_mode_auto+0x3f4>)
 800084c:	781b      	ldrb	r3, [r3, #0]
 800084e:	4a21      	ldr	r2, [pc, #132]	@ (80008d4 <fsm_mode_auto+0x3e4>)
 8000850:	fba2 2303 	umull	r2, r3, r2, r3
 8000854:	08db      	lsrs	r3, r3, #3
 8000856:	b2db      	uxtb	r3, r3
 8000858:	461a      	mov	r2, r3
 800085a:	4b1f      	ldr	r3, [pc, #124]	@ (80008d8 <fsm_mode_auto+0x3e8>)
 800085c:	601a      	str	r2, [r3, #0]
			buffer_led[1] = counter_amber % 10;
 800085e:	4b21      	ldr	r3, [pc, #132]	@ (80008e4 <fsm_mode_auto+0x3f4>)
 8000860:	781a      	ldrb	r2, [r3, #0]
 8000862:	4b1c      	ldr	r3, [pc, #112]	@ (80008d4 <fsm_mode_auto+0x3e4>)
 8000864:	fba3 1302 	umull	r1, r3, r3, r2
 8000868:	08d9      	lsrs	r1, r3, #3
 800086a:	460b      	mov	r3, r1
 800086c:	009b      	lsls	r3, r3, #2
 800086e:	440b      	add	r3, r1
 8000870:	005b      	lsls	r3, r3, #1
 8000872:	1ad3      	subs	r3, r2, r3
 8000874:	b2db      	uxtb	r3, r3
 8000876:	461a      	mov	r2, r3
 8000878:	4b17      	ldr	r3, [pc, #92]	@ (80008d8 <fsm_mode_auto+0x3e8>)
 800087a:	605a      	str	r2, [r3, #4]
			buffer_led[2] = counter_red / 10;
 800087c:	4b17      	ldr	r3, [pc, #92]	@ (80008dc <fsm_mode_auto+0x3ec>)
 800087e:	781b      	ldrb	r3, [r3, #0]
 8000880:	4a14      	ldr	r2, [pc, #80]	@ (80008d4 <fsm_mode_auto+0x3e4>)
 8000882:	fba2 2303 	umull	r2, r3, r2, r3
 8000886:	08db      	lsrs	r3, r3, #3
 8000888:	b2db      	uxtb	r3, r3
 800088a:	461a      	mov	r2, r3
 800088c:	4b12      	ldr	r3, [pc, #72]	@ (80008d8 <fsm_mode_auto+0x3e8>)
 800088e:	609a      	str	r2, [r3, #8]
			buffer_led[3] = counter_red % 10;
 8000890:	4b12      	ldr	r3, [pc, #72]	@ (80008dc <fsm_mode_auto+0x3ec>)
 8000892:	781a      	ldrb	r2, [r3, #0]
 8000894:	4b0f      	ldr	r3, [pc, #60]	@ (80008d4 <fsm_mode_auto+0x3e4>)
 8000896:	fba3 1302 	umull	r1, r3, r3, r2
 800089a:	08d9      	lsrs	r1, r3, #3
 800089c:	460b      	mov	r3, r1
 800089e:	009b      	lsls	r3, r3, #2
 80008a0:	440b      	add	r3, r1
 80008a2:	005b      	lsls	r3, r3, #1
 80008a4:	1ad3      	subs	r3, r2, r3
 80008a6:	b2db      	uxtb	r3, r3
 80008a8:	461a      	mov	r2, r3
 80008aa:	4b0b      	ldr	r3, [pc, #44]	@ (80008d8 <fsm_mode_auto+0x3e8>)
 80008ac:	60da      	str	r2, [r3, #12]
			toggle7SEG(1);
 80008ae:	2001      	movs	r0, #1
 80008b0:	f000 fb8e 	bl	8000fd0 <toggle7SEG>
		}
		break;
 80008b4:	e007      	b.n	80008c6 <fsm_mode_auto+0x3d6>
	default:
		break;
 80008b6:	bf00      	nop
 80008b8:	e006      	b.n	80008c8 <fsm_mode_auto+0x3d8>
		break;
 80008ba:	bf00      	nop
 80008bc:	e004      	b.n	80008c8 <fsm_mode_auto+0x3d8>
		break;
 80008be:	bf00      	nop
 80008c0:	e002      	b.n	80008c8 <fsm_mode_auto+0x3d8>
		break;
 80008c2:	bf00      	nop
 80008c4:	e000      	b.n	80008c8 <fsm_mode_auto+0x3d8>
		break;
 80008c6:	bf00      	nop
	}
}
 80008c8:	bf00      	nop
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	20000054 	.word	0x20000054
 80008d0:	20000008 	.word	0x20000008
 80008d4:	cccccccd 	.word	0xcccccccd
 80008d8:	20000058 	.word	0x20000058
 80008dc:	20000006 	.word	0x20000006
 80008e0:	20000053 	.word	0x20000053
 80008e4:	20000007 	.word	0x20000007
 80008e8:	2000004f 	.word	0x2000004f
 80008ec:	20000045 	.word	0x20000045
 80008f0:	20000003 	.word	0x20000003
 80008f4:	20000004 	.word	0x20000004

080008f8 <mode_red_config>:

void mode_red_config(void){
 80008f8:	b580      	push	{r7, lr}
 80008fa:	af00      	add	r7, sp, #0
	if(flag_i == 1){
 80008fc:	4b23      	ldr	r3, [pc, #140]	@ (800098c <mode_red_config+0x94>)
 80008fe:	781b      	ldrb	r3, [r3, #0]
 8000900:	2b01      	cmp	r3, #1
 8000902:	d112      	bne.n	800092a <mode_red_config+0x32>
		flag_i = 0;
 8000904:	4b21      	ldr	r3, [pc, #132]	@ (800098c <mode_red_config+0x94>)
 8000906:	2200      	movs	r2, #0
 8000908:	701a      	strb	r2, [r3, #0]
		counter_red = (((++counter_red) == 100) ? 2 : counter_red);
 800090a:	4b21      	ldr	r3, [pc, #132]	@ (8000990 <mode_red_config+0x98>)
 800090c:	781b      	ldrb	r3, [r3, #0]
 800090e:	3301      	adds	r3, #1
 8000910:	b2da      	uxtb	r2, r3
 8000912:	4b1f      	ldr	r3, [pc, #124]	@ (8000990 <mode_red_config+0x98>)
 8000914:	701a      	strb	r2, [r3, #0]
 8000916:	4b1e      	ldr	r3, [pc, #120]	@ (8000990 <mode_red_config+0x98>)
 8000918:	781b      	ldrb	r3, [r3, #0]
 800091a:	2b64      	cmp	r3, #100	@ 0x64
 800091c:	d002      	beq.n	8000924 <mode_red_config+0x2c>
 800091e:	4b1c      	ldr	r3, [pc, #112]	@ (8000990 <mode_red_config+0x98>)
 8000920:	781b      	ldrb	r3, [r3, #0]
 8000922:	e000      	b.n	8000926 <mode_red_config+0x2e>
 8000924:	2302      	movs	r3, #2
 8000926:	4a1a      	ldr	r2, [pc, #104]	@ (8000990 <mode_red_config+0x98>)
 8000928:	7013      	strb	r3, [r2, #0]
	}
	if(flag_s == 1){
 800092a:	4b1a      	ldr	r3, [pc, #104]	@ (8000994 <mode_red_config+0x9c>)
 800092c:	781b      	ldrb	r3, [r3, #0]
 800092e:	2b01      	cmp	r3, #1
 8000930:	d106      	bne.n	8000940 <mode_red_config+0x48>
		flag_s = 0;
 8000932:	4b18      	ldr	r3, [pc, #96]	@ (8000994 <mode_red_config+0x9c>)
 8000934:	2200      	movs	r2, #0
 8000936:	701a      	strb	r2, [r3, #0]
		red = counter_red;
 8000938:	4b15      	ldr	r3, [pc, #84]	@ (8000990 <mode_red_config+0x98>)
 800093a:	781a      	ldrb	r2, [r3, #0]
 800093c:	4b16      	ldr	r3, [pc, #88]	@ (8000998 <mode_red_config+0xa0>)
 800093e:	701a      	strb	r2, [r3, #0]
	}
	if(flag_seg == 1){
 8000940:	4b16      	ldr	r3, [pc, #88]	@ (800099c <mode_red_config+0xa4>)
 8000942:	781b      	ldrb	r3, [r3, #0]
 8000944:	2b01      	cmp	r3, #1
 8000946:	d11e      	bne.n	8000986 <mode_red_config+0x8e>
		flag_seg = 0;
 8000948:	4b14      	ldr	r3, [pc, #80]	@ (800099c <mode_red_config+0xa4>)
 800094a:	2200      	movs	r2, #0
 800094c:	701a      	strb	r2, [r3, #0]
		buffer_led[2] = counter_red / 10;
 800094e:	4b10      	ldr	r3, [pc, #64]	@ (8000990 <mode_red_config+0x98>)
 8000950:	781b      	ldrb	r3, [r3, #0]
 8000952:	4a13      	ldr	r2, [pc, #76]	@ (80009a0 <mode_red_config+0xa8>)
 8000954:	fba2 2303 	umull	r2, r3, r2, r3
 8000958:	08db      	lsrs	r3, r3, #3
 800095a:	b2db      	uxtb	r3, r3
 800095c:	461a      	mov	r2, r3
 800095e:	4b11      	ldr	r3, [pc, #68]	@ (80009a4 <mode_red_config+0xac>)
 8000960:	609a      	str	r2, [r3, #8]
		buffer_led[3] = counter_red % 10;
 8000962:	4b0b      	ldr	r3, [pc, #44]	@ (8000990 <mode_red_config+0x98>)
 8000964:	781a      	ldrb	r2, [r3, #0]
 8000966:	4b0e      	ldr	r3, [pc, #56]	@ (80009a0 <mode_red_config+0xa8>)
 8000968:	fba3 1302 	umull	r1, r3, r3, r2
 800096c:	08d9      	lsrs	r1, r3, #3
 800096e:	460b      	mov	r3, r1
 8000970:	009b      	lsls	r3, r3, #2
 8000972:	440b      	add	r3, r1
 8000974:	005b      	lsls	r3, r3, #1
 8000976:	1ad3      	subs	r3, r2, r3
 8000978:	b2db      	uxtb	r3, r3
 800097a:	461a      	mov	r2, r3
 800097c:	4b09      	ldr	r3, [pc, #36]	@ (80009a4 <mode_red_config+0xac>)
 800097e:	60da      	str	r2, [r3, #12]
		toggle7SEG(1);
 8000980:	2001      	movs	r0, #1
 8000982:	f000 fb25 	bl	8000fd0 <toggle7SEG>
	}
}
 8000986:	bf00      	nop
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	20000051 	.word	0x20000051
 8000990:	20000006 	.word	0x20000006
 8000994:	20000052 	.word	0x20000052
 8000998:	20000003 	.word	0x20000003
 800099c:	20000054 	.word	0x20000054
 80009a0:	cccccccd 	.word	0xcccccccd
 80009a4:	20000058 	.word	0x20000058

080009a8 <mode_amber_config>:

void mode_amber_config(void){
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0
	if(flag_i == 1){
 80009ac:	4b29      	ldr	r3, [pc, #164]	@ (8000a54 <mode_amber_config+0xac>)
 80009ae:	781b      	ldrb	r3, [r3, #0]
 80009b0:	2b01      	cmp	r3, #1
 80009b2:	d112      	bne.n	80009da <mode_amber_config+0x32>
		flag_i = 0;
 80009b4:	4b27      	ldr	r3, [pc, #156]	@ (8000a54 <mode_amber_config+0xac>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	701a      	strb	r2, [r3, #0]
		counter_amber = (((++counter_amber) == 100) ? 1 : counter_amber);
 80009ba:	4b27      	ldr	r3, [pc, #156]	@ (8000a58 <mode_amber_config+0xb0>)
 80009bc:	781b      	ldrb	r3, [r3, #0]
 80009be:	3301      	adds	r3, #1
 80009c0:	b2da      	uxtb	r2, r3
 80009c2:	4b25      	ldr	r3, [pc, #148]	@ (8000a58 <mode_amber_config+0xb0>)
 80009c4:	701a      	strb	r2, [r3, #0]
 80009c6:	4b24      	ldr	r3, [pc, #144]	@ (8000a58 <mode_amber_config+0xb0>)
 80009c8:	781b      	ldrb	r3, [r3, #0]
 80009ca:	2b64      	cmp	r3, #100	@ 0x64
 80009cc:	d002      	beq.n	80009d4 <mode_amber_config+0x2c>
 80009ce:	4b22      	ldr	r3, [pc, #136]	@ (8000a58 <mode_amber_config+0xb0>)
 80009d0:	781b      	ldrb	r3, [r3, #0]
 80009d2:	e000      	b.n	80009d6 <mode_amber_config+0x2e>
 80009d4:	2301      	movs	r3, #1
 80009d6:	4a20      	ldr	r2, [pc, #128]	@ (8000a58 <mode_amber_config+0xb0>)
 80009d8:	7013      	strb	r3, [r2, #0]
	}
	if(flag_s == 1){
 80009da:	4b20      	ldr	r3, [pc, #128]	@ (8000a5c <mode_amber_config+0xb4>)
 80009dc:	781b      	ldrb	r3, [r3, #0]
 80009de:	2b01      	cmp	r3, #1
 80009e0:	d112      	bne.n	8000a08 <mode_amber_config+0x60>
		flag_s = 0;
 80009e2:	4b1e      	ldr	r3, [pc, #120]	@ (8000a5c <mode_amber_config+0xb4>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	701a      	strb	r2, [r3, #0]
		amber = ((counter_amber >= red) ? 1 : counter_amber);
 80009e8:	4b1b      	ldr	r3, [pc, #108]	@ (8000a58 <mode_amber_config+0xb0>)
 80009ea:	781a      	ldrb	r2, [r3, #0]
 80009ec:	4b1c      	ldr	r3, [pc, #112]	@ (8000a60 <mode_amber_config+0xb8>)
 80009ee:	781b      	ldrb	r3, [r3, #0]
 80009f0:	429a      	cmp	r2, r3
 80009f2:	d202      	bcs.n	80009fa <mode_amber_config+0x52>
 80009f4:	4b18      	ldr	r3, [pc, #96]	@ (8000a58 <mode_amber_config+0xb0>)
 80009f6:	781b      	ldrb	r3, [r3, #0]
 80009f8:	e000      	b.n	80009fc <mode_amber_config+0x54>
 80009fa:	2301      	movs	r3, #1
 80009fc:	4a19      	ldr	r2, [pc, #100]	@ (8000a64 <mode_amber_config+0xbc>)
 80009fe:	7013      	strb	r3, [r2, #0]
		counter_amber = amber;
 8000a00:	4b18      	ldr	r3, [pc, #96]	@ (8000a64 <mode_amber_config+0xbc>)
 8000a02:	781a      	ldrb	r2, [r3, #0]
 8000a04:	4b14      	ldr	r3, [pc, #80]	@ (8000a58 <mode_amber_config+0xb0>)
 8000a06:	701a      	strb	r2, [r3, #0]
	}
	if(flag_seg == 1){
 8000a08:	4b17      	ldr	r3, [pc, #92]	@ (8000a68 <mode_amber_config+0xc0>)
 8000a0a:	781b      	ldrb	r3, [r3, #0]
 8000a0c:	2b01      	cmp	r3, #1
 8000a0e:	d11e      	bne.n	8000a4e <mode_amber_config+0xa6>
		flag_seg = 0;
 8000a10:	4b15      	ldr	r3, [pc, #84]	@ (8000a68 <mode_amber_config+0xc0>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	701a      	strb	r2, [r3, #0]
		buffer_led[2] = counter_amber / 10;
 8000a16:	4b10      	ldr	r3, [pc, #64]	@ (8000a58 <mode_amber_config+0xb0>)
 8000a18:	781b      	ldrb	r3, [r3, #0]
 8000a1a:	4a14      	ldr	r2, [pc, #80]	@ (8000a6c <mode_amber_config+0xc4>)
 8000a1c:	fba2 2303 	umull	r2, r3, r2, r3
 8000a20:	08db      	lsrs	r3, r3, #3
 8000a22:	b2db      	uxtb	r3, r3
 8000a24:	461a      	mov	r2, r3
 8000a26:	4b12      	ldr	r3, [pc, #72]	@ (8000a70 <mode_amber_config+0xc8>)
 8000a28:	609a      	str	r2, [r3, #8]
		buffer_led[3] = counter_amber % 10;
 8000a2a:	4b0b      	ldr	r3, [pc, #44]	@ (8000a58 <mode_amber_config+0xb0>)
 8000a2c:	781a      	ldrb	r2, [r3, #0]
 8000a2e:	4b0f      	ldr	r3, [pc, #60]	@ (8000a6c <mode_amber_config+0xc4>)
 8000a30:	fba3 1302 	umull	r1, r3, r3, r2
 8000a34:	08d9      	lsrs	r1, r3, #3
 8000a36:	460b      	mov	r3, r1
 8000a38:	009b      	lsls	r3, r3, #2
 8000a3a:	440b      	add	r3, r1
 8000a3c:	005b      	lsls	r3, r3, #1
 8000a3e:	1ad3      	subs	r3, r2, r3
 8000a40:	b2db      	uxtb	r3, r3
 8000a42:	461a      	mov	r2, r3
 8000a44:	4b0a      	ldr	r3, [pc, #40]	@ (8000a70 <mode_amber_config+0xc8>)
 8000a46:	60da      	str	r2, [r3, #12]
		toggle7SEG(1);
 8000a48:	2001      	movs	r0, #1
 8000a4a:	f000 fac1 	bl	8000fd0 <toggle7SEG>
	}
}
 8000a4e:	bf00      	nop
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	20000051 	.word	0x20000051
 8000a58:	20000007 	.word	0x20000007
 8000a5c:	20000052 	.word	0x20000052
 8000a60:	20000003 	.word	0x20000003
 8000a64:	20000004 	.word	0x20000004
 8000a68:	20000054 	.word	0x20000054
 8000a6c:	cccccccd 	.word	0xcccccccd
 8000a70:	20000058 	.word	0x20000058

08000a74 <mode_green_config>:

void mode_green_config(void){
 8000a74:	b580      	push	{r7, lr}
 8000a76:	af00      	add	r7, sp, #0
	if(flag_i == 1){
 8000a78:	4b27      	ldr	r3, [pc, #156]	@ (8000b18 <mode_green_config+0xa4>)
 8000a7a:	781b      	ldrb	r3, [r3, #0]
 8000a7c:	2b01      	cmp	r3, #1
 8000a7e:	d112      	bne.n	8000aa6 <mode_green_config+0x32>
		flag_i = 0;
 8000a80:	4b25      	ldr	r3, [pc, #148]	@ (8000b18 <mode_green_config+0xa4>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	701a      	strb	r2, [r3, #0]
		counter_green = (((++counter_green) == 100) ? 1 : counter_green);
 8000a86:	4b25      	ldr	r3, [pc, #148]	@ (8000b1c <mode_green_config+0xa8>)
 8000a88:	781b      	ldrb	r3, [r3, #0]
 8000a8a:	3301      	adds	r3, #1
 8000a8c:	b2da      	uxtb	r2, r3
 8000a8e:	4b23      	ldr	r3, [pc, #140]	@ (8000b1c <mode_green_config+0xa8>)
 8000a90:	701a      	strb	r2, [r3, #0]
 8000a92:	4b22      	ldr	r3, [pc, #136]	@ (8000b1c <mode_green_config+0xa8>)
 8000a94:	781b      	ldrb	r3, [r3, #0]
 8000a96:	2b64      	cmp	r3, #100	@ 0x64
 8000a98:	d002      	beq.n	8000aa0 <mode_green_config+0x2c>
 8000a9a:	4b20      	ldr	r3, [pc, #128]	@ (8000b1c <mode_green_config+0xa8>)
 8000a9c:	781b      	ldrb	r3, [r3, #0]
 8000a9e:	e000      	b.n	8000aa2 <mode_green_config+0x2e>
 8000aa0:	2301      	movs	r3, #1
 8000aa2:	4a1e      	ldr	r2, [pc, #120]	@ (8000b1c <mode_green_config+0xa8>)
 8000aa4:	7013      	strb	r3, [r2, #0]
	}
	if(flag_s == 1){
 8000aa6:	4b1e      	ldr	r3, [pc, #120]	@ (8000b20 <mode_green_config+0xac>)
 8000aa8:	781b      	ldrb	r3, [r3, #0]
 8000aaa:	2b01      	cmp	r3, #1
 8000aac:	d10e      	bne.n	8000acc <mode_green_config+0x58>
		flag_s = 0;
 8000aae:	4b1c      	ldr	r3, [pc, #112]	@ (8000b20 <mode_green_config+0xac>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	701a      	strb	r2, [r3, #0]
		green = (red - amber);
 8000ab4:	4b1b      	ldr	r3, [pc, #108]	@ (8000b24 <mode_green_config+0xb0>)
 8000ab6:	781a      	ldrb	r2, [r3, #0]
 8000ab8:	4b1b      	ldr	r3, [pc, #108]	@ (8000b28 <mode_green_config+0xb4>)
 8000aba:	781b      	ldrb	r3, [r3, #0]
 8000abc:	1ad3      	subs	r3, r2, r3
 8000abe:	b2da      	uxtb	r2, r3
 8000ac0:	4b1a      	ldr	r3, [pc, #104]	@ (8000b2c <mode_green_config+0xb8>)
 8000ac2:	701a      	strb	r2, [r3, #0]
		counter_green = green;
 8000ac4:	4b19      	ldr	r3, [pc, #100]	@ (8000b2c <mode_green_config+0xb8>)
 8000ac6:	781a      	ldrb	r2, [r3, #0]
 8000ac8:	4b14      	ldr	r3, [pc, #80]	@ (8000b1c <mode_green_config+0xa8>)
 8000aca:	701a      	strb	r2, [r3, #0]
	}
	if(flag_seg == 1){
 8000acc:	4b18      	ldr	r3, [pc, #96]	@ (8000b30 <mode_green_config+0xbc>)
 8000ace:	781b      	ldrb	r3, [r3, #0]
 8000ad0:	2b01      	cmp	r3, #1
 8000ad2:	d11e      	bne.n	8000b12 <mode_green_config+0x9e>
		flag_seg = 0;
 8000ad4:	4b16      	ldr	r3, [pc, #88]	@ (8000b30 <mode_green_config+0xbc>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	701a      	strb	r2, [r3, #0]
		buffer_led[2] = counter_green / 10;
 8000ada:	4b10      	ldr	r3, [pc, #64]	@ (8000b1c <mode_green_config+0xa8>)
 8000adc:	781b      	ldrb	r3, [r3, #0]
 8000ade:	4a15      	ldr	r2, [pc, #84]	@ (8000b34 <mode_green_config+0xc0>)
 8000ae0:	fba2 2303 	umull	r2, r3, r2, r3
 8000ae4:	08db      	lsrs	r3, r3, #3
 8000ae6:	b2db      	uxtb	r3, r3
 8000ae8:	461a      	mov	r2, r3
 8000aea:	4b13      	ldr	r3, [pc, #76]	@ (8000b38 <mode_green_config+0xc4>)
 8000aec:	609a      	str	r2, [r3, #8]
		buffer_led[3] = counter_green % 10;
 8000aee:	4b0b      	ldr	r3, [pc, #44]	@ (8000b1c <mode_green_config+0xa8>)
 8000af0:	781a      	ldrb	r2, [r3, #0]
 8000af2:	4b10      	ldr	r3, [pc, #64]	@ (8000b34 <mode_green_config+0xc0>)
 8000af4:	fba3 1302 	umull	r1, r3, r3, r2
 8000af8:	08d9      	lsrs	r1, r3, #3
 8000afa:	460b      	mov	r3, r1
 8000afc:	009b      	lsls	r3, r3, #2
 8000afe:	440b      	add	r3, r1
 8000b00:	005b      	lsls	r3, r3, #1
 8000b02:	1ad3      	subs	r3, r2, r3
 8000b04:	b2db      	uxtb	r3, r3
 8000b06:	461a      	mov	r2, r3
 8000b08:	4b0b      	ldr	r3, [pc, #44]	@ (8000b38 <mode_green_config+0xc4>)
 8000b0a:	60da      	str	r2, [r3, #12]
		toggle7SEG(1);
 8000b0c:	2001      	movs	r0, #1
 8000b0e:	f000 fa5f 	bl	8000fd0 <toggle7SEG>
	}
}
 8000b12:	bf00      	nop
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	20000051 	.word	0x20000051
 8000b1c:	20000008 	.word	0x20000008
 8000b20:	20000052 	.word	0x20000052
 8000b24:	20000003 	.word	0x20000003
 8000b28:	20000004 	.word	0x20000004
 8000b2c:	20000005 	.word	0x20000005
 8000b30:	20000054 	.word	0x20000054
 8000b34:	cccccccd 	.word	0xcccccccd
 8000b38:	20000058 	.word	0x20000058

08000b3c <init_fsm_traffic_mode>:

//- Global Functions -----------------------------
void init_fsm_traffic_mode(){
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	af00      	add	r7, sp, #0
	status_traffic = MODE_AUTO;
 8000b40:	4b04      	ldr	r3, [pc, #16]	@ (8000b54 <init_fsm_traffic_mode+0x18>)
 8000b42:	2201      	movs	r2, #1
 8000b44:	701a      	strb	r2, [r3, #0]
	status_light = STATUS_RED_GREEN;
 8000b46:	4b04      	ldr	r3, [pc, #16]	@ (8000b58 <init_fsm_traffic_mode+0x1c>)
 8000b48:	220b      	movs	r2, #11
 8000b4a:	701a      	strb	r2, [r3, #0]
	init_auto_mode();
 8000b4c:	f7ff fb9a 	bl	8000284 <init_auto_mode>
}
 8000b50:	bf00      	nop
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	20000044 	.word	0x20000044
 8000b58:	20000045 	.word	0x20000045

08000b5c <fsm_traffic_mode>:

void fsm_traffic_mode(void){
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0
	switch(status_traffic){
 8000b60:	4b43      	ldr	r3, [pc, #268]	@ (8000c70 <fsm_traffic_mode+0x114>)
 8000b62:	781b      	ldrb	r3, [r3, #0]
 8000b64:	3b01      	subs	r3, #1
 8000b66:	2b03      	cmp	r3, #3
 8000b68:	d879      	bhi.n	8000c5e <fsm_traffic_mode+0x102>
 8000b6a:	a201      	add	r2, pc, #4	@ (adr r2, 8000b70 <fsm_traffic_mode+0x14>)
 8000b6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b70:	08000b81 	.word	0x08000b81
 8000b74:	08000ba1 	.word	0x08000ba1
 8000b78:	08000bdf 	.word	0x08000bdf
 8000b7c:	08000c1f 	.word	0x08000c1f
	case MODE_AUTO:
		if(flag_m == 1){
 8000b80:	4b3c      	ldr	r3, [pc, #240]	@ (8000c74 <fsm_traffic_mode+0x118>)
 8000b82:	781b      	ldrb	r3, [r3, #0]
 8000b84:	2b01      	cmp	r3, #1
 8000b86:	d108      	bne.n	8000b9a <fsm_traffic_mode+0x3e>
			flag_m = 0;
 8000b88:	4b3a      	ldr	r3, [pc, #232]	@ (8000c74 <fsm_traffic_mode+0x118>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	701a      	strb	r2, [r3, #0]
			status_traffic = MODE_RED_CONFIG;
 8000b8e:	4b38      	ldr	r3, [pc, #224]	@ (8000c70 <fsm_traffic_mode+0x114>)
 8000b90:	2202      	movs	r2, #2
 8000b92:	701a      	strb	r2, [r3, #0]
			init_red_config_mode();
 8000b94:	f7ff fbda 	bl	800034c <init_red_config_mode>
			break;
 8000b98:	e062      	b.n	8000c60 <fsm_traffic_mode+0x104>
		}
		//TODO
		fsm_mode_auto();
 8000b9a:	f7ff fca9 	bl	80004f0 <fsm_mode_auto>
		break;
 8000b9e:	e05f      	b.n	8000c60 <fsm_traffic_mode+0x104>
	case MODE_RED_CONFIG:
		if(flag_m == 1){
 8000ba0:	4b34      	ldr	r3, [pc, #208]	@ (8000c74 <fsm_traffic_mode+0x118>)
 8000ba2:	781b      	ldrb	r3, [r3, #0]
 8000ba4:	2b01      	cmp	r3, #1
 8000ba6:	d108      	bne.n	8000bba <fsm_traffic_mode+0x5e>
			flag_m = 0;
 8000ba8:	4b32      	ldr	r3, [pc, #200]	@ (8000c74 <fsm_traffic_mode+0x118>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	701a      	strb	r2, [r3, #0]
			status_traffic = MODE_AMBER_CONFIG;
 8000bae:	4b30      	ldr	r3, [pc, #192]	@ (8000c70 <fsm_traffic_mode+0x114>)
 8000bb0:	2203      	movs	r2, #3
 8000bb2:	701a      	strb	r2, [r3, #0]
			init_amber_config_mode();
 8000bb4:	f7ff fc0c 	bl	80003d0 <init_amber_config_mode>
			break;
 8000bb8:	e052      	b.n	8000c60 <fsm_traffic_mode+0x104>
		}
		//TODO
		if(flag_blinky_led == 1){
 8000bba:	4b2f      	ldr	r3, [pc, #188]	@ (8000c78 <fsm_traffic_mode+0x11c>)
 8000bbc:	781b      	ldrb	r3, [r3, #0]
 8000bbe:	2b01      	cmp	r3, #1
 8000bc0:	d10a      	bne.n	8000bd8 <fsm_traffic_mode+0x7c>
			flag_blinky_led = 0;
 8000bc2:	4b2d      	ldr	r3, [pc, #180]	@ (8000c78 <fsm_traffic_mode+0x11c>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_TogglePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin);
 8000bc8:	2110      	movs	r1, #16
 8000bca:	482c      	ldr	r0, [pc, #176]	@ (8000c7c <fsm_traffic_mode+0x120>)
 8000bcc:	f000 ff8f 	bl	8001aee <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin);
 8000bd0:	2180      	movs	r1, #128	@ 0x80
 8000bd2:	482a      	ldr	r0, [pc, #168]	@ (8000c7c <fsm_traffic_mode+0x120>)
 8000bd4:	f000 ff8b 	bl	8001aee <HAL_GPIO_TogglePin>
		}
		mode_red_config();
 8000bd8:	f7ff fe8e 	bl	80008f8 <mode_red_config>
		break;
 8000bdc:	e040      	b.n	8000c60 <fsm_traffic_mode+0x104>
	case MODE_AMBER_CONFIG:
		if(flag_m == 1){
 8000bde:	4b25      	ldr	r3, [pc, #148]	@ (8000c74 <fsm_traffic_mode+0x118>)
 8000be0:	781b      	ldrb	r3, [r3, #0]
 8000be2:	2b01      	cmp	r3, #1
 8000be4:	d108      	bne.n	8000bf8 <fsm_traffic_mode+0x9c>
			flag_m = 0;
 8000be6:	4b23      	ldr	r3, [pc, #140]	@ (8000c74 <fsm_traffic_mode+0x118>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	701a      	strb	r2, [r3, #0]
			status_traffic = MODE_GREEN_CONFIG;
 8000bec:	4b20      	ldr	r3, [pc, #128]	@ (8000c70 <fsm_traffic_mode+0x114>)
 8000bee:	2204      	movs	r2, #4
 8000bf0:	701a      	strb	r2, [r3, #0]
			init_green_config_mode();
 8000bf2:	f7ff fc2f 	bl	8000454 <init_green_config_mode>
			break;
 8000bf6:	e033      	b.n	8000c60 <fsm_traffic_mode+0x104>
		}
		//TODO
		if(flag_blinky_led == 1){
 8000bf8:	4b1f      	ldr	r3, [pc, #124]	@ (8000c78 <fsm_traffic_mode+0x11c>)
 8000bfa:	781b      	ldrb	r3, [r3, #0]
 8000bfc:	2b01      	cmp	r3, #1
 8000bfe:	d10b      	bne.n	8000c18 <fsm_traffic_mode+0xbc>
			flag_blinky_led = 0;
 8000c00:	4b1d      	ldr	r3, [pc, #116]	@ (8000c78 <fsm_traffic_mode+0x11c>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_TogglePin(LED_AMBER_1_GPIO_Port, LED_AMBER_1_Pin);
 8000c06:	2120      	movs	r1, #32
 8000c08:	481c      	ldr	r0, [pc, #112]	@ (8000c7c <fsm_traffic_mode+0x120>)
 8000c0a:	f000 ff70 	bl	8001aee <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(LED_AMBER_2_GPIO_Port, LED_AMBER_2_Pin);
 8000c0e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000c12:	481a      	ldr	r0, [pc, #104]	@ (8000c7c <fsm_traffic_mode+0x120>)
 8000c14:	f000 ff6b 	bl	8001aee <HAL_GPIO_TogglePin>
		}
		mode_amber_config();
 8000c18:	f7ff fec6 	bl	80009a8 <mode_amber_config>
		break;
 8000c1c:	e020      	b.n	8000c60 <fsm_traffic_mode+0x104>
	case MODE_GREEN_CONFIG:
		if(flag_m == 1){
 8000c1e:	4b15      	ldr	r3, [pc, #84]	@ (8000c74 <fsm_traffic_mode+0x118>)
 8000c20:	781b      	ldrb	r3, [r3, #0]
 8000c22:	2b01      	cmp	r3, #1
 8000c24:	d108      	bne.n	8000c38 <fsm_traffic_mode+0xdc>
			flag_m = 0;
 8000c26:	4b13      	ldr	r3, [pc, #76]	@ (8000c74 <fsm_traffic_mode+0x118>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	701a      	strb	r2, [r3, #0]
			status_traffic = MODE_AUTO;
 8000c2c:	4b10      	ldr	r3, [pc, #64]	@ (8000c70 <fsm_traffic_mode+0x114>)
 8000c2e:	2201      	movs	r2, #1
 8000c30:	701a      	strb	r2, [r3, #0]
			init_fsm_traffic_mode();
 8000c32:	f7ff ff83 	bl	8000b3c <init_fsm_traffic_mode>
			break;
 8000c36:	e013      	b.n	8000c60 <fsm_traffic_mode+0x104>
		}
		//TODO
		if(flag_blinky_led == 1){
 8000c38:	4b0f      	ldr	r3, [pc, #60]	@ (8000c78 <fsm_traffic_mode+0x11c>)
 8000c3a:	781b      	ldrb	r3, [r3, #0]
 8000c3c:	2b01      	cmp	r3, #1
 8000c3e:	d10b      	bne.n	8000c58 <fsm_traffic_mode+0xfc>
			flag_blinky_led = 0;
 8000c40:	4b0d      	ldr	r3, [pc, #52]	@ (8000c78 <fsm_traffic_mode+0x11c>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_TogglePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin);
 8000c46:	2140      	movs	r1, #64	@ 0x40
 8000c48:	480c      	ldr	r0, [pc, #48]	@ (8000c7c <fsm_traffic_mode+0x120>)
 8000c4a:	f000 ff50 	bl	8001aee <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin);
 8000c4e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000c52:	480a      	ldr	r0, [pc, #40]	@ (8000c7c <fsm_traffic_mode+0x120>)
 8000c54:	f000 ff4b 	bl	8001aee <HAL_GPIO_TogglePin>
		}
		mode_green_config();
 8000c58:	f7ff ff0c 	bl	8000a74 <mode_green_config>
		break;
 8000c5c:	e000      	b.n	8000c60 <fsm_traffic_mode+0x104>
	default:
		break;
 8000c5e:	bf00      	nop
	}
	if(flag_one_sec == 1){
 8000c60:	4b07      	ldr	r3, [pc, #28]	@ (8000c80 <fsm_traffic_mode+0x124>)
 8000c62:	781b      	ldrb	r3, [r3, #0]
 8000c64:	2b01      	cmp	r3, #1
 8000c66:	d101      	bne.n	8000c6c <fsm_traffic_mode+0x110>
		set_one_sec_timer();
 8000c68:	f000 fb96 	bl	8001398 <set_one_sec_timer>
	}
}
 8000c6c:	bf00      	nop
 8000c6e:	bd80      	pop	{r7, pc}
 8000c70:	20000044 	.word	0x20000044
 8000c74:	20000050 	.word	0x20000050
 8000c78:	20000055 	.word	0x20000055
 8000c7c:	40010800 	.word	0x40010800
 8000c80:	20000053 	.word	0x20000053

08000c84 <button_reading>:

//static uint16_t counterForButtonPress1s[N0_OF_BUTTONS];

//--- Functions Definition -----------------------

void button_reading(void){
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b082      	sub	sp, #8
 8000c88:	af00      	add	r7, sp, #0
	for(int i = BUTTON_MODE; i < N0_OF_BUTTONS; ++i){
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	607b      	str	r3, [r7, #4]
 8000c8e:	e02e      	b.n	8000cee <button_reading+0x6a>
		debounceButtonBuffer2[i] = debounceButtonBuffer1[i];
 8000c90:	4a1b      	ldr	r2, [pc, #108]	@ (8000d00 <button_reading+0x7c>)
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	4413      	add	r3, r2
 8000c96:	7819      	ldrb	r1, [r3, #0]
 8000c98:	4a1a      	ldr	r2, [pc, #104]	@ (8000d04 <button_reading+0x80>)
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	4413      	add	r3, r2
 8000c9e:	460a      	mov	r2, r1
 8000ca0:	701a      	strb	r2, [r3, #0]
		debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(BUTTON_MODE_GPIO_Port, (BUTTON_MODE_Pin << i));
 8000ca2:	2202      	movs	r2, #2
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8000caa:	b29b      	uxth	r3, r3
 8000cac:	4619      	mov	r1, r3
 8000cae:	4816      	ldr	r0, [pc, #88]	@ (8000d08 <button_reading+0x84>)
 8000cb0:	f000 feee 	bl	8001a90 <HAL_GPIO_ReadPin>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	4a11      	ldr	r2, [pc, #68]	@ (8000d00 <button_reading+0x7c>)
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	4413      	add	r3, r2
 8000cbe:	460a      	mov	r2, r1
 8000cc0:	701a      	strb	r2, [r3, #0]
		if(debounceButtonBuffer1[i] == debounceButtonBuffer2[i]){
 8000cc2:	4a0f      	ldr	r2, [pc, #60]	@ (8000d00 <button_reading+0x7c>)
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	4413      	add	r3, r2
 8000cc8:	781a      	ldrb	r2, [r3, #0]
 8000cca:	490e      	ldr	r1, [pc, #56]	@ (8000d04 <button_reading+0x80>)
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	440b      	add	r3, r1
 8000cd0:	781b      	ldrb	r3, [r3, #0]
 8000cd2:	429a      	cmp	r2, r3
 8000cd4:	d108      	bne.n	8000ce8 <button_reading+0x64>
			flagForButtonPress[i] = debounceButtonBuffer1[i];
 8000cd6:	4a0a      	ldr	r2, [pc, #40]	@ (8000d00 <button_reading+0x7c>)
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	4413      	add	r3, r2
 8000cdc:	7819      	ldrb	r1, [r3, #0]
 8000cde:	4a0b      	ldr	r2, [pc, #44]	@ (8000d0c <button_reading+0x88>)
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	4413      	add	r3, r2
 8000ce4:	460a      	mov	r2, r1
 8000ce6:	701a      	strb	r2, [r3, #0]
	for(int i = BUTTON_MODE; i < N0_OF_BUTTONS; ++i){
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	3301      	adds	r3, #1
 8000cec:	607b      	str	r3, [r7, #4]
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	2b02      	cmp	r3, #2
 8000cf2:	ddcd      	ble.n	8000c90 <button_reading+0xc>
//				counterForButtonPress1s[i] = 0;
//				flagForButtonPress1s[i] = 0;
//			}
		}
	}
}
 8000cf4:	bf00      	nop
 8000cf6:	bf00      	nop
 8000cf8:	3708      	adds	r7, #8
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	20000048 	.word	0x20000048
 8000d04:	2000004c 	.word	0x2000004c
 8000d08:	40010800 	.word	0x40010800
 8000d0c:	2000000c 	.word	0x2000000c

08000d10 <is_button_pressed>:

unsigned char is_button_pressed(unsigned char index){
 8000d10:	b480      	push	{r7}
 8000d12:	b083      	sub	sp, #12
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	4603      	mov	r3, r0
 8000d18:	71fb      	strb	r3, [r7, #7]
	if(index >= N0_OF_BUTTONS) return 0;
 8000d1a:	79fb      	ldrb	r3, [r7, #7]
 8000d1c:	2b02      	cmp	r3, #2
 8000d1e:	d901      	bls.n	8000d24 <is_button_pressed+0x14>
 8000d20:	2300      	movs	r3, #0
 8000d22:	e007      	b.n	8000d34 <is_button_pressed+0x24>
	return (flagForButtonPress[index] == BUTTON_STATUS_PRESSED);
 8000d24:	79fb      	ldrb	r3, [r7, #7]
 8000d26:	4a06      	ldr	r2, [pc, #24]	@ (8000d40 <is_button_pressed+0x30>)
 8000d28:	5cd3      	ldrb	r3, [r2, r3]
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	bf0c      	ite	eq
 8000d2e:	2301      	moveq	r3, #1
 8000d30:	2300      	movne	r3, #0
 8000d32:	b2db      	uxtb	r3, r3
}
 8000d34:	4618      	mov	r0, r3
 8000d36:	370c      	adds	r7, #12
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bc80      	pop	{r7}
 8000d3c:	4770      	bx	lr
 8000d3e:	bf00      	nop
 8000d40:	2000000c 	.word	0x2000000c

08000d44 <init_lab3>:
uint8_t flag_seg 		= 0;
uint8_t flag_blinky_led = 0;

//--- Functions Definition -----------------------

void init_lab3(uint32_t Prescaler, uint32_t Period){
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b082      	sub	sp, #8
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
 8000d4c:	6039      	str	r1, [r7, #0]
	init_SoftwareTimer(HAL_RCC_GetHCLKFreq(), // Return HCLK Frequency
 8000d4e:	f001 faa7 	bl	80022a0 <HAL_RCC_GetHCLKFreq>
 8000d52:	4603      	mov	r3, r0
 8000d54:	683a      	ldr	r2, [r7, #0]
 8000d56:	6879      	ldr	r1, [r7, #4]
 8000d58:	4618      	mov	r0, r3
 8000d5a:	f000 faff 	bl	800135c <init_SoftwareTimer>
					   Prescaler,  			  // Return TIM2 Prescaler
					   Period);	 			  // Return TIM2 Period
	init_fsm_traffic_mode();
 8000d5e:	f7ff feed 	bl	8000b3c <init_fsm_traffic_mode>
	set_one_sec_timer();
 8000d62:	f000 fb19 	bl	8001398 <set_one_sec_timer>
}
 8000d66:	bf00      	nop
 8000d68:	3708      	adds	r7, #8
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}

08000d6e <run_lab3>:

void run_lab3(){
 8000d6e:	b580      	push	{r7, lr}
 8000d70:	af00      	add	r7, sp, #0
	fsm_traffic_mode();
 8000d72:	f7ff fef3 	bl	8000b5c <fsm_traffic_mode>
	fsm_input_processing();
 8000d76:	f7ff f9e9 	bl	800014c <fsm_input_processing>
}
 8000d7a:	bf00      	nop
 8000d7c:	bd80      	pop	{r7, pc}

08000d7e <HAL_TIM_PeriodElapsedCallback>:

//--- INTERRUPT TIMER ----------------------------

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000d7e:	b580      	push	{r7, lr}
 8000d80:	b082      	sub	sp, #8
 8000d82:	af00      	add	r7, sp, #0
 8000d84:	6078      	str	r0, [r7, #4]
	timer_Run();
 8000d86:	f000 fb1f 	bl	80013c8 <timer_Run>
	button_reading();
 8000d8a:	f7ff ff7b 	bl	8000c84 <button_reading>
}
 8000d8e:	bf00      	nop
 8000d90:	3708      	adds	r7, #8
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}
	...

08000d98 <display7SEG1>:
uint8_t pattern_number[10] = {0x01, 0x4F, 0x12, 0x06, 0x4C, 0x24, 0x20, 0x0F, 0x00, 0x04};
uint8_t index_led 		   = 0;

//--- Functions Definition -----------------------
//- Local Functions ------------------------------
void display7SEG1(int num){
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b082      	sub	sp, #8
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
	//---0---
	//-5   1-
	//---6---
	//-4   2-
	//---3---
	HAL_GPIO_WritePin(LED_7SEG1_1_GPIO_Port, LED_7SEG1_1_Pin, (0x40 & pattern_number[num]));
 8000da0:	4a2b      	ldr	r2, [pc, #172]	@ (8000e50 <display7SEG1+0xb8>)
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	4413      	add	r3, r2
 8000da6:	781b      	ldrb	r3, [r3, #0]
 8000da8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000dac:	b2db      	uxtb	r3, r3
 8000dae:	461a      	mov	r2, r3
 8000db0:	2102      	movs	r1, #2
 8000db2:	4828      	ldr	r0, [pc, #160]	@ (8000e54 <display7SEG1+0xbc>)
 8000db4:	f000 fe83 	bl	8001abe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_7SEG1_2_GPIO_Port, LED_7SEG1_2_Pin, (0x20 & pattern_number[num]));
 8000db8:	4a25      	ldr	r2, [pc, #148]	@ (8000e50 <display7SEG1+0xb8>)
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	4413      	add	r3, r2
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	f003 0320 	and.w	r3, r3, #32
 8000dc4:	b2db      	uxtb	r3, r3
 8000dc6:	461a      	mov	r2, r3
 8000dc8:	2104      	movs	r1, #4
 8000dca:	4822      	ldr	r0, [pc, #136]	@ (8000e54 <display7SEG1+0xbc>)
 8000dcc:	f000 fe77 	bl	8001abe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_7SEG1_3_GPIO_Port, LED_7SEG1_3_Pin, (0x10 & pattern_number[num]));
 8000dd0:	4a1f      	ldr	r2, [pc, #124]	@ (8000e50 <display7SEG1+0xb8>)
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	4413      	add	r3, r2
 8000dd6:	781b      	ldrb	r3, [r3, #0]
 8000dd8:	f003 0310 	and.w	r3, r3, #16
 8000ddc:	b2db      	uxtb	r3, r3
 8000dde:	461a      	mov	r2, r3
 8000de0:	2108      	movs	r1, #8
 8000de2:	481c      	ldr	r0, [pc, #112]	@ (8000e54 <display7SEG1+0xbc>)
 8000de4:	f000 fe6b 	bl	8001abe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_7SEG1_4_GPIO_Port, LED_7SEG1_4_Pin, (0x08 & pattern_number[num]));
 8000de8:	4a19      	ldr	r2, [pc, #100]	@ (8000e50 <display7SEG1+0xb8>)
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	4413      	add	r3, r2
 8000dee:	781b      	ldrb	r3, [r3, #0]
 8000df0:	f003 0308 	and.w	r3, r3, #8
 8000df4:	b2db      	uxtb	r3, r3
 8000df6:	461a      	mov	r2, r3
 8000df8:	2110      	movs	r1, #16
 8000dfa:	4816      	ldr	r0, [pc, #88]	@ (8000e54 <display7SEG1+0xbc>)
 8000dfc:	f000 fe5f 	bl	8001abe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_7SEG1_5_GPIO_Port, LED_7SEG1_5_Pin, (0x04 & pattern_number[num]));
 8000e00:	4a13      	ldr	r2, [pc, #76]	@ (8000e50 <display7SEG1+0xb8>)
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	4413      	add	r3, r2
 8000e06:	781b      	ldrb	r3, [r3, #0]
 8000e08:	f003 0304 	and.w	r3, r3, #4
 8000e0c:	b2db      	uxtb	r3, r3
 8000e0e:	461a      	mov	r2, r3
 8000e10:	2120      	movs	r1, #32
 8000e12:	4810      	ldr	r0, [pc, #64]	@ (8000e54 <display7SEG1+0xbc>)
 8000e14:	f000 fe53 	bl	8001abe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_7SEG1_6_GPIO_Port, LED_7SEG1_6_Pin, (0x02 & pattern_number[num]));
 8000e18:	4a0d      	ldr	r2, [pc, #52]	@ (8000e50 <display7SEG1+0xb8>)
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	4413      	add	r3, r2
 8000e1e:	781b      	ldrb	r3, [r3, #0]
 8000e20:	f003 0302 	and.w	r3, r3, #2
 8000e24:	b2db      	uxtb	r3, r3
 8000e26:	461a      	mov	r2, r3
 8000e28:	2140      	movs	r1, #64	@ 0x40
 8000e2a:	480a      	ldr	r0, [pc, #40]	@ (8000e54 <display7SEG1+0xbc>)
 8000e2c:	f000 fe47 	bl	8001abe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_7SEG1_7_GPIO_Port, LED_7SEG1_7_Pin, (0x01 & pattern_number[num]));
 8000e30:	4a07      	ldr	r2, [pc, #28]	@ (8000e50 <display7SEG1+0xb8>)
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	4413      	add	r3, r2
 8000e36:	781b      	ldrb	r3, [r3, #0]
 8000e38:	f003 0301 	and.w	r3, r3, #1
 8000e3c:	b2db      	uxtb	r3, r3
 8000e3e:	461a      	mov	r2, r3
 8000e40:	2180      	movs	r1, #128	@ 0x80
 8000e42:	4804      	ldr	r0, [pc, #16]	@ (8000e54 <display7SEG1+0xbc>)
 8000e44:	f000 fe3b 	bl	8001abe <HAL_GPIO_WritePin>
}
 8000e48:	bf00      	nop
 8000e4a:	3708      	adds	r7, #8
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}
 8000e50:	20000010 	.word	0x20000010
 8000e54:	40010c00 	.word	0x40010c00

08000e58 <display7SEG2>:

void display7SEG2(int num){
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b082      	sub	sp, #8
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
	//---0---
	//-5   1-
	//---6---
	//-4   2-
	//---3---
	HAL_GPIO_WritePin(LED_7SEG2_1_GPIO_Port, LED_7SEG2_1_Pin, (0x40 & pattern_number[num]));
 8000e60:	4a2f      	ldr	r2, [pc, #188]	@ (8000f20 <display7SEG2+0xc8>)
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	4413      	add	r3, r2
 8000e66:	781b      	ldrb	r3, [r3, #0]
 8000e68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000e6c:	b2db      	uxtb	r3, r3
 8000e6e:	461a      	mov	r2, r3
 8000e70:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000e74:	482b      	ldr	r0, [pc, #172]	@ (8000f24 <display7SEG2+0xcc>)
 8000e76:	f000 fe22 	bl	8001abe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_7SEG2_2_GPIO_Port, LED_7SEG2_2_Pin, (0x20 & pattern_number[num]));
 8000e7a:	4a29      	ldr	r2, [pc, #164]	@ (8000f20 <display7SEG2+0xc8>)
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	4413      	add	r3, r2
 8000e80:	781b      	ldrb	r3, [r3, #0]
 8000e82:	f003 0320 	and.w	r3, r3, #32
 8000e86:	b2db      	uxtb	r3, r3
 8000e88:	461a      	mov	r2, r3
 8000e8a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000e8e:	4825      	ldr	r0, [pc, #148]	@ (8000f24 <display7SEG2+0xcc>)
 8000e90:	f000 fe15 	bl	8001abe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_7SEG2_3_GPIO_Port, LED_7SEG2_3_Pin, (0x10 & pattern_number[num]));
 8000e94:	4a22      	ldr	r2, [pc, #136]	@ (8000f20 <display7SEG2+0xc8>)
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	4413      	add	r3, r2
 8000e9a:	781b      	ldrb	r3, [r3, #0]
 8000e9c:	f003 0310 	and.w	r3, r3, #16
 8000ea0:	b2db      	uxtb	r3, r3
 8000ea2:	461a      	mov	r2, r3
 8000ea4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000ea8:	481e      	ldr	r0, [pc, #120]	@ (8000f24 <display7SEG2+0xcc>)
 8000eaa:	f000 fe08 	bl	8001abe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_7SEG2_4_GPIO_Port, LED_7SEG2_4_Pin, (0x08 & pattern_number[num]));
 8000eae:	4a1c      	ldr	r2, [pc, #112]	@ (8000f20 <display7SEG2+0xc8>)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	4413      	add	r3, r2
 8000eb4:	781b      	ldrb	r3, [r3, #0]
 8000eb6:	f003 0308 	and.w	r3, r3, #8
 8000eba:	b2db      	uxtb	r3, r3
 8000ebc:	461a      	mov	r2, r3
 8000ebe:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000ec2:	4818      	ldr	r0, [pc, #96]	@ (8000f24 <display7SEG2+0xcc>)
 8000ec4:	f000 fdfb 	bl	8001abe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_7SEG2_5_GPIO_Port, LED_7SEG2_5_Pin, (0x04 & pattern_number[num]));
 8000ec8:	4a15      	ldr	r2, [pc, #84]	@ (8000f20 <display7SEG2+0xc8>)
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	4413      	add	r3, r2
 8000ece:	781b      	ldrb	r3, [r3, #0]
 8000ed0:	f003 0304 	and.w	r3, r3, #4
 8000ed4:	b2db      	uxtb	r3, r3
 8000ed6:	461a      	mov	r2, r3
 8000ed8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000edc:	4811      	ldr	r0, [pc, #68]	@ (8000f24 <display7SEG2+0xcc>)
 8000ede:	f000 fdee 	bl	8001abe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_7SEG2_6_GPIO_Port, LED_7SEG2_6_Pin, (0x02 & pattern_number[num]));
 8000ee2:	4a0f      	ldr	r2, [pc, #60]	@ (8000f20 <display7SEG2+0xc8>)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	4413      	add	r3, r2
 8000ee8:	781b      	ldrb	r3, [r3, #0]
 8000eea:	f003 0302 	and.w	r3, r3, #2
 8000eee:	b2db      	uxtb	r3, r3
 8000ef0:	461a      	mov	r2, r3
 8000ef2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000ef6:	480b      	ldr	r0, [pc, #44]	@ (8000f24 <display7SEG2+0xcc>)
 8000ef8:	f000 fde1 	bl	8001abe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_7SEG2_7_GPIO_Port, LED_7SEG2_7_Pin, (0x01 & pattern_number[num]));
 8000efc:	4a08      	ldr	r2, [pc, #32]	@ (8000f20 <display7SEG2+0xc8>)
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	4413      	add	r3, r2
 8000f02:	781b      	ldrb	r3, [r3, #0]
 8000f04:	f003 0301 	and.w	r3, r3, #1
 8000f08:	b2db      	uxtb	r3, r3
 8000f0a:	461a      	mov	r2, r3
 8000f0c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000f10:	4804      	ldr	r0, [pc, #16]	@ (8000f24 <display7SEG2+0xcc>)
 8000f12:	f000 fdd4 	bl	8001abe <HAL_GPIO_WritePin>
}
 8000f16:	bf00      	nop
 8000f18:	3708      	adds	r7, #8
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	20000010 	.word	0x20000010
 8000f24:	40010c00 	.word	0x40010c00

08000f28 <update7SEG>:

//- Global Functions -----------------------------
void update7SEG(int index){
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b082      	sub	sp, #8
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
	switch(index){
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	2b03      	cmp	r3, #3
 8000f34:	d822      	bhi.n	8000f7c <update7SEG+0x54>
 8000f36:	a201      	add	r2, pc, #4	@ (adr r2, 8000f3c <update7SEG+0x14>)
 8000f38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f3c:	08000f4d 	.word	0x08000f4d
 8000f40:	08000f59 	.word	0x08000f59
 8000f44:	08000f65 	.word	0x08000f65
 8000f48:	08000f71 	.word	0x08000f71
	case 0:
		display7SEG1(buffer_led[0]);
 8000f4c:	4b1e      	ldr	r3, [pc, #120]	@ (8000fc8 <update7SEG+0xa0>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	4618      	mov	r0, r3
 8000f52:	f7ff ff21 	bl	8000d98 <display7SEG1>
	    break;
 8000f56:	e012      	b.n	8000f7e <update7SEG+0x56>
	case 1:
		display7SEG1(buffer_led[1]);
 8000f58:	4b1b      	ldr	r3, [pc, #108]	@ (8000fc8 <update7SEG+0xa0>)
 8000f5a:	685b      	ldr	r3, [r3, #4]
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f7ff ff1b 	bl	8000d98 <display7SEG1>
	    break;
 8000f62:	e00c      	b.n	8000f7e <update7SEG+0x56>
	case 2:
		display7SEG2(buffer_led[2]);
 8000f64:	4b18      	ldr	r3, [pc, #96]	@ (8000fc8 <update7SEG+0xa0>)
 8000f66:	689b      	ldr	r3, [r3, #8]
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f7ff ff75 	bl	8000e58 <display7SEG2>
		break;
 8000f6e:	e006      	b.n	8000f7e <update7SEG+0x56>
	case 3:
		display7SEG2(buffer_led[3]);
 8000f70:	4b15      	ldr	r3, [pc, #84]	@ (8000fc8 <update7SEG+0xa0>)
 8000f72:	68db      	ldr	r3, [r3, #12]
 8000f74:	4618      	mov	r0, r3
 8000f76:	f7ff ff6f 	bl	8000e58 <display7SEG2>
		break;
 8000f7a:	e000      	b.n	8000f7e <update7SEG+0x56>
	default:
		break;
 8000f7c:	bf00      	nop
	}
	HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, !(0 == index || 2 == index));
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d004      	beq.n	8000f8e <update7SEG+0x66>
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	2b02      	cmp	r3, #2
 8000f88:	d001      	beq.n	8000f8e <update7SEG+0x66>
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	e000      	b.n	8000f90 <update7SEG+0x68>
 8000f8e:	2300      	movs	r3, #0
 8000f90:	b2db      	uxtb	r3, r3
 8000f92:	461a      	mov	r2, r3
 8000f94:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000f98:	480c      	ldr	r0, [pc, #48]	@ (8000fcc <update7SEG+0xa4>)
 8000f9a:	f000 fd90 	bl	8001abe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, !(1 == index || 3 == index));
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	2b01      	cmp	r3, #1
 8000fa2:	d004      	beq.n	8000fae <update7SEG+0x86>
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	2b03      	cmp	r3, #3
 8000fa8:	d001      	beq.n	8000fae <update7SEG+0x86>
 8000faa:	2301      	movs	r3, #1
 8000fac:	e000      	b.n	8000fb0 <update7SEG+0x88>
 8000fae:	2300      	movs	r3, #0
 8000fb0:	b2db      	uxtb	r3, r3
 8000fb2:	461a      	mov	r2, r3
 8000fb4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000fb8:	4804      	ldr	r0, [pc, #16]	@ (8000fcc <update7SEG+0xa4>)
 8000fba:	f000 fd80 	bl	8001abe <HAL_GPIO_WritePin>
}
 8000fbe:	bf00      	nop
 8000fc0:	3708      	adds	r7, #8
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	20000058 	.word	0x20000058
 8000fcc:	40010800 	.word	0x40010800

08000fd0 <toggle7SEG>:

void toggle7SEG(uint8_t num){
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	71fb      	strb	r3, [r7, #7]
	switch(index_led & num){
 8000fda:	4b11      	ldr	r3, [pc, #68]	@ (8001020 <toggle7SEG+0x50>)
 8000fdc:	781a      	ldrb	r2, [r3, #0]
 8000fde:	79fb      	ldrb	r3, [r7, #7]
 8000fe0:	4013      	ands	r3, r2
 8000fe2:	b2db      	uxtb	r3, r3
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d002      	beq.n	8000fee <toggle7SEG+0x1e>
 8000fe8:	2b01      	cmp	r3, #1
 8000fea:	d00a      	beq.n	8001002 <toggle7SEG+0x32>
		update7SEG(0);
		update7SEG(2);
		index_led = 0;
		break;
	default:
		break;
 8000fec:	e013      	b.n	8001016 <toggle7SEG+0x46>
		update7SEG(1);
 8000fee:	2001      	movs	r0, #1
 8000ff0:	f7ff ff9a 	bl	8000f28 <update7SEG>
		update7SEG(3);
 8000ff4:	2003      	movs	r0, #3
 8000ff6:	f7ff ff97 	bl	8000f28 <update7SEG>
		index_led = 1;
 8000ffa:	4b09      	ldr	r3, [pc, #36]	@ (8001020 <toggle7SEG+0x50>)
 8000ffc:	2201      	movs	r2, #1
 8000ffe:	701a      	strb	r2, [r3, #0]
		break;
 8001000:	e009      	b.n	8001016 <toggle7SEG+0x46>
		update7SEG(0);
 8001002:	2000      	movs	r0, #0
 8001004:	f7ff ff90 	bl	8000f28 <update7SEG>
		update7SEG(2);
 8001008:	2002      	movs	r0, #2
 800100a:	f7ff ff8d 	bl	8000f28 <update7SEG>
		index_led = 0;
 800100e:	4b04      	ldr	r3, [pc, #16]	@ (8001020 <toggle7SEG+0x50>)
 8001010:	2200      	movs	r2, #0
 8001012:	701a      	strb	r2, [r3, #0]
		break;
 8001014:	bf00      	nop
	}
}
 8001016:	bf00      	nop
 8001018:	3708      	adds	r7, #8
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	20000068 	.word	0x20000068

08001024 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001028:	f000 fa46 	bl	80014b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800102c:	f000 f814 	bl	8001058 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001030:	f000 f89a 	bl	8001168 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001034:	f000 f84c 	bl	80010d0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8001038:	4806      	ldr	r0, [pc, #24]	@ (8001054 <main+0x30>)
 800103a:	f001 f9a9 	bl	8002390 <HAL_TIM_Base_Start_IT>

  init_lab3(htim2.Init.Prescaler, htim2.Init.Period);
 800103e:	4b05      	ldr	r3, [pc, #20]	@ (8001054 <main+0x30>)
 8001040:	685b      	ldr	r3, [r3, #4]
 8001042:	4a04      	ldr	r2, [pc, #16]	@ (8001054 <main+0x30>)
 8001044:	68d2      	ldr	r2, [r2, #12]
 8001046:	4611      	mov	r1, r2
 8001048:	4618      	mov	r0, r3
 800104a:	f7ff fe7b 	bl	8000d44 <init_lab3>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  run_lab3();
 800104e:	f7ff fe8e 	bl	8000d6e <run_lab3>
 8001052:	e7fc      	b.n	800104e <main+0x2a>
 8001054:	2000006c 	.word	0x2000006c

08001058 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b090      	sub	sp, #64	@ 0x40
 800105c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800105e:	f107 0318 	add.w	r3, r7, #24
 8001062:	2228      	movs	r2, #40	@ 0x28
 8001064:	2100      	movs	r1, #0
 8001066:	4618      	mov	r0, r3
 8001068:	f001 fd1e 	bl	8002aa8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800106c:	1d3b      	adds	r3, r7, #4
 800106e:	2200      	movs	r2, #0
 8001070:	601a      	str	r2, [r3, #0]
 8001072:	605a      	str	r2, [r3, #4]
 8001074:	609a      	str	r2, [r3, #8]
 8001076:	60da      	str	r2, [r3, #12]
 8001078:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800107a:	2302      	movs	r3, #2
 800107c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800107e:	2301      	movs	r3, #1
 8001080:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001082:	2310      	movs	r3, #16
 8001084:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001086:	2300      	movs	r3, #0
 8001088:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800108a:	f107 0318 	add.w	r3, r7, #24
 800108e:	4618      	mov	r0, r3
 8001090:	f000 fd46 	bl	8001b20 <HAL_RCC_OscConfig>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d001      	beq.n	800109e <SystemClock_Config+0x46>
  {
    Error_Handler();
 800109a:	f000 f8c7 	bl	800122c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800109e:	230f      	movs	r3, #15
 80010a0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80010a2:	2300      	movs	r3, #0
 80010a4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010a6:	2300      	movs	r3, #0
 80010a8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80010aa:	2300      	movs	r3, #0
 80010ac:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010ae:	2300      	movs	r3, #0
 80010b0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80010b2:	1d3b      	adds	r3, r7, #4
 80010b4:	2100      	movs	r1, #0
 80010b6:	4618      	mov	r0, r3
 80010b8:	f000 ffb4 	bl	8002024 <HAL_RCC_ClockConfig>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d001      	beq.n	80010c6 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80010c2:	f000 f8b3 	bl	800122c <Error_Handler>
  }
}
 80010c6:	bf00      	nop
 80010c8:	3740      	adds	r7, #64	@ 0x40
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
	...

080010d0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b086      	sub	sp, #24
 80010d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010d6:	f107 0308 	add.w	r3, r7, #8
 80010da:	2200      	movs	r2, #0
 80010dc:	601a      	str	r2, [r3, #0]
 80010de:	605a      	str	r2, [r3, #4]
 80010e0:	609a      	str	r2, [r3, #8]
 80010e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010e4:	463b      	mov	r3, r7
 80010e6:	2200      	movs	r2, #0
 80010e8:	601a      	str	r2, [r3, #0]
 80010ea:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80010ec:	4b1d      	ldr	r3, [pc, #116]	@ (8001164 <MX_TIM2_Init+0x94>)
 80010ee:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80010f2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 80010f4:	4b1b      	ldr	r3, [pc, #108]	@ (8001164 <MX_TIM2_Init+0x94>)
 80010f6:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 80010fa:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010fc:	4b19      	ldr	r3, [pc, #100]	@ (8001164 <MX_TIM2_Init+0x94>)
 80010fe:	2200      	movs	r2, #0
 8001100:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8001102:	4b18      	ldr	r3, [pc, #96]	@ (8001164 <MX_TIM2_Init+0x94>)
 8001104:	2209      	movs	r2, #9
 8001106:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001108:	4b16      	ldr	r3, [pc, #88]	@ (8001164 <MX_TIM2_Init+0x94>)
 800110a:	2200      	movs	r2, #0
 800110c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800110e:	4b15      	ldr	r3, [pc, #84]	@ (8001164 <MX_TIM2_Init+0x94>)
 8001110:	2200      	movs	r2, #0
 8001112:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001114:	4813      	ldr	r0, [pc, #76]	@ (8001164 <MX_TIM2_Init+0x94>)
 8001116:	f001 f8eb 	bl	80022f0 <HAL_TIM_Base_Init>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d001      	beq.n	8001124 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001120:	f000 f884 	bl	800122c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001124:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001128:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800112a:	f107 0308 	add.w	r3, r7, #8
 800112e:	4619      	mov	r1, r3
 8001130:	480c      	ldr	r0, [pc, #48]	@ (8001164 <MX_TIM2_Init+0x94>)
 8001132:	f001 fa69 	bl	8002608 <HAL_TIM_ConfigClockSource>
 8001136:	4603      	mov	r3, r0
 8001138:	2b00      	cmp	r3, #0
 800113a:	d001      	beq.n	8001140 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800113c:	f000 f876 	bl	800122c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001140:	2300      	movs	r3, #0
 8001142:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001144:	2300      	movs	r3, #0
 8001146:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001148:	463b      	mov	r3, r7
 800114a:	4619      	mov	r1, r3
 800114c:	4805      	ldr	r0, [pc, #20]	@ (8001164 <MX_TIM2_Init+0x94>)
 800114e:	f001 fc41 	bl	80029d4 <HAL_TIMEx_MasterConfigSynchronization>
 8001152:	4603      	mov	r3, r0
 8001154:	2b00      	cmp	r3, #0
 8001156:	d001      	beq.n	800115c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001158:	f000 f868 	bl	800122c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800115c:	bf00      	nop
 800115e:	3718      	adds	r7, #24
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}
 8001164:	2000006c 	.word	0x2000006c

08001168 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b086      	sub	sp, #24
 800116c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800116e:	f107 0308 	add.w	r3, r7, #8
 8001172:	2200      	movs	r2, #0
 8001174:	601a      	str	r2, [r3, #0]
 8001176:	605a      	str	r2, [r3, #4]
 8001178:	609a      	str	r2, [r3, #8]
 800117a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800117c:	4b28      	ldr	r3, [pc, #160]	@ (8001220 <MX_GPIO_Init+0xb8>)
 800117e:	699b      	ldr	r3, [r3, #24]
 8001180:	4a27      	ldr	r2, [pc, #156]	@ (8001220 <MX_GPIO_Init+0xb8>)
 8001182:	f043 0304 	orr.w	r3, r3, #4
 8001186:	6193      	str	r3, [r2, #24]
 8001188:	4b25      	ldr	r3, [pc, #148]	@ (8001220 <MX_GPIO_Init+0xb8>)
 800118a:	699b      	ldr	r3, [r3, #24]
 800118c:	f003 0304 	and.w	r3, r3, #4
 8001190:	607b      	str	r3, [r7, #4]
 8001192:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001194:	4b22      	ldr	r3, [pc, #136]	@ (8001220 <MX_GPIO_Init+0xb8>)
 8001196:	699b      	ldr	r3, [r3, #24]
 8001198:	4a21      	ldr	r2, [pc, #132]	@ (8001220 <MX_GPIO_Init+0xb8>)
 800119a:	f043 0308 	orr.w	r3, r3, #8
 800119e:	6193      	str	r3, [r2, #24]
 80011a0:	4b1f      	ldr	r3, [pc, #124]	@ (8001220 <MX_GPIO_Init+0xb8>)
 80011a2:	699b      	ldr	r3, [r3, #24]
 80011a4:	f003 0308 	and.w	r3, r3, #8
 80011a8:	603b      	str	r3, [r7, #0]
 80011aa:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_RED_1_Pin|LED_AMBER_1_Pin|LED_GREEN_1_Pin|LED_RED_2_Pin
 80011ac:	2200      	movs	r2, #0
 80011ae:	f24c 31f0 	movw	r1, #50160	@ 0xc3f0
 80011b2:	481c      	ldr	r0, [pc, #112]	@ (8001224 <MX_GPIO_Init+0xbc>)
 80011b4:	f000 fc83 	bl	8001abe <HAL_GPIO_WritePin>
                          |LED_AMBER_2_Pin|LED_GREEN_2_Pin|EN0_Pin|EN1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_7SEG1_1_Pin|LED_7SEG1_2_Pin|LED_7SEG2_3_Pin|LED_7SEG2_4_Pin
 80011b8:	2200      	movs	r2, #0
 80011ba:	f647 71fe 	movw	r1, #32766	@ 0x7ffe
 80011be:	481a      	ldr	r0, [pc, #104]	@ (8001228 <MX_GPIO_Init+0xc0>)
 80011c0:	f000 fc7d 	bl	8001abe <HAL_GPIO_WritePin>
                          |LED_7SEG2_5_Pin|LED_7SEG2_6_Pin|LED_7SEG2_7_Pin|LED_7SEG1_3_Pin
                          |LED_7SEG1_4_Pin|LED_7SEG1_5_Pin|LED_7SEG1_6_Pin|LED_7SEG1_7_Pin
                          |LED_7SEG2_1_Pin|LED_7SEG2_2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : BUTTON_MODE_Pin BUTTON_INCREASE_Pin BUTTON_SET_Pin */
  GPIO_InitStruct.Pin = BUTTON_MODE_Pin|BUTTON_INCREASE_Pin|BUTTON_SET_Pin;
 80011c4:	230e      	movs	r3, #14
 80011c6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011c8:	2300      	movs	r3, #0
 80011ca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011cc:	2301      	movs	r3, #1
 80011ce:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011d0:	f107 0308 	add.w	r3, r7, #8
 80011d4:	4619      	mov	r1, r3
 80011d6:	4813      	ldr	r0, [pc, #76]	@ (8001224 <MX_GPIO_Init+0xbc>)
 80011d8:	f000 fade 	bl	8001798 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_RED_1_Pin LED_AMBER_1_Pin LED_GREEN_1_Pin LED_RED_2_Pin
                           LED_AMBER_2_Pin LED_GREEN_2_Pin EN0_Pin EN1_Pin */
  GPIO_InitStruct.Pin = LED_RED_1_Pin|LED_AMBER_1_Pin|LED_GREEN_1_Pin|LED_RED_2_Pin
 80011dc:	f24c 33f0 	movw	r3, #50160	@ 0xc3f0
 80011e0:	60bb      	str	r3, [r7, #8]
                          |LED_AMBER_2_Pin|LED_GREEN_2_Pin|EN0_Pin|EN1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011e2:	2301      	movs	r3, #1
 80011e4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e6:	2300      	movs	r3, #0
 80011e8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ea:	2302      	movs	r3, #2
 80011ec:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ee:	f107 0308 	add.w	r3, r7, #8
 80011f2:	4619      	mov	r1, r3
 80011f4:	480b      	ldr	r0, [pc, #44]	@ (8001224 <MX_GPIO_Init+0xbc>)
 80011f6:	f000 facf 	bl	8001798 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_7SEG1_1_Pin LED_7SEG1_2_Pin LED_7SEG2_3_Pin LED_7SEG2_4_Pin
                           LED_7SEG2_5_Pin LED_7SEG2_6_Pin LED_7SEG2_7_Pin LED_7SEG1_3_Pin
                           LED_7SEG1_4_Pin LED_7SEG1_5_Pin LED_7SEG1_6_Pin LED_7SEG1_7_Pin
                           LED_7SEG2_1_Pin LED_7SEG2_2_Pin */
  GPIO_InitStruct.Pin = LED_7SEG1_1_Pin|LED_7SEG1_2_Pin|LED_7SEG2_3_Pin|LED_7SEG2_4_Pin
 80011fa:	f647 73fe 	movw	r3, #32766	@ 0x7ffe
 80011fe:	60bb      	str	r3, [r7, #8]
                          |LED_7SEG2_5_Pin|LED_7SEG2_6_Pin|LED_7SEG2_7_Pin|LED_7SEG1_3_Pin
                          |LED_7SEG1_4_Pin|LED_7SEG1_5_Pin|LED_7SEG1_6_Pin|LED_7SEG1_7_Pin
                          |LED_7SEG2_1_Pin|LED_7SEG2_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001200:	2301      	movs	r3, #1
 8001202:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001204:	2300      	movs	r3, #0
 8001206:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001208:	2302      	movs	r3, #2
 800120a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800120c:	f107 0308 	add.w	r3, r7, #8
 8001210:	4619      	mov	r1, r3
 8001212:	4805      	ldr	r0, [pc, #20]	@ (8001228 <MX_GPIO_Init+0xc0>)
 8001214:	f000 fac0 	bl	8001798 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001218:	bf00      	nop
 800121a:	3718      	adds	r7, #24
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}
 8001220:	40021000 	.word	0x40021000
 8001224:	40010800 	.word	0x40010800
 8001228:	40010c00 	.word	0x40010c00

0800122c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001230:	b672      	cpsid	i
}
 8001232:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001234:	bf00      	nop
 8001236:	e7fd      	b.n	8001234 <Error_Handler+0x8>

08001238 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001238:	b480      	push	{r7}
 800123a:	b085      	sub	sp, #20
 800123c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800123e:	4b15      	ldr	r3, [pc, #84]	@ (8001294 <HAL_MspInit+0x5c>)
 8001240:	699b      	ldr	r3, [r3, #24]
 8001242:	4a14      	ldr	r2, [pc, #80]	@ (8001294 <HAL_MspInit+0x5c>)
 8001244:	f043 0301 	orr.w	r3, r3, #1
 8001248:	6193      	str	r3, [r2, #24]
 800124a:	4b12      	ldr	r3, [pc, #72]	@ (8001294 <HAL_MspInit+0x5c>)
 800124c:	699b      	ldr	r3, [r3, #24]
 800124e:	f003 0301 	and.w	r3, r3, #1
 8001252:	60bb      	str	r3, [r7, #8]
 8001254:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001256:	4b0f      	ldr	r3, [pc, #60]	@ (8001294 <HAL_MspInit+0x5c>)
 8001258:	69db      	ldr	r3, [r3, #28]
 800125a:	4a0e      	ldr	r2, [pc, #56]	@ (8001294 <HAL_MspInit+0x5c>)
 800125c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001260:	61d3      	str	r3, [r2, #28]
 8001262:	4b0c      	ldr	r3, [pc, #48]	@ (8001294 <HAL_MspInit+0x5c>)
 8001264:	69db      	ldr	r3, [r3, #28]
 8001266:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800126a:	607b      	str	r3, [r7, #4]
 800126c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800126e:	4b0a      	ldr	r3, [pc, #40]	@ (8001298 <HAL_MspInit+0x60>)
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	60fb      	str	r3, [r7, #12]
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800127a:	60fb      	str	r3, [r7, #12]
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001282:	60fb      	str	r3, [r7, #12]
 8001284:	4a04      	ldr	r2, [pc, #16]	@ (8001298 <HAL_MspInit+0x60>)
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800128a:	bf00      	nop
 800128c:	3714      	adds	r7, #20
 800128e:	46bd      	mov	sp, r7
 8001290:	bc80      	pop	{r7}
 8001292:	4770      	bx	lr
 8001294:	40021000 	.word	0x40021000
 8001298:	40010000 	.word	0x40010000

0800129c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b084      	sub	sp, #16
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80012ac:	d113      	bne.n	80012d6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80012ae:	4b0c      	ldr	r3, [pc, #48]	@ (80012e0 <HAL_TIM_Base_MspInit+0x44>)
 80012b0:	69db      	ldr	r3, [r3, #28]
 80012b2:	4a0b      	ldr	r2, [pc, #44]	@ (80012e0 <HAL_TIM_Base_MspInit+0x44>)
 80012b4:	f043 0301 	orr.w	r3, r3, #1
 80012b8:	61d3      	str	r3, [r2, #28]
 80012ba:	4b09      	ldr	r3, [pc, #36]	@ (80012e0 <HAL_TIM_Base_MspInit+0x44>)
 80012bc:	69db      	ldr	r3, [r3, #28]
 80012be:	f003 0301 	and.w	r3, r3, #1
 80012c2:	60fb      	str	r3, [r7, #12]
 80012c4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80012c6:	2200      	movs	r2, #0
 80012c8:	2100      	movs	r1, #0
 80012ca:	201c      	movs	r0, #28
 80012cc:	f000 fa2d 	bl	800172a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80012d0:	201c      	movs	r0, #28
 80012d2:	f000 fa46 	bl	8001762 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 80012d6:	bf00      	nop
 80012d8:	3710      	adds	r7, #16
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	40021000 	.word	0x40021000

080012e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80012e8:	bf00      	nop
 80012ea:	e7fd      	b.n	80012e8 <NMI_Handler+0x4>

080012ec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012f0:	bf00      	nop
 80012f2:	e7fd      	b.n	80012f0 <HardFault_Handler+0x4>

080012f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012f8:	bf00      	nop
 80012fa:	e7fd      	b.n	80012f8 <MemManage_Handler+0x4>

080012fc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012fc:	b480      	push	{r7}
 80012fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001300:	bf00      	nop
 8001302:	e7fd      	b.n	8001300 <BusFault_Handler+0x4>

08001304 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001308:	bf00      	nop
 800130a:	e7fd      	b.n	8001308 <UsageFault_Handler+0x4>

0800130c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800130c:	b480      	push	{r7}
 800130e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001310:	bf00      	nop
 8001312:	46bd      	mov	sp, r7
 8001314:	bc80      	pop	{r7}
 8001316:	4770      	bx	lr

08001318 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800131c:	bf00      	nop
 800131e:	46bd      	mov	sp, r7
 8001320:	bc80      	pop	{r7}
 8001322:	4770      	bx	lr

08001324 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001328:	bf00      	nop
 800132a:	46bd      	mov	sp, r7
 800132c:	bc80      	pop	{r7}
 800132e:	4770      	bx	lr

08001330 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001334:	f000 f906 	bl	8001544 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001338:	bf00      	nop
 800133a:	bd80      	pop	{r7, pc}

0800133c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001340:	4802      	ldr	r0, [pc, #8]	@ (800134c <TIM2_IRQHandler+0x10>)
 8001342:	f001 f871 	bl	8002428 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001346:	bf00      	nop
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	2000006c 	.word	0x2000006c

08001350 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001350:	b480      	push	{r7}
 8001352:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001354:	bf00      	nop
 8001356:	46bd      	mov	sp, r7
 8001358:	bc80      	pop	{r7}
 800135a:	4770      	bx	lr

0800135c <init_SoftwareTimer>:
int TIMECYCLE 		= 0;
int counter_one_sec = 0;

//--- Functions Definition -----------------------

void init_SoftwareTimer(uint32_t HCLK, uint32_t Prescaler, uint32_t Period){
 800135c:	b480      	push	{r7}
 800135e:	b085      	sub	sp, #20
 8001360:	af00      	add	r7, sp, #0
 8001362:	60f8      	str	r0, [r7, #12]
 8001364:	60b9      	str	r1, [r7, #8]
 8001366:	607a      	str	r2, [r7, #4]
	TIMECYCLE = ((1000 * (Prescaler + 1) * (Period + 1)) / (HCLK));
 8001368:	68bb      	ldr	r3, [r7, #8]
 800136a:	3301      	adds	r3, #1
 800136c:	687a      	ldr	r2, [r7, #4]
 800136e:	3201      	adds	r2, #1
 8001370:	fb02 f303 	mul.w	r3, r2, r3
 8001374:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001378:	fb03 f202 	mul.w	r2, r3, r2
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001382:	461a      	mov	r2, r3
 8001384:	4b03      	ldr	r3, [pc, #12]	@ (8001394 <init_SoftwareTimer+0x38>)
 8001386:	601a      	str	r2, [r3, #0]
}
 8001388:	bf00      	nop
 800138a:	3714      	adds	r7, #20
 800138c:	46bd      	mov	sp, r7
 800138e:	bc80      	pop	{r7}
 8001390:	4770      	bx	lr
 8001392:	bf00      	nop
 8001394:	200000b4 	.word	0x200000b4

08001398 <set_one_sec_timer>:

void set_one_sec_timer(){
 8001398:	b480      	push	{r7}
 800139a:	af00      	add	r7, sp, #0
	counter_one_sec = 1000/TIMECYCLE;
 800139c:	4b07      	ldr	r3, [pc, #28]	@ (80013bc <set_one_sec_timer+0x24>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80013a4:	fb92 f3f3 	sdiv	r3, r2, r3
 80013a8:	4a05      	ldr	r2, [pc, #20]	@ (80013c0 <set_one_sec_timer+0x28>)
 80013aa:	6013      	str	r3, [r2, #0]
	flag_one_sec = 0;
 80013ac:	4b05      	ldr	r3, [pc, #20]	@ (80013c4 <set_one_sec_timer+0x2c>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	701a      	strb	r2, [r3, #0]
}
 80013b2:	bf00      	nop
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bc80      	pop	{r7}
 80013b8:	4770      	bx	lr
 80013ba:	bf00      	nop
 80013bc:	200000b4 	.word	0x200000b4
 80013c0:	200000b8 	.word	0x200000b8
 80013c4:	20000053 	.word	0x20000053

080013c8 <timer_Run>:

void timer_Run(){
 80013c8:	b480      	push	{r7}
 80013ca:	af00      	add	r7, sp, #0
	--counter_one_sec;
 80013cc:	4b22      	ldr	r3, [pc, #136]	@ (8001458 <timer_Run+0x90>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	3b01      	subs	r3, #1
 80013d2:	4a21      	ldr	r2, [pc, #132]	@ (8001458 <timer_Run+0x90>)
 80013d4:	6013      	str	r3, [r2, #0]
	if(counter_one_sec <= 0){
 80013d6:	4b20      	ldr	r3, [pc, #128]	@ (8001458 <timer_Run+0x90>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	dc02      	bgt.n	80013e4 <timer_Run+0x1c>
		flag_one_sec = 1;
 80013de:	4b1f      	ldr	r3, [pc, #124]	@ (800145c <timer_Run+0x94>)
 80013e0:	2201      	movs	r2, #1
 80013e2:	701a      	strb	r2, [r3, #0]
	}
	if(counter_one_sec == 750/TIMECYCLE || counter_one_sec == 500/TIMECYCLE ||
 80013e4:	4b1e      	ldr	r3, [pc, #120]	@ (8001460 <timer_Run+0x98>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f240 22ee 	movw	r2, #750	@ 0x2ee
 80013ec:	fb92 f2f3 	sdiv	r2, r2, r3
 80013f0:	4b19      	ldr	r3, [pc, #100]	@ (8001458 <timer_Run+0x90>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	429a      	cmp	r2, r3
 80013f6:	d016      	beq.n	8001426 <timer_Run+0x5e>
 80013f8:	4b19      	ldr	r3, [pc, #100]	@ (8001460 <timer_Run+0x98>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001400:	fb92 f2f3 	sdiv	r2, r2, r3
 8001404:	4b14      	ldr	r3, [pc, #80]	@ (8001458 <timer_Run+0x90>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	429a      	cmp	r2, r3
 800140a:	d00c      	beq.n	8001426 <timer_Run+0x5e>
	   counter_one_sec == 250/TIMECYCLE || counter_one_sec <= 0){
 800140c:	4b14      	ldr	r3, [pc, #80]	@ (8001460 <timer_Run+0x98>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	22fa      	movs	r2, #250	@ 0xfa
 8001412:	fb92 f2f3 	sdiv	r2, r2, r3
 8001416:	4b10      	ldr	r3, [pc, #64]	@ (8001458 <timer_Run+0x90>)
 8001418:	681b      	ldr	r3, [r3, #0]
	if(counter_one_sec == 750/TIMECYCLE || counter_one_sec == 500/TIMECYCLE ||
 800141a:	429a      	cmp	r2, r3
 800141c:	d003      	beq.n	8001426 <timer_Run+0x5e>
	   counter_one_sec == 250/TIMECYCLE || counter_one_sec <= 0){
 800141e:	4b0e      	ldr	r3, [pc, #56]	@ (8001458 <timer_Run+0x90>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	2b00      	cmp	r3, #0
 8001424:	dc02      	bgt.n	800142c <timer_Run+0x64>
		flag_blinky_led = 1;
 8001426:	4b0f      	ldr	r3, [pc, #60]	@ (8001464 <timer_Run+0x9c>)
 8001428:	2201      	movs	r2, #1
 800142a:	701a      	strb	r2, [r3, #0]
	}
	if(counter_one_sec == 500/TIMECYCLE || counter_one_sec <= 0){
 800142c:	4b0c      	ldr	r3, [pc, #48]	@ (8001460 <timer_Run+0x98>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001434:	fb92 f2f3 	sdiv	r2, r2, r3
 8001438:	4b07      	ldr	r3, [pc, #28]	@ (8001458 <timer_Run+0x90>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	429a      	cmp	r2, r3
 800143e:	d003      	beq.n	8001448 <timer_Run+0x80>
 8001440:	4b05      	ldr	r3, [pc, #20]	@ (8001458 <timer_Run+0x90>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	2b00      	cmp	r3, #0
 8001446:	dc02      	bgt.n	800144e <timer_Run+0x86>
		flag_seg = 1;
 8001448:	4b07      	ldr	r3, [pc, #28]	@ (8001468 <timer_Run+0xa0>)
 800144a:	2201      	movs	r2, #1
 800144c:	701a      	strb	r2, [r3, #0]
	}
}
 800144e:	bf00      	nop
 8001450:	46bd      	mov	sp, r7
 8001452:	bc80      	pop	{r7}
 8001454:	4770      	bx	lr
 8001456:	bf00      	nop
 8001458:	200000b8 	.word	0x200000b8
 800145c:	20000053 	.word	0x20000053
 8001460:	200000b4 	.word	0x200000b4
 8001464:	20000055 	.word	0x20000055
 8001468:	20000054 	.word	0x20000054

0800146c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800146c:	f7ff ff70 	bl	8001350 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001470:	480b      	ldr	r0, [pc, #44]	@ (80014a0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001472:	490c      	ldr	r1, [pc, #48]	@ (80014a4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001474:	4a0c      	ldr	r2, [pc, #48]	@ (80014a8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001476:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001478:	e002      	b.n	8001480 <LoopCopyDataInit>

0800147a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800147a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800147c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800147e:	3304      	adds	r3, #4

08001480 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001480:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001482:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001484:	d3f9      	bcc.n	800147a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001486:	4a09      	ldr	r2, [pc, #36]	@ (80014ac <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001488:	4c09      	ldr	r4, [pc, #36]	@ (80014b0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800148a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800148c:	e001      	b.n	8001492 <LoopFillZerobss>

0800148e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800148e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001490:	3204      	adds	r2, #4

08001492 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001492:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001494:	d3fb      	bcc.n	800148e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001496:	f001 fb0f 	bl	8002ab8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800149a:	f7ff fdc3 	bl	8001024 <main>
  bx lr
 800149e:	4770      	bx	lr
  ldr r0, =_sdata
 80014a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014a4:	20000028 	.word	0x20000028
  ldr r2, =_sidata
 80014a8:	08002b44 	.word	0x08002b44
  ldr r2, =_sbss
 80014ac:	20000028 	.word	0x20000028
  ldr r4, =_ebss
 80014b0:	200000c0 	.word	0x200000c0

080014b4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80014b4:	e7fe      	b.n	80014b4 <ADC1_2_IRQHandler>
	...

080014b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014bc:	4b08      	ldr	r3, [pc, #32]	@ (80014e0 <HAL_Init+0x28>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4a07      	ldr	r2, [pc, #28]	@ (80014e0 <HAL_Init+0x28>)
 80014c2:	f043 0310 	orr.w	r3, r3, #16
 80014c6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014c8:	2003      	movs	r0, #3
 80014ca:	f000 f923 	bl	8001714 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014ce:	200f      	movs	r0, #15
 80014d0:	f000 f808 	bl	80014e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014d4:	f7ff feb0 	bl	8001238 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014d8:	2300      	movs	r3, #0
}
 80014da:	4618      	mov	r0, r3
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	40022000 	.word	0x40022000

080014e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b082      	sub	sp, #8
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014ec:	4b12      	ldr	r3, [pc, #72]	@ (8001538 <HAL_InitTick+0x54>)
 80014ee:	681a      	ldr	r2, [r3, #0]
 80014f0:	4b12      	ldr	r3, [pc, #72]	@ (800153c <HAL_InitTick+0x58>)
 80014f2:	781b      	ldrb	r3, [r3, #0]
 80014f4:	4619      	mov	r1, r3
 80014f6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80014fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80014fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001502:	4618      	mov	r0, r3
 8001504:	f000 f93b 	bl	800177e <HAL_SYSTICK_Config>
 8001508:	4603      	mov	r3, r0
 800150a:	2b00      	cmp	r3, #0
 800150c:	d001      	beq.n	8001512 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800150e:	2301      	movs	r3, #1
 8001510:	e00e      	b.n	8001530 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	2b0f      	cmp	r3, #15
 8001516:	d80a      	bhi.n	800152e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001518:	2200      	movs	r2, #0
 800151a:	6879      	ldr	r1, [r7, #4]
 800151c:	f04f 30ff 	mov.w	r0, #4294967295
 8001520:	f000 f903 	bl	800172a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001524:	4a06      	ldr	r2, [pc, #24]	@ (8001540 <HAL_InitTick+0x5c>)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800152a:	2300      	movs	r3, #0
 800152c:	e000      	b.n	8001530 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800152e:	2301      	movs	r3, #1
}
 8001530:	4618      	mov	r0, r3
 8001532:	3708      	adds	r7, #8
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}
 8001538:	2000001c 	.word	0x2000001c
 800153c:	20000024 	.word	0x20000024
 8001540:	20000020 	.word	0x20000020

08001544 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001544:	b480      	push	{r7}
 8001546:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001548:	4b05      	ldr	r3, [pc, #20]	@ (8001560 <HAL_IncTick+0x1c>)
 800154a:	781b      	ldrb	r3, [r3, #0]
 800154c:	461a      	mov	r2, r3
 800154e:	4b05      	ldr	r3, [pc, #20]	@ (8001564 <HAL_IncTick+0x20>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4413      	add	r3, r2
 8001554:	4a03      	ldr	r2, [pc, #12]	@ (8001564 <HAL_IncTick+0x20>)
 8001556:	6013      	str	r3, [r2, #0]
}
 8001558:	bf00      	nop
 800155a:	46bd      	mov	sp, r7
 800155c:	bc80      	pop	{r7}
 800155e:	4770      	bx	lr
 8001560:	20000024 	.word	0x20000024
 8001564:	200000bc 	.word	0x200000bc

08001568 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001568:	b480      	push	{r7}
 800156a:	af00      	add	r7, sp, #0
  return uwTick;
 800156c:	4b02      	ldr	r3, [pc, #8]	@ (8001578 <HAL_GetTick+0x10>)
 800156e:	681b      	ldr	r3, [r3, #0]
}
 8001570:	4618      	mov	r0, r3
 8001572:	46bd      	mov	sp, r7
 8001574:	bc80      	pop	{r7}
 8001576:	4770      	bx	lr
 8001578:	200000bc 	.word	0x200000bc

0800157c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800157c:	b480      	push	{r7}
 800157e:	b085      	sub	sp, #20
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	f003 0307 	and.w	r3, r3, #7
 800158a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800158c:	4b0c      	ldr	r3, [pc, #48]	@ (80015c0 <__NVIC_SetPriorityGrouping+0x44>)
 800158e:	68db      	ldr	r3, [r3, #12]
 8001590:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001592:	68ba      	ldr	r2, [r7, #8]
 8001594:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001598:	4013      	ands	r3, r2
 800159a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015a0:	68bb      	ldr	r3, [r7, #8]
 80015a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015a4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80015a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80015ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015ae:	4a04      	ldr	r2, [pc, #16]	@ (80015c0 <__NVIC_SetPriorityGrouping+0x44>)
 80015b0:	68bb      	ldr	r3, [r7, #8]
 80015b2:	60d3      	str	r3, [r2, #12]
}
 80015b4:	bf00      	nop
 80015b6:	3714      	adds	r7, #20
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bc80      	pop	{r7}
 80015bc:	4770      	bx	lr
 80015be:	bf00      	nop
 80015c0:	e000ed00 	.word	0xe000ed00

080015c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015c4:	b480      	push	{r7}
 80015c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015c8:	4b04      	ldr	r3, [pc, #16]	@ (80015dc <__NVIC_GetPriorityGrouping+0x18>)
 80015ca:	68db      	ldr	r3, [r3, #12]
 80015cc:	0a1b      	lsrs	r3, r3, #8
 80015ce:	f003 0307 	and.w	r3, r3, #7
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bc80      	pop	{r7}
 80015d8:	4770      	bx	lr
 80015da:	bf00      	nop
 80015dc:	e000ed00 	.word	0xe000ed00

080015e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015e0:	b480      	push	{r7}
 80015e2:	b083      	sub	sp, #12
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	4603      	mov	r3, r0
 80015e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	db0b      	blt.n	800160a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015f2:	79fb      	ldrb	r3, [r7, #7]
 80015f4:	f003 021f 	and.w	r2, r3, #31
 80015f8:	4906      	ldr	r1, [pc, #24]	@ (8001614 <__NVIC_EnableIRQ+0x34>)
 80015fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015fe:	095b      	lsrs	r3, r3, #5
 8001600:	2001      	movs	r0, #1
 8001602:	fa00 f202 	lsl.w	r2, r0, r2
 8001606:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800160a:	bf00      	nop
 800160c:	370c      	adds	r7, #12
 800160e:	46bd      	mov	sp, r7
 8001610:	bc80      	pop	{r7}
 8001612:	4770      	bx	lr
 8001614:	e000e100 	.word	0xe000e100

08001618 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001618:	b480      	push	{r7}
 800161a:	b083      	sub	sp, #12
 800161c:	af00      	add	r7, sp, #0
 800161e:	4603      	mov	r3, r0
 8001620:	6039      	str	r1, [r7, #0]
 8001622:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001624:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001628:	2b00      	cmp	r3, #0
 800162a:	db0a      	blt.n	8001642 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	b2da      	uxtb	r2, r3
 8001630:	490c      	ldr	r1, [pc, #48]	@ (8001664 <__NVIC_SetPriority+0x4c>)
 8001632:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001636:	0112      	lsls	r2, r2, #4
 8001638:	b2d2      	uxtb	r2, r2
 800163a:	440b      	add	r3, r1
 800163c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001640:	e00a      	b.n	8001658 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	b2da      	uxtb	r2, r3
 8001646:	4908      	ldr	r1, [pc, #32]	@ (8001668 <__NVIC_SetPriority+0x50>)
 8001648:	79fb      	ldrb	r3, [r7, #7]
 800164a:	f003 030f 	and.w	r3, r3, #15
 800164e:	3b04      	subs	r3, #4
 8001650:	0112      	lsls	r2, r2, #4
 8001652:	b2d2      	uxtb	r2, r2
 8001654:	440b      	add	r3, r1
 8001656:	761a      	strb	r2, [r3, #24]
}
 8001658:	bf00      	nop
 800165a:	370c      	adds	r7, #12
 800165c:	46bd      	mov	sp, r7
 800165e:	bc80      	pop	{r7}
 8001660:	4770      	bx	lr
 8001662:	bf00      	nop
 8001664:	e000e100 	.word	0xe000e100
 8001668:	e000ed00 	.word	0xe000ed00

0800166c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800166c:	b480      	push	{r7}
 800166e:	b089      	sub	sp, #36	@ 0x24
 8001670:	af00      	add	r7, sp, #0
 8001672:	60f8      	str	r0, [r7, #12]
 8001674:	60b9      	str	r1, [r7, #8]
 8001676:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	f003 0307 	and.w	r3, r3, #7
 800167e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001680:	69fb      	ldr	r3, [r7, #28]
 8001682:	f1c3 0307 	rsb	r3, r3, #7
 8001686:	2b04      	cmp	r3, #4
 8001688:	bf28      	it	cs
 800168a:	2304      	movcs	r3, #4
 800168c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800168e:	69fb      	ldr	r3, [r7, #28]
 8001690:	3304      	adds	r3, #4
 8001692:	2b06      	cmp	r3, #6
 8001694:	d902      	bls.n	800169c <NVIC_EncodePriority+0x30>
 8001696:	69fb      	ldr	r3, [r7, #28]
 8001698:	3b03      	subs	r3, #3
 800169a:	e000      	b.n	800169e <NVIC_EncodePriority+0x32>
 800169c:	2300      	movs	r3, #0
 800169e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016a0:	f04f 32ff 	mov.w	r2, #4294967295
 80016a4:	69bb      	ldr	r3, [r7, #24]
 80016a6:	fa02 f303 	lsl.w	r3, r2, r3
 80016aa:	43da      	mvns	r2, r3
 80016ac:	68bb      	ldr	r3, [r7, #8]
 80016ae:	401a      	ands	r2, r3
 80016b0:	697b      	ldr	r3, [r7, #20]
 80016b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016b4:	f04f 31ff 	mov.w	r1, #4294967295
 80016b8:	697b      	ldr	r3, [r7, #20]
 80016ba:	fa01 f303 	lsl.w	r3, r1, r3
 80016be:	43d9      	mvns	r1, r3
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016c4:	4313      	orrs	r3, r2
         );
}
 80016c6:	4618      	mov	r0, r3
 80016c8:	3724      	adds	r7, #36	@ 0x24
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bc80      	pop	{r7}
 80016ce:	4770      	bx	lr

080016d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b082      	sub	sp, #8
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	3b01      	subs	r3, #1
 80016dc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80016e0:	d301      	bcc.n	80016e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016e2:	2301      	movs	r3, #1
 80016e4:	e00f      	b.n	8001706 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016e6:	4a0a      	ldr	r2, [pc, #40]	@ (8001710 <SysTick_Config+0x40>)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	3b01      	subs	r3, #1
 80016ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016ee:	210f      	movs	r1, #15
 80016f0:	f04f 30ff 	mov.w	r0, #4294967295
 80016f4:	f7ff ff90 	bl	8001618 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016f8:	4b05      	ldr	r3, [pc, #20]	@ (8001710 <SysTick_Config+0x40>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016fe:	4b04      	ldr	r3, [pc, #16]	@ (8001710 <SysTick_Config+0x40>)
 8001700:	2207      	movs	r2, #7
 8001702:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001704:	2300      	movs	r3, #0
}
 8001706:	4618      	mov	r0, r3
 8001708:	3708      	adds	r7, #8
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	e000e010 	.word	0xe000e010

08001714 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b082      	sub	sp, #8
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800171c:	6878      	ldr	r0, [r7, #4]
 800171e:	f7ff ff2d 	bl	800157c <__NVIC_SetPriorityGrouping>
}
 8001722:	bf00      	nop
 8001724:	3708      	adds	r7, #8
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}

0800172a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800172a:	b580      	push	{r7, lr}
 800172c:	b086      	sub	sp, #24
 800172e:	af00      	add	r7, sp, #0
 8001730:	4603      	mov	r3, r0
 8001732:	60b9      	str	r1, [r7, #8]
 8001734:	607a      	str	r2, [r7, #4]
 8001736:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001738:	2300      	movs	r3, #0
 800173a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800173c:	f7ff ff42 	bl	80015c4 <__NVIC_GetPriorityGrouping>
 8001740:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001742:	687a      	ldr	r2, [r7, #4]
 8001744:	68b9      	ldr	r1, [r7, #8]
 8001746:	6978      	ldr	r0, [r7, #20]
 8001748:	f7ff ff90 	bl	800166c <NVIC_EncodePriority>
 800174c:	4602      	mov	r2, r0
 800174e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001752:	4611      	mov	r1, r2
 8001754:	4618      	mov	r0, r3
 8001756:	f7ff ff5f 	bl	8001618 <__NVIC_SetPriority>
}
 800175a:	bf00      	nop
 800175c:	3718      	adds	r7, #24
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}

08001762 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001762:	b580      	push	{r7, lr}
 8001764:	b082      	sub	sp, #8
 8001766:	af00      	add	r7, sp, #0
 8001768:	4603      	mov	r3, r0
 800176a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800176c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001770:	4618      	mov	r0, r3
 8001772:	f7ff ff35 	bl	80015e0 <__NVIC_EnableIRQ>
}
 8001776:	bf00      	nop
 8001778:	3708      	adds	r7, #8
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}

0800177e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800177e:	b580      	push	{r7, lr}
 8001780:	b082      	sub	sp, #8
 8001782:	af00      	add	r7, sp, #0
 8001784:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001786:	6878      	ldr	r0, [r7, #4]
 8001788:	f7ff ffa2 	bl	80016d0 <SysTick_Config>
 800178c:	4603      	mov	r3, r0
}
 800178e:	4618      	mov	r0, r3
 8001790:	3708      	adds	r7, #8
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
	...

08001798 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001798:	b480      	push	{r7}
 800179a:	b08b      	sub	sp, #44	@ 0x2c
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
 80017a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80017a2:	2300      	movs	r3, #0
 80017a4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80017a6:	2300      	movs	r3, #0
 80017a8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017aa:	e161      	b.n	8001a70 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80017ac:	2201      	movs	r2, #1
 80017ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017b0:	fa02 f303 	lsl.w	r3, r2, r3
 80017b4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	69fa      	ldr	r2, [r7, #28]
 80017bc:	4013      	ands	r3, r2
 80017be:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80017c0:	69ba      	ldr	r2, [r7, #24]
 80017c2:	69fb      	ldr	r3, [r7, #28]
 80017c4:	429a      	cmp	r2, r3
 80017c6:	f040 8150 	bne.w	8001a6a <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	4a97      	ldr	r2, [pc, #604]	@ (8001a2c <HAL_GPIO_Init+0x294>)
 80017d0:	4293      	cmp	r3, r2
 80017d2:	d05e      	beq.n	8001892 <HAL_GPIO_Init+0xfa>
 80017d4:	4a95      	ldr	r2, [pc, #596]	@ (8001a2c <HAL_GPIO_Init+0x294>)
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d875      	bhi.n	80018c6 <HAL_GPIO_Init+0x12e>
 80017da:	4a95      	ldr	r2, [pc, #596]	@ (8001a30 <HAL_GPIO_Init+0x298>)
 80017dc:	4293      	cmp	r3, r2
 80017de:	d058      	beq.n	8001892 <HAL_GPIO_Init+0xfa>
 80017e0:	4a93      	ldr	r2, [pc, #588]	@ (8001a30 <HAL_GPIO_Init+0x298>)
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d86f      	bhi.n	80018c6 <HAL_GPIO_Init+0x12e>
 80017e6:	4a93      	ldr	r2, [pc, #588]	@ (8001a34 <HAL_GPIO_Init+0x29c>)
 80017e8:	4293      	cmp	r3, r2
 80017ea:	d052      	beq.n	8001892 <HAL_GPIO_Init+0xfa>
 80017ec:	4a91      	ldr	r2, [pc, #580]	@ (8001a34 <HAL_GPIO_Init+0x29c>)
 80017ee:	4293      	cmp	r3, r2
 80017f0:	d869      	bhi.n	80018c6 <HAL_GPIO_Init+0x12e>
 80017f2:	4a91      	ldr	r2, [pc, #580]	@ (8001a38 <HAL_GPIO_Init+0x2a0>)
 80017f4:	4293      	cmp	r3, r2
 80017f6:	d04c      	beq.n	8001892 <HAL_GPIO_Init+0xfa>
 80017f8:	4a8f      	ldr	r2, [pc, #572]	@ (8001a38 <HAL_GPIO_Init+0x2a0>)
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d863      	bhi.n	80018c6 <HAL_GPIO_Init+0x12e>
 80017fe:	4a8f      	ldr	r2, [pc, #572]	@ (8001a3c <HAL_GPIO_Init+0x2a4>)
 8001800:	4293      	cmp	r3, r2
 8001802:	d046      	beq.n	8001892 <HAL_GPIO_Init+0xfa>
 8001804:	4a8d      	ldr	r2, [pc, #564]	@ (8001a3c <HAL_GPIO_Init+0x2a4>)
 8001806:	4293      	cmp	r3, r2
 8001808:	d85d      	bhi.n	80018c6 <HAL_GPIO_Init+0x12e>
 800180a:	2b12      	cmp	r3, #18
 800180c:	d82a      	bhi.n	8001864 <HAL_GPIO_Init+0xcc>
 800180e:	2b12      	cmp	r3, #18
 8001810:	d859      	bhi.n	80018c6 <HAL_GPIO_Init+0x12e>
 8001812:	a201      	add	r2, pc, #4	@ (adr r2, 8001818 <HAL_GPIO_Init+0x80>)
 8001814:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001818:	08001893 	.word	0x08001893
 800181c:	0800186d 	.word	0x0800186d
 8001820:	0800187f 	.word	0x0800187f
 8001824:	080018c1 	.word	0x080018c1
 8001828:	080018c7 	.word	0x080018c7
 800182c:	080018c7 	.word	0x080018c7
 8001830:	080018c7 	.word	0x080018c7
 8001834:	080018c7 	.word	0x080018c7
 8001838:	080018c7 	.word	0x080018c7
 800183c:	080018c7 	.word	0x080018c7
 8001840:	080018c7 	.word	0x080018c7
 8001844:	080018c7 	.word	0x080018c7
 8001848:	080018c7 	.word	0x080018c7
 800184c:	080018c7 	.word	0x080018c7
 8001850:	080018c7 	.word	0x080018c7
 8001854:	080018c7 	.word	0x080018c7
 8001858:	080018c7 	.word	0x080018c7
 800185c:	08001875 	.word	0x08001875
 8001860:	08001889 	.word	0x08001889
 8001864:	4a76      	ldr	r2, [pc, #472]	@ (8001a40 <HAL_GPIO_Init+0x2a8>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d013      	beq.n	8001892 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800186a:	e02c      	b.n	80018c6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	68db      	ldr	r3, [r3, #12]
 8001870:	623b      	str	r3, [r7, #32]
          break;
 8001872:	e029      	b.n	80018c8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	68db      	ldr	r3, [r3, #12]
 8001878:	3304      	adds	r3, #4
 800187a:	623b      	str	r3, [r7, #32]
          break;
 800187c:	e024      	b.n	80018c8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	68db      	ldr	r3, [r3, #12]
 8001882:	3308      	adds	r3, #8
 8001884:	623b      	str	r3, [r7, #32]
          break;
 8001886:	e01f      	b.n	80018c8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	68db      	ldr	r3, [r3, #12]
 800188c:	330c      	adds	r3, #12
 800188e:	623b      	str	r3, [r7, #32]
          break;
 8001890:	e01a      	b.n	80018c8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	689b      	ldr	r3, [r3, #8]
 8001896:	2b00      	cmp	r3, #0
 8001898:	d102      	bne.n	80018a0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800189a:	2304      	movs	r3, #4
 800189c:	623b      	str	r3, [r7, #32]
          break;
 800189e:	e013      	b.n	80018c8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	689b      	ldr	r3, [r3, #8]
 80018a4:	2b01      	cmp	r3, #1
 80018a6:	d105      	bne.n	80018b4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80018a8:	2308      	movs	r3, #8
 80018aa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	69fa      	ldr	r2, [r7, #28]
 80018b0:	611a      	str	r2, [r3, #16]
          break;
 80018b2:	e009      	b.n	80018c8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80018b4:	2308      	movs	r3, #8
 80018b6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	69fa      	ldr	r2, [r7, #28]
 80018bc:	615a      	str	r2, [r3, #20]
          break;
 80018be:	e003      	b.n	80018c8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80018c0:	2300      	movs	r3, #0
 80018c2:	623b      	str	r3, [r7, #32]
          break;
 80018c4:	e000      	b.n	80018c8 <HAL_GPIO_Init+0x130>
          break;
 80018c6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80018c8:	69bb      	ldr	r3, [r7, #24]
 80018ca:	2bff      	cmp	r3, #255	@ 0xff
 80018cc:	d801      	bhi.n	80018d2 <HAL_GPIO_Init+0x13a>
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	e001      	b.n	80018d6 <HAL_GPIO_Init+0x13e>
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	3304      	adds	r3, #4
 80018d6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80018d8:	69bb      	ldr	r3, [r7, #24]
 80018da:	2bff      	cmp	r3, #255	@ 0xff
 80018dc:	d802      	bhi.n	80018e4 <HAL_GPIO_Init+0x14c>
 80018de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018e0:	009b      	lsls	r3, r3, #2
 80018e2:	e002      	b.n	80018ea <HAL_GPIO_Init+0x152>
 80018e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018e6:	3b08      	subs	r3, #8
 80018e8:	009b      	lsls	r3, r3, #2
 80018ea:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80018ec:	697b      	ldr	r3, [r7, #20]
 80018ee:	681a      	ldr	r2, [r3, #0]
 80018f0:	210f      	movs	r1, #15
 80018f2:	693b      	ldr	r3, [r7, #16]
 80018f4:	fa01 f303 	lsl.w	r3, r1, r3
 80018f8:	43db      	mvns	r3, r3
 80018fa:	401a      	ands	r2, r3
 80018fc:	6a39      	ldr	r1, [r7, #32]
 80018fe:	693b      	ldr	r3, [r7, #16]
 8001900:	fa01 f303 	lsl.w	r3, r1, r3
 8001904:	431a      	orrs	r2, r3
 8001906:	697b      	ldr	r3, [r7, #20]
 8001908:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001912:	2b00      	cmp	r3, #0
 8001914:	f000 80a9 	beq.w	8001a6a <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001918:	4b4a      	ldr	r3, [pc, #296]	@ (8001a44 <HAL_GPIO_Init+0x2ac>)
 800191a:	699b      	ldr	r3, [r3, #24]
 800191c:	4a49      	ldr	r2, [pc, #292]	@ (8001a44 <HAL_GPIO_Init+0x2ac>)
 800191e:	f043 0301 	orr.w	r3, r3, #1
 8001922:	6193      	str	r3, [r2, #24]
 8001924:	4b47      	ldr	r3, [pc, #284]	@ (8001a44 <HAL_GPIO_Init+0x2ac>)
 8001926:	699b      	ldr	r3, [r3, #24]
 8001928:	f003 0301 	and.w	r3, r3, #1
 800192c:	60bb      	str	r3, [r7, #8]
 800192e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001930:	4a45      	ldr	r2, [pc, #276]	@ (8001a48 <HAL_GPIO_Init+0x2b0>)
 8001932:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001934:	089b      	lsrs	r3, r3, #2
 8001936:	3302      	adds	r3, #2
 8001938:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800193c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800193e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001940:	f003 0303 	and.w	r3, r3, #3
 8001944:	009b      	lsls	r3, r3, #2
 8001946:	220f      	movs	r2, #15
 8001948:	fa02 f303 	lsl.w	r3, r2, r3
 800194c:	43db      	mvns	r3, r3
 800194e:	68fa      	ldr	r2, [r7, #12]
 8001950:	4013      	ands	r3, r2
 8001952:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	4a3d      	ldr	r2, [pc, #244]	@ (8001a4c <HAL_GPIO_Init+0x2b4>)
 8001958:	4293      	cmp	r3, r2
 800195a:	d00d      	beq.n	8001978 <HAL_GPIO_Init+0x1e0>
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	4a3c      	ldr	r2, [pc, #240]	@ (8001a50 <HAL_GPIO_Init+0x2b8>)
 8001960:	4293      	cmp	r3, r2
 8001962:	d007      	beq.n	8001974 <HAL_GPIO_Init+0x1dc>
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	4a3b      	ldr	r2, [pc, #236]	@ (8001a54 <HAL_GPIO_Init+0x2bc>)
 8001968:	4293      	cmp	r3, r2
 800196a:	d101      	bne.n	8001970 <HAL_GPIO_Init+0x1d8>
 800196c:	2302      	movs	r3, #2
 800196e:	e004      	b.n	800197a <HAL_GPIO_Init+0x1e2>
 8001970:	2303      	movs	r3, #3
 8001972:	e002      	b.n	800197a <HAL_GPIO_Init+0x1e2>
 8001974:	2301      	movs	r3, #1
 8001976:	e000      	b.n	800197a <HAL_GPIO_Init+0x1e2>
 8001978:	2300      	movs	r3, #0
 800197a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800197c:	f002 0203 	and.w	r2, r2, #3
 8001980:	0092      	lsls	r2, r2, #2
 8001982:	4093      	lsls	r3, r2
 8001984:	68fa      	ldr	r2, [r7, #12]
 8001986:	4313      	orrs	r3, r2
 8001988:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800198a:	492f      	ldr	r1, [pc, #188]	@ (8001a48 <HAL_GPIO_Init+0x2b0>)
 800198c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800198e:	089b      	lsrs	r3, r3, #2
 8001990:	3302      	adds	r3, #2
 8001992:	68fa      	ldr	r2, [r7, #12]
 8001994:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d006      	beq.n	80019b2 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80019a4:	4b2c      	ldr	r3, [pc, #176]	@ (8001a58 <HAL_GPIO_Init+0x2c0>)
 80019a6:	689a      	ldr	r2, [r3, #8]
 80019a8:	492b      	ldr	r1, [pc, #172]	@ (8001a58 <HAL_GPIO_Init+0x2c0>)
 80019aa:	69bb      	ldr	r3, [r7, #24]
 80019ac:	4313      	orrs	r3, r2
 80019ae:	608b      	str	r3, [r1, #8]
 80019b0:	e006      	b.n	80019c0 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80019b2:	4b29      	ldr	r3, [pc, #164]	@ (8001a58 <HAL_GPIO_Init+0x2c0>)
 80019b4:	689a      	ldr	r2, [r3, #8]
 80019b6:	69bb      	ldr	r3, [r7, #24]
 80019b8:	43db      	mvns	r3, r3
 80019ba:	4927      	ldr	r1, [pc, #156]	@ (8001a58 <HAL_GPIO_Init+0x2c0>)
 80019bc:	4013      	ands	r3, r2
 80019be:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d006      	beq.n	80019da <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80019cc:	4b22      	ldr	r3, [pc, #136]	@ (8001a58 <HAL_GPIO_Init+0x2c0>)
 80019ce:	68da      	ldr	r2, [r3, #12]
 80019d0:	4921      	ldr	r1, [pc, #132]	@ (8001a58 <HAL_GPIO_Init+0x2c0>)
 80019d2:	69bb      	ldr	r3, [r7, #24]
 80019d4:	4313      	orrs	r3, r2
 80019d6:	60cb      	str	r3, [r1, #12]
 80019d8:	e006      	b.n	80019e8 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80019da:	4b1f      	ldr	r3, [pc, #124]	@ (8001a58 <HAL_GPIO_Init+0x2c0>)
 80019dc:	68da      	ldr	r2, [r3, #12]
 80019de:	69bb      	ldr	r3, [r7, #24]
 80019e0:	43db      	mvns	r3, r3
 80019e2:	491d      	ldr	r1, [pc, #116]	@ (8001a58 <HAL_GPIO_Init+0x2c0>)
 80019e4:	4013      	ands	r3, r2
 80019e6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d006      	beq.n	8001a02 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80019f4:	4b18      	ldr	r3, [pc, #96]	@ (8001a58 <HAL_GPIO_Init+0x2c0>)
 80019f6:	685a      	ldr	r2, [r3, #4]
 80019f8:	4917      	ldr	r1, [pc, #92]	@ (8001a58 <HAL_GPIO_Init+0x2c0>)
 80019fa:	69bb      	ldr	r3, [r7, #24]
 80019fc:	4313      	orrs	r3, r2
 80019fe:	604b      	str	r3, [r1, #4]
 8001a00:	e006      	b.n	8001a10 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001a02:	4b15      	ldr	r3, [pc, #84]	@ (8001a58 <HAL_GPIO_Init+0x2c0>)
 8001a04:	685a      	ldr	r2, [r3, #4]
 8001a06:	69bb      	ldr	r3, [r7, #24]
 8001a08:	43db      	mvns	r3, r3
 8001a0a:	4913      	ldr	r1, [pc, #76]	@ (8001a58 <HAL_GPIO_Init+0x2c0>)
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d01f      	beq.n	8001a5c <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001a1c:	4b0e      	ldr	r3, [pc, #56]	@ (8001a58 <HAL_GPIO_Init+0x2c0>)
 8001a1e:	681a      	ldr	r2, [r3, #0]
 8001a20:	490d      	ldr	r1, [pc, #52]	@ (8001a58 <HAL_GPIO_Init+0x2c0>)
 8001a22:	69bb      	ldr	r3, [r7, #24]
 8001a24:	4313      	orrs	r3, r2
 8001a26:	600b      	str	r3, [r1, #0]
 8001a28:	e01f      	b.n	8001a6a <HAL_GPIO_Init+0x2d2>
 8001a2a:	bf00      	nop
 8001a2c:	10320000 	.word	0x10320000
 8001a30:	10310000 	.word	0x10310000
 8001a34:	10220000 	.word	0x10220000
 8001a38:	10210000 	.word	0x10210000
 8001a3c:	10120000 	.word	0x10120000
 8001a40:	10110000 	.word	0x10110000
 8001a44:	40021000 	.word	0x40021000
 8001a48:	40010000 	.word	0x40010000
 8001a4c:	40010800 	.word	0x40010800
 8001a50:	40010c00 	.word	0x40010c00
 8001a54:	40011000 	.word	0x40011000
 8001a58:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001a5c:	4b0b      	ldr	r3, [pc, #44]	@ (8001a8c <HAL_GPIO_Init+0x2f4>)
 8001a5e:	681a      	ldr	r2, [r3, #0]
 8001a60:	69bb      	ldr	r3, [r7, #24]
 8001a62:	43db      	mvns	r3, r3
 8001a64:	4909      	ldr	r1, [pc, #36]	@ (8001a8c <HAL_GPIO_Init+0x2f4>)
 8001a66:	4013      	ands	r3, r2
 8001a68:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001a6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a6c:	3301      	adds	r3, #1
 8001a6e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	681a      	ldr	r2, [r3, #0]
 8001a74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a76:	fa22 f303 	lsr.w	r3, r2, r3
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	f47f ae96 	bne.w	80017ac <HAL_GPIO_Init+0x14>
  }
}
 8001a80:	bf00      	nop
 8001a82:	bf00      	nop
 8001a84:	372c      	adds	r7, #44	@ 0x2c
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bc80      	pop	{r7}
 8001a8a:	4770      	bx	lr
 8001a8c:	40010400 	.word	0x40010400

08001a90 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b085      	sub	sp, #20
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
 8001a98:	460b      	mov	r3, r1
 8001a9a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	689a      	ldr	r2, [r3, #8]
 8001aa0:	887b      	ldrh	r3, [r7, #2]
 8001aa2:	4013      	ands	r3, r2
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d002      	beq.n	8001aae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	73fb      	strb	r3, [r7, #15]
 8001aac:	e001      	b.n	8001ab2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001ab2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	3714      	adds	r7, #20
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bc80      	pop	{r7}
 8001abc:	4770      	bx	lr

08001abe <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001abe:	b480      	push	{r7}
 8001ac0:	b083      	sub	sp, #12
 8001ac2:	af00      	add	r7, sp, #0
 8001ac4:	6078      	str	r0, [r7, #4]
 8001ac6:	460b      	mov	r3, r1
 8001ac8:	807b      	strh	r3, [r7, #2]
 8001aca:	4613      	mov	r3, r2
 8001acc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001ace:	787b      	ldrb	r3, [r7, #1]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d003      	beq.n	8001adc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ad4:	887a      	ldrh	r2, [r7, #2]
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001ada:	e003      	b.n	8001ae4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001adc:	887b      	ldrh	r3, [r7, #2]
 8001ade:	041a      	lsls	r2, r3, #16
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	611a      	str	r2, [r3, #16]
}
 8001ae4:	bf00      	nop
 8001ae6:	370c      	adds	r7, #12
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bc80      	pop	{r7}
 8001aec:	4770      	bx	lr

08001aee <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001aee:	b480      	push	{r7}
 8001af0:	b085      	sub	sp, #20
 8001af2:	af00      	add	r7, sp, #0
 8001af4:	6078      	str	r0, [r7, #4]
 8001af6:	460b      	mov	r3, r1
 8001af8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	68db      	ldr	r3, [r3, #12]
 8001afe:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001b00:	887a      	ldrh	r2, [r7, #2]
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	4013      	ands	r3, r2
 8001b06:	041a      	lsls	r2, r3, #16
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	43d9      	mvns	r1, r3
 8001b0c:	887b      	ldrh	r3, [r7, #2]
 8001b0e:	400b      	ands	r3, r1
 8001b10:	431a      	orrs	r2, r3
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	611a      	str	r2, [r3, #16]
}
 8001b16:	bf00      	nop
 8001b18:	3714      	adds	r7, #20
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bc80      	pop	{r7}
 8001b1e:	4770      	bx	lr

08001b20 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b086      	sub	sp, #24
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d101      	bne.n	8001b32 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	e272      	b.n	8002018 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f003 0301 	and.w	r3, r3, #1
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	f000 8087 	beq.w	8001c4e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b40:	4b92      	ldr	r3, [pc, #584]	@ (8001d8c <HAL_RCC_OscConfig+0x26c>)
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	f003 030c 	and.w	r3, r3, #12
 8001b48:	2b04      	cmp	r3, #4
 8001b4a:	d00c      	beq.n	8001b66 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001b4c:	4b8f      	ldr	r3, [pc, #572]	@ (8001d8c <HAL_RCC_OscConfig+0x26c>)
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	f003 030c 	and.w	r3, r3, #12
 8001b54:	2b08      	cmp	r3, #8
 8001b56:	d112      	bne.n	8001b7e <HAL_RCC_OscConfig+0x5e>
 8001b58:	4b8c      	ldr	r3, [pc, #560]	@ (8001d8c <HAL_RCC_OscConfig+0x26c>)
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b60:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001b64:	d10b      	bne.n	8001b7e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b66:	4b89      	ldr	r3, [pc, #548]	@ (8001d8c <HAL_RCC_OscConfig+0x26c>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d06c      	beq.n	8001c4c <HAL_RCC_OscConfig+0x12c>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d168      	bne.n	8001c4c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	e24c      	b.n	8002018 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001b86:	d106      	bne.n	8001b96 <HAL_RCC_OscConfig+0x76>
 8001b88:	4b80      	ldr	r3, [pc, #512]	@ (8001d8c <HAL_RCC_OscConfig+0x26c>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a7f      	ldr	r2, [pc, #508]	@ (8001d8c <HAL_RCC_OscConfig+0x26c>)
 8001b8e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b92:	6013      	str	r3, [r2, #0]
 8001b94:	e02e      	b.n	8001bf4 <HAL_RCC_OscConfig+0xd4>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d10c      	bne.n	8001bb8 <HAL_RCC_OscConfig+0x98>
 8001b9e:	4b7b      	ldr	r3, [pc, #492]	@ (8001d8c <HAL_RCC_OscConfig+0x26c>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4a7a      	ldr	r2, [pc, #488]	@ (8001d8c <HAL_RCC_OscConfig+0x26c>)
 8001ba4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001ba8:	6013      	str	r3, [r2, #0]
 8001baa:	4b78      	ldr	r3, [pc, #480]	@ (8001d8c <HAL_RCC_OscConfig+0x26c>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4a77      	ldr	r2, [pc, #476]	@ (8001d8c <HAL_RCC_OscConfig+0x26c>)
 8001bb0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001bb4:	6013      	str	r3, [r2, #0]
 8001bb6:	e01d      	b.n	8001bf4 <HAL_RCC_OscConfig+0xd4>
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001bc0:	d10c      	bne.n	8001bdc <HAL_RCC_OscConfig+0xbc>
 8001bc2:	4b72      	ldr	r3, [pc, #456]	@ (8001d8c <HAL_RCC_OscConfig+0x26c>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4a71      	ldr	r2, [pc, #452]	@ (8001d8c <HAL_RCC_OscConfig+0x26c>)
 8001bc8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001bcc:	6013      	str	r3, [r2, #0]
 8001bce:	4b6f      	ldr	r3, [pc, #444]	@ (8001d8c <HAL_RCC_OscConfig+0x26c>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4a6e      	ldr	r2, [pc, #440]	@ (8001d8c <HAL_RCC_OscConfig+0x26c>)
 8001bd4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001bd8:	6013      	str	r3, [r2, #0]
 8001bda:	e00b      	b.n	8001bf4 <HAL_RCC_OscConfig+0xd4>
 8001bdc:	4b6b      	ldr	r3, [pc, #428]	@ (8001d8c <HAL_RCC_OscConfig+0x26c>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a6a      	ldr	r2, [pc, #424]	@ (8001d8c <HAL_RCC_OscConfig+0x26c>)
 8001be2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001be6:	6013      	str	r3, [r2, #0]
 8001be8:	4b68      	ldr	r3, [pc, #416]	@ (8001d8c <HAL_RCC_OscConfig+0x26c>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a67      	ldr	r2, [pc, #412]	@ (8001d8c <HAL_RCC_OscConfig+0x26c>)
 8001bee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001bf2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d013      	beq.n	8001c24 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bfc:	f7ff fcb4 	bl	8001568 <HAL_GetTick>
 8001c00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c02:	e008      	b.n	8001c16 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c04:	f7ff fcb0 	bl	8001568 <HAL_GetTick>
 8001c08:	4602      	mov	r2, r0
 8001c0a:	693b      	ldr	r3, [r7, #16]
 8001c0c:	1ad3      	subs	r3, r2, r3
 8001c0e:	2b64      	cmp	r3, #100	@ 0x64
 8001c10:	d901      	bls.n	8001c16 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001c12:	2303      	movs	r3, #3
 8001c14:	e200      	b.n	8002018 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c16:	4b5d      	ldr	r3, [pc, #372]	@ (8001d8c <HAL_RCC_OscConfig+0x26c>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d0f0      	beq.n	8001c04 <HAL_RCC_OscConfig+0xe4>
 8001c22:	e014      	b.n	8001c4e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c24:	f7ff fca0 	bl	8001568 <HAL_GetTick>
 8001c28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c2a:	e008      	b.n	8001c3e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c2c:	f7ff fc9c 	bl	8001568 <HAL_GetTick>
 8001c30:	4602      	mov	r2, r0
 8001c32:	693b      	ldr	r3, [r7, #16]
 8001c34:	1ad3      	subs	r3, r2, r3
 8001c36:	2b64      	cmp	r3, #100	@ 0x64
 8001c38:	d901      	bls.n	8001c3e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001c3a:	2303      	movs	r3, #3
 8001c3c:	e1ec      	b.n	8002018 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c3e:	4b53      	ldr	r3, [pc, #332]	@ (8001d8c <HAL_RCC_OscConfig+0x26c>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d1f0      	bne.n	8001c2c <HAL_RCC_OscConfig+0x10c>
 8001c4a:	e000      	b.n	8001c4e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f003 0302 	and.w	r3, r3, #2
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d063      	beq.n	8001d22 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c5a:	4b4c      	ldr	r3, [pc, #304]	@ (8001d8c <HAL_RCC_OscConfig+0x26c>)
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	f003 030c 	and.w	r3, r3, #12
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d00b      	beq.n	8001c7e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001c66:	4b49      	ldr	r3, [pc, #292]	@ (8001d8c <HAL_RCC_OscConfig+0x26c>)
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	f003 030c 	and.w	r3, r3, #12
 8001c6e:	2b08      	cmp	r3, #8
 8001c70:	d11c      	bne.n	8001cac <HAL_RCC_OscConfig+0x18c>
 8001c72:	4b46      	ldr	r3, [pc, #280]	@ (8001d8c <HAL_RCC_OscConfig+0x26c>)
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d116      	bne.n	8001cac <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c7e:	4b43      	ldr	r3, [pc, #268]	@ (8001d8c <HAL_RCC_OscConfig+0x26c>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f003 0302 	and.w	r3, r3, #2
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d005      	beq.n	8001c96 <HAL_RCC_OscConfig+0x176>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	691b      	ldr	r3, [r3, #16]
 8001c8e:	2b01      	cmp	r3, #1
 8001c90:	d001      	beq.n	8001c96 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001c92:	2301      	movs	r3, #1
 8001c94:	e1c0      	b.n	8002018 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c96:	4b3d      	ldr	r3, [pc, #244]	@ (8001d8c <HAL_RCC_OscConfig+0x26c>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	695b      	ldr	r3, [r3, #20]
 8001ca2:	00db      	lsls	r3, r3, #3
 8001ca4:	4939      	ldr	r1, [pc, #228]	@ (8001d8c <HAL_RCC_OscConfig+0x26c>)
 8001ca6:	4313      	orrs	r3, r2
 8001ca8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001caa:	e03a      	b.n	8001d22 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	691b      	ldr	r3, [r3, #16]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d020      	beq.n	8001cf6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001cb4:	4b36      	ldr	r3, [pc, #216]	@ (8001d90 <HAL_RCC_OscConfig+0x270>)
 8001cb6:	2201      	movs	r2, #1
 8001cb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cba:	f7ff fc55 	bl	8001568 <HAL_GetTick>
 8001cbe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cc0:	e008      	b.n	8001cd4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cc2:	f7ff fc51 	bl	8001568 <HAL_GetTick>
 8001cc6:	4602      	mov	r2, r0
 8001cc8:	693b      	ldr	r3, [r7, #16]
 8001cca:	1ad3      	subs	r3, r2, r3
 8001ccc:	2b02      	cmp	r3, #2
 8001cce:	d901      	bls.n	8001cd4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001cd0:	2303      	movs	r3, #3
 8001cd2:	e1a1      	b.n	8002018 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cd4:	4b2d      	ldr	r3, [pc, #180]	@ (8001d8c <HAL_RCC_OscConfig+0x26c>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f003 0302 	and.w	r3, r3, #2
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d0f0      	beq.n	8001cc2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ce0:	4b2a      	ldr	r3, [pc, #168]	@ (8001d8c <HAL_RCC_OscConfig+0x26c>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	695b      	ldr	r3, [r3, #20]
 8001cec:	00db      	lsls	r3, r3, #3
 8001cee:	4927      	ldr	r1, [pc, #156]	@ (8001d8c <HAL_RCC_OscConfig+0x26c>)
 8001cf0:	4313      	orrs	r3, r2
 8001cf2:	600b      	str	r3, [r1, #0]
 8001cf4:	e015      	b.n	8001d22 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001cf6:	4b26      	ldr	r3, [pc, #152]	@ (8001d90 <HAL_RCC_OscConfig+0x270>)
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cfc:	f7ff fc34 	bl	8001568 <HAL_GetTick>
 8001d00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d02:	e008      	b.n	8001d16 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d04:	f7ff fc30 	bl	8001568 <HAL_GetTick>
 8001d08:	4602      	mov	r2, r0
 8001d0a:	693b      	ldr	r3, [r7, #16]
 8001d0c:	1ad3      	subs	r3, r2, r3
 8001d0e:	2b02      	cmp	r3, #2
 8001d10:	d901      	bls.n	8001d16 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001d12:	2303      	movs	r3, #3
 8001d14:	e180      	b.n	8002018 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d16:	4b1d      	ldr	r3, [pc, #116]	@ (8001d8c <HAL_RCC_OscConfig+0x26c>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f003 0302 	and.w	r3, r3, #2
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d1f0      	bne.n	8001d04 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f003 0308 	and.w	r3, r3, #8
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d03a      	beq.n	8001da4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	699b      	ldr	r3, [r3, #24]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d019      	beq.n	8001d6a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d36:	4b17      	ldr	r3, [pc, #92]	@ (8001d94 <HAL_RCC_OscConfig+0x274>)
 8001d38:	2201      	movs	r2, #1
 8001d3a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d3c:	f7ff fc14 	bl	8001568 <HAL_GetTick>
 8001d40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d42:	e008      	b.n	8001d56 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d44:	f7ff fc10 	bl	8001568 <HAL_GetTick>
 8001d48:	4602      	mov	r2, r0
 8001d4a:	693b      	ldr	r3, [r7, #16]
 8001d4c:	1ad3      	subs	r3, r2, r3
 8001d4e:	2b02      	cmp	r3, #2
 8001d50:	d901      	bls.n	8001d56 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001d52:	2303      	movs	r3, #3
 8001d54:	e160      	b.n	8002018 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d56:	4b0d      	ldr	r3, [pc, #52]	@ (8001d8c <HAL_RCC_OscConfig+0x26c>)
 8001d58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d5a:	f003 0302 	and.w	r3, r3, #2
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d0f0      	beq.n	8001d44 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001d62:	2001      	movs	r0, #1
 8001d64:	f000 faa6 	bl	80022b4 <RCC_Delay>
 8001d68:	e01c      	b.n	8001da4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d6a:	4b0a      	ldr	r3, [pc, #40]	@ (8001d94 <HAL_RCC_OscConfig+0x274>)
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d70:	f7ff fbfa 	bl	8001568 <HAL_GetTick>
 8001d74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d76:	e00f      	b.n	8001d98 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d78:	f7ff fbf6 	bl	8001568 <HAL_GetTick>
 8001d7c:	4602      	mov	r2, r0
 8001d7e:	693b      	ldr	r3, [r7, #16]
 8001d80:	1ad3      	subs	r3, r2, r3
 8001d82:	2b02      	cmp	r3, #2
 8001d84:	d908      	bls.n	8001d98 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001d86:	2303      	movs	r3, #3
 8001d88:	e146      	b.n	8002018 <HAL_RCC_OscConfig+0x4f8>
 8001d8a:	bf00      	nop
 8001d8c:	40021000 	.word	0x40021000
 8001d90:	42420000 	.word	0x42420000
 8001d94:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d98:	4b92      	ldr	r3, [pc, #584]	@ (8001fe4 <HAL_RCC_OscConfig+0x4c4>)
 8001d9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d9c:	f003 0302 	and.w	r3, r3, #2
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d1e9      	bne.n	8001d78 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f003 0304 	and.w	r3, r3, #4
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	f000 80a6 	beq.w	8001efe <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001db2:	2300      	movs	r3, #0
 8001db4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001db6:	4b8b      	ldr	r3, [pc, #556]	@ (8001fe4 <HAL_RCC_OscConfig+0x4c4>)
 8001db8:	69db      	ldr	r3, [r3, #28]
 8001dba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d10d      	bne.n	8001dde <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001dc2:	4b88      	ldr	r3, [pc, #544]	@ (8001fe4 <HAL_RCC_OscConfig+0x4c4>)
 8001dc4:	69db      	ldr	r3, [r3, #28]
 8001dc6:	4a87      	ldr	r2, [pc, #540]	@ (8001fe4 <HAL_RCC_OscConfig+0x4c4>)
 8001dc8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001dcc:	61d3      	str	r3, [r2, #28]
 8001dce:	4b85      	ldr	r3, [pc, #532]	@ (8001fe4 <HAL_RCC_OscConfig+0x4c4>)
 8001dd0:	69db      	ldr	r3, [r3, #28]
 8001dd2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001dd6:	60bb      	str	r3, [r7, #8]
 8001dd8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dde:	4b82      	ldr	r3, [pc, #520]	@ (8001fe8 <HAL_RCC_OscConfig+0x4c8>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d118      	bne.n	8001e1c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001dea:	4b7f      	ldr	r3, [pc, #508]	@ (8001fe8 <HAL_RCC_OscConfig+0x4c8>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4a7e      	ldr	r2, [pc, #504]	@ (8001fe8 <HAL_RCC_OscConfig+0x4c8>)
 8001df0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001df4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001df6:	f7ff fbb7 	bl	8001568 <HAL_GetTick>
 8001dfa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dfc:	e008      	b.n	8001e10 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001dfe:	f7ff fbb3 	bl	8001568 <HAL_GetTick>
 8001e02:	4602      	mov	r2, r0
 8001e04:	693b      	ldr	r3, [r7, #16]
 8001e06:	1ad3      	subs	r3, r2, r3
 8001e08:	2b64      	cmp	r3, #100	@ 0x64
 8001e0a:	d901      	bls.n	8001e10 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001e0c:	2303      	movs	r3, #3
 8001e0e:	e103      	b.n	8002018 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e10:	4b75      	ldr	r3, [pc, #468]	@ (8001fe8 <HAL_RCC_OscConfig+0x4c8>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d0f0      	beq.n	8001dfe <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	68db      	ldr	r3, [r3, #12]
 8001e20:	2b01      	cmp	r3, #1
 8001e22:	d106      	bne.n	8001e32 <HAL_RCC_OscConfig+0x312>
 8001e24:	4b6f      	ldr	r3, [pc, #444]	@ (8001fe4 <HAL_RCC_OscConfig+0x4c4>)
 8001e26:	6a1b      	ldr	r3, [r3, #32]
 8001e28:	4a6e      	ldr	r2, [pc, #440]	@ (8001fe4 <HAL_RCC_OscConfig+0x4c4>)
 8001e2a:	f043 0301 	orr.w	r3, r3, #1
 8001e2e:	6213      	str	r3, [r2, #32]
 8001e30:	e02d      	b.n	8001e8e <HAL_RCC_OscConfig+0x36e>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	68db      	ldr	r3, [r3, #12]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d10c      	bne.n	8001e54 <HAL_RCC_OscConfig+0x334>
 8001e3a:	4b6a      	ldr	r3, [pc, #424]	@ (8001fe4 <HAL_RCC_OscConfig+0x4c4>)
 8001e3c:	6a1b      	ldr	r3, [r3, #32]
 8001e3e:	4a69      	ldr	r2, [pc, #420]	@ (8001fe4 <HAL_RCC_OscConfig+0x4c4>)
 8001e40:	f023 0301 	bic.w	r3, r3, #1
 8001e44:	6213      	str	r3, [r2, #32]
 8001e46:	4b67      	ldr	r3, [pc, #412]	@ (8001fe4 <HAL_RCC_OscConfig+0x4c4>)
 8001e48:	6a1b      	ldr	r3, [r3, #32]
 8001e4a:	4a66      	ldr	r2, [pc, #408]	@ (8001fe4 <HAL_RCC_OscConfig+0x4c4>)
 8001e4c:	f023 0304 	bic.w	r3, r3, #4
 8001e50:	6213      	str	r3, [r2, #32]
 8001e52:	e01c      	b.n	8001e8e <HAL_RCC_OscConfig+0x36e>
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	68db      	ldr	r3, [r3, #12]
 8001e58:	2b05      	cmp	r3, #5
 8001e5a:	d10c      	bne.n	8001e76 <HAL_RCC_OscConfig+0x356>
 8001e5c:	4b61      	ldr	r3, [pc, #388]	@ (8001fe4 <HAL_RCC_OscConfig+0x4c4>)
 8001e5e:	6a1b      	ldr	r3, [r3, #32]
 8001e60:	4a60      	ldr	r2, [pc, #384]	@ (8001fe4 <HAL_RCC_OscConfig+0x4c4>)
 8001e62:	f043 0304 	orr.w	r3, r3, #4
 8001e66:	6213      	str	r3, [r2, #32]
 8001e68:	4b5e      	ldr	r3, [pc, #376]	@ (8001fe4 <HAL_RCC_OscConfig+0x4c4>)
 8001e6a:	6a1b      	ldr	r3, [r3, #32]
 8001e6c:	4a5d      	ldr	r2, [pc, #372]	@ (8001fe4 <HAL_RCC_OscConfig+0x4c4>)
 8001e6e:	f043 0301 	orr.w	r3, r3, #1
 8001e72:	6213      	str	r3, [r2, #32]
 8001e74:	e00b      	b.n	8001e8e <HAL_RCC_OscConfig+0x36e>
 8001e76:	4b5b      	ldr	r3, [pc, #364]	@ (8001fe4 <HAL_RCC_OscConfig+0x4c4>)
 8001e78:	6a1b      	ldr	r3, [r3, #32]
 8001e7a:	4a5a      	ldr	r2, [pc, #360]	@ (8001fe4 <HAL_RCC_OscConfig+0x4c4>)
 8001e7c:	f023 0301 	bic.w	r3, r3, #1
 8001e80:	6213      	str	r3, [r2, #32]
 8001e82:	4b58      	ldr	r3, [pc, #352]	@ (8001fe4 <HAL_RCC_OscConfig+0x4c4>)
 8001e84:	6a1b      	ldr	r3, [r3, #32]
 8001e86:	4a57      	ldr	r2, [pc, #348]	@ (8001fe4 <HAL_RCC_OscConfig+0x4c4>)
 8001e88:	f023 0304 	bic.w	r3, r3, #4
 8001e8c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	68db      	ldr	r3, [r3, #12]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d015      	beq.n	8001ec2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e96:	f7ff fb67 	bl	8001568 <HAL_GetTick>
 8001e9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e9c:	e00a      	b.n	8001eb4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e9e:	f7ff fb63 	bl	8001568 <HAL_GetTick>
 8001ea2:	4602      	mov	r2, r0
 8001ea4:	693b      	ldr	r3, [r7, #16]
 8001ea6:	1ad3      	subs	r3, r2, r3
 8001ea8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001eac:	4293      	cmp	r3, r2
 8001eae:	d901      	bls.n	8001eb4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001eb0:	2303      	movs	r3, #3
 8001eb2:	e0b1      	b.n	8002018 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001eb4:	4b4b      	ldr	r3, [pc, #300]	@ (8001fe4 <HAL_RCC_OscConfig+0x4c4>)
 8001eb6:	6a1b      	ldr	r3, [r3, #32]
 8001eb8:	f003 0302 	and.w	r3, r3, #2
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d0ee      	beq.n	8001e9e <HAL_RCC_OscConfig+0x37e>
 8001ec0:	e014      	b.n	8001eec <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ec2:	f7ff fb51 	bl	8001568 <HAL_GetTick>
 8001ec6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ec8:	e00a      	b.n	8001ee0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001eca:	f7ff fb4d 	bl	8001568 <HAL_GetTick>
 8001ece:	4602      	mov	r2, r0
 8001ed0:	693b      	ldr	r3, [r7, #16]
 8001ed2:	1ad3      	subs	r3, r2, r3
 8001ed4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d901      	bls.n	8001ee0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001edc:	2303      	movs	r3, #3
 8001ede:	e09b      	b.n	8002018 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ee0:	4b40      	ldr	r3, [pc, #256]	@ (8001fe4 <HAL_RCC_OscConfig+0x4c4>)
 8001ee2:	6a1b      	ldr	r3, [r3, #32]
 8001ee4:	f003 0302 	and.w	r3, r3, #2
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d1ee      	bne.n	8001eca <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001eec:	7dfb      	ldrb	r3, [r7, #23]
 8001eee:	2b01      	cmp	r3, #1
 8001ef0:	d105      	bne.n	8001efe <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ef2:	4b3c      	ldr	r3, [pc, #240]	@ (8001fe4 <HAL_RCC_OscConfig+0x4c4>)
 8001ef4:	69db      	ldr	r3, [r3, #28]
 8001ef6:	4a3b      	ldr	r2, [pc, #236]	@ (8001fe4 <HAL_RCC_OscConfig+0x4c4>)
 8001ef8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001efc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	69db      	ldr	r3, [r3, #28]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	f000 8087 	beq.w	8002016 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f08:	4b36      	ldr	r3, [pc, #216]	@ (8001fe4 <HAL_RCC_OscConfig+0x4c4>)
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	f003 030c 	and.w	r3, r3, #12
 8001f10:	2b08      	cmp	r3, #8
 8001f12:	d061      	beq.n	8001fd8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	69db      	ldr	r3, [r3, #28]
 8001f18:	2b02      	cmp	r3, #2
 8001f1a:	d146      	bne.n	8001faa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f1c:	4b33      	ldr	r3, [pc, #204]	@ (8001fec <HAL_RCC_OscConfig+0x4cc>)
 8001f1e:	2200      	movs	r2, #0
 8001f20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f22:	f7ff fb21 	bl	8001568 <HAL_GetTick>
 8001f26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f28:	e008      	b.n	8001f3c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f2a:	f7ff fb1d 	bl	8001568 <HAL_GetTick>
 8001f2e:	4602      	mov	r2, r0
 8001f30:	693b      	ldr	r3, [r7, #16]
 8001f32:	1ad3      	subs	r3, r2, r3
 8001f34:	2b02      	cmp	r3, #2
 8001f36:	d901      	bls.n	8001f3c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001f38:	2303      	movs	r3, #3
 8001f3a:	e06d      	b.n	8002018 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f3c:	4b29      	ldr	r3, [pc, #164]	@ (8001fe4 <HAL_RCC_OscConfig+0x4c4>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d1f0      	bne.n	8001f2a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6a1b      	ldr	r3, [r3, #32]
 8001f4c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001f50:	d108      	bne.n	8001f64 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001f52:	4b24      	ldr	r3, [pc, #144]	@ (8001fe4 <HAL_RCC_OscConfig+0x4c4>)
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	689b      	ldr	r3, [r3, #8]
 8001f5e:	4921      	ldr	r1, [pc, #132]	@ (8001fe4 <HAL_RCC_OscConfig+0x4c4>)
 8001f60:	4313      	orrs	r3, r2
 8001f62:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f64:	4b1f      	ldr	r3, [pc, #124]	@ (8001fe4 <HAL_RCC_OscConfig+0x4c4>)
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6a19      	ldr	r1, [r3, #32]
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f74:	430b      	orrs	r3, r1
 8001f76:	491b      	ldr	r1, [pc, #108]	@ (8001fe4 <HAL_RCC_OscConfig+0x4c4>)
 8001f78:	4313      	orrs	r3, r2
 8001f7a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f7c:	4b1b      	ldr	r3, [pc, #108]	@ (8001fec <HAL_RCC_OscConfig+0x4cc>)
 8001f7e:	2201      	movs	r2, #1
 8001f80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f82:	f7ff faf1 	bl	8001568 <HAL_GetTick>
 8001f86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f88:	e008      	b.n	8001f9c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f8a:	f7ff faed 	bl	8001568 <HAL_GetTick>
 8001f8e:	4602      	mov	r2, r0
 8001f90:	693b      	ldr	r3, [r7, #16]
 8001f92:	1ad3      	subs	r3, r2, r3
 8001f94:	2b02      	cmp	r3, #2
 8001f96:	d901      	bls.n	8001f9c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001f98:	2303      	movs	r3, #3
 8001f9a:	e03d      	b.n	8002018 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f9c:	4b11      	ldr	r3, [pc, #68]	@ (8001fe4 <HAL_RCC_OscConfig+0x4c4>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d0f0      	beq.n	8001f8a <HAL_RCC_OscConfig+0x46a>
 8001fa8:	e035      	b.n	8002016 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001faa:	4b10      	ldr	r3, [pc, #64]	@ (8001fec <HAL_RCC_OscConfig+0x4cc>)
 8001fac:	2200      	movs	r2, #0
 8001fae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fb0:	f7ff fada 	bl	8001568 <HAL_GetTick>
 8001fb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fb6:	e008      	b.n	8001fca <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fb8:	f7ff fad6 	bl	8001568 <HAL_GetTick>
 8001fbc:	4602      	mov	r2, r0
 8001fbe:	693b      	ldr	r3, [r7, #16]
 8001fc0:	1ad3      	subs	r3, r2, r3
 8001fc2:	2b02      	cmp	r3, #2
 8001fc4:	d901      	bls.n	8001fca <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001fc6:	2303      	movs	r3, #3
 8001fc8:	e026      	b.n	8002018 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fca:	4b06      	ldr	r3, [pc, #24]	@ (8001fe4 <HAL_RCC_OscConfig+0x4c4>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d1f0      	bne.n	8001fb8 <HAL_RCC_OscConfig+0x498>
 8001fd6:	e01e      	b.n	8002016 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	69db      	ldr	r3, [r3, #28]
 8001fdc:	2b01      	cmp	r3, #1
 8001fde:	d107      	bne.n	8001ff0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	e019      	b.n	8002018 <HAL_RCC_OscConfig+0x4f8>
 8001fe4:	40021000 	.word	0x40021000
 8001fe8:	40007000 	.word	0x40007000
 8001fec:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001ff0:	4b0b      	ldr	r3, [pc, #44]	@ (8002020 <HAL_RCC_OscConfig+0x500>)
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6a1b      	ldr	r3, [r3, #32]
 8002000:	429a      	cmp	r2, r3
 8002002:	d106      	bne.n	8002012 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800200e:	429a      	cmp	r2, r3
 8002010:	d001      	beq.n	8002016 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002012:	2301      	movs	r3, #1
 8002014:	e000      	b.n	8002018 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002016:	2300      	movs	r3, #0
}
 8002018:	4618      	mov	r0, r3
 800201a:	3718      	adds	r7, #24
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}
 8002020:	40021000 	.word	0x40021000

08002024 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b084      	sub	sp, #16
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
 800202c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d101      	bne.n	8002038 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002034:	2301      	movs	r3, #1
 8002036:	e0d0      	b.n	80021da <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002038:	4b6a      	ldr	r3, [pc, #424]	@ (80021e4 <HAL_RCC_ClockConfig+0x1c0>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f003 0307 	and.w	r3, r3, #7
 8002040:	683a      	ldr	r2, [r7, #0]
 8002042:	429a      	cmp	r2, r3
 8002044:	d910      	bls.n	8002068 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002046:	4b67      	ldr	r3, [pc, #412]	@ (80021e4 <HAL_RCC_ClockConfig+0x1c0>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f023 0207 	bic.w	r2, r3, #7
 800204e:	4965      	ldr	r1, [pc, #404]	@ (80021e4 <HAL_RCC_ClockConfig+0x1c0>)
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	4313      	orrs	r3, r2
 8002054:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002056:	4b63      	ldr	r3, [pc, #396]	@ (80021e4 <HAL_RCC_ClockConfig+0x1c0>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f003 0307 	and.w	r3, r3, #7
 800205e:	683a      	ldr	r2, [r7, #0]
 8002060:	429a      	cmp	r2, r3
 8002062:	d001      	beq.n	8002068 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002064:	2301      	movs	r3, #1
 8002066:	e0b8      	b.n	80021da <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f003 0302 	and.w	r3, r3, #2
 8002070:	2b00      	cmp	r3, #0
 8002072:	d020      	beq.n	80020b6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f003 0304 	and.w	r3, r3, #4
 800207c:	2b00      	cmp	r3, #0
 800207e:	d005      	beq.n	800208c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002080:	4b59      	ldr	r3, [pc, #356]	@ (80021e8 <HAL_RCC_ClockConfig+0x1c4>)
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	4a58      	ldr	r2, [pc, #352]	@ (80021e8 <HAL_RCC_ClockConfig+0x1c4>)
 8002086:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800208a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f003 0308 	and.w	r3, r3, #8
 8002094:	2b00      	cmp	r3, #0
 8002096:	d005      	beq.n	80020a4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002098:	4b53      	ldr	r3, [pc, #332]	@ (80021e8 <HAL_RCC_ClockConfig+0x1c4>)
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	4a52      	ldr	r2, [pc, #328]	@ (80021e8 <HAL_RCC_ClockConfig+0x1c4>)
 800209e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80020a2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020a4:	4b50      	ldr	r3, [pc, #320]	@ (80021e8 <HAL_RCC_ClockConfig+0x1c4>)
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	689b      	ldr	r3, [r3, #8]
 80020b0:	494d      	ldr	r1, [pc, #308]	@ (80021e8 <HAL_RCC_ClockConfig+0x1c4>)
 80020b2:	4313      	orrs	r3, r2
 80020b4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f003 0301 	and.w	r3, r3, #1
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d040      	beq.n	8002144 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	2b01      	cmp	r3, #1
 80020c8:	d107      	bne.n	80020da <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020ca:	4b47      	ldr	r3, [pc, #284]	@ (80021e8 <HAL_RCC_ClockConfig+0x1c4>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d115      	bne.n	8002102 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020d6:	2301      	movs	r3, #1
 80020d8:	e07f      	b.n	80021da <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	2b02      	cmp	r3, #2
 80020e0:	d107      	bne.n	80020f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020e2:	4b41      	ldr	r3, [pc, #260]	@ (80021e8 <HAL_RCC_ClockConfig+0x1c4>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d109      	bne.n	8002102 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020ee:	2301      	movs	r3, #1
 80020f0:	e073      	b.n	80021da <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020f2:	4b3d      	ldr	r3, [pc, #244]	@ (80021e8 <HAL_RCC_ClockConfig+0x1c4>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f003 0302 	and.w	r3, r3, #2
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d101      	bne.n	8002102 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020fe:	2301      	movs	r3, #1
 8002100:	e06b      	b.n	80021da <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002102:	4b39      	ldr	r3, [pc, #228]	@ (80021e8 <HAL_RCC_ClockConfig+0x1c4>)
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	f023 0203 	bic.w	r2, r3, #3
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	4936      	ldr	r1, [pc, #216]	@ (80021e8 <HAL_RCC_ClockConfig+0x1c4>)
 8002110:	4313      	orrs	r3, r2
 8002112:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002114:	f7ff fa28 	bl	8001568 <HAL_GetTick>
 8002118:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800211a:	e00a      	b.n	8002132 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800211c:	f7ff fa24 	bl	8001568 <HAL_GetTick>
 8002120:	4602      	mov	r2, r0
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	1ad3      	subs	r3, r2, r3
 8002126:	f241 3288 	movw	r2, #5000	@ 0x1388
 800212a:	4293      	cmp	r3, r2
 800212c:	d901      	bls.n	8002132 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800212e:	2303      	movs	r3, #3
 8002130:	e053      	b.n	80021da <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002132:	4b2d      	ldr	r3, [pc, #180]	@ (80021e8 <HAL_RCC_ClockConfig+0x1c4>)
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	f003 020c 	and.w	r2, r3, #12
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	009b      	lsls	r3, r3, #2
 8002140:	429a      	cmp	r2, r3
 8002142:	d1eb      	bne.n	800211c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002144:	4b27      	ldr	r3, [pc, #156]	@ (80021e4 <HAL_RCC_ClockConfig+0x1c0>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f003 0307 	and.w	r3, r3, #7
 800214c:	683a      	ldr	r2, [r7, #0]
 800214e:	429a      	cmp	r2, r3
 8002150:	d210      	bcs.n	8002174 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002152:	4b24      	ldr	r3, [pc, #144]	@ (80021e4 <HAL_RCC_ClockConfig+0x1c0>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f023 0207 	bic.w	r2, r3, #7
 800215a:	4922      	ldr	r1, [pc, #136]	@ (80021e4 <HAL_RCC_ClockConfig+0x1c0>)
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	4313      	orrs	r3, r2
 8002160:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002162:	4b20      	ldr	r3, [pc, #128]	@ (80021e4 <HAL_RCC_ClockConfig+0x1c0>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f003 0307 	and.w	r3, r3, #7
 800216a:	683a      	ldr	r2, [r7, #0]
 800216c:	429a      	cmp	r2, r3
 800216e:	d001      	beq.n	8002174 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002170:	2301      	movs	r3, #1
 8002172:	e032      	b.n	80021da <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f003 0304 	and.w	r3, r3, #4
 800217c:	2b00      	cmp	r3, #0
 800217e:	d008      	beq.n	8002192 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002180:	4b19      	ldr	r3, [pc, #100]	@ (80021e8 <HAL_RCC_ClockConfig+0x1c4>)
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	68db      	ldr	r3, [r3, #12]
 800218c:	4916      	ldr	r1, [pc, #88]	@ (80021e8 <HAL_RCC_ClockConfig+0x1c4>)
 800218e:	4313      	orrs	r3, r2
 8002190:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f003 0308 	and.w	r3, r3, #8
 800219a:	2b00      	cmp	r3, #0
 800219c:	d009      	beq.n	80021b2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800219e:	4b12      	ldr	r3, [pc, #72]	@ (80021e8 <HAL_RCC_ClockConfig+0x1c4>)
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	691b      	ldr	r3, [r3, #16]
 80021aa:	00db      	lsls	r3, r3, #3
 80021ac:	490e      	ldr	r1, [pc, #56]	@ (80021e8 <HAL_RCC_ClockConfig+0x1c4>)
 80021ae:	4313      	orrs	r3, r2
 80021b0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80021b2:	f000 f821 	bl	80021f8 <HAL_RCC_GetSysClockFreq>
 80021b6:	4602      	mov	r2, r0
 80021b8:	4b0b      	ldr	r3, [pc, #44]	@ (80021e8 <HAL_RCC_ClockConfig+0x1c4>)
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	091b      	lsrs	r3, r3, #4
 80021be:	f003 030f 	and.w	r3, r3, #15
 80021c2:	490a      	ldr	r1, [pc, #40]	@ (80021ec <HAL_RCC_ClockConfig+0x1c8>)
 80021c4:	5ccb      	ldrb	r3, [r1, r3]
 80021c6:	fa22 f303 	lsr.w	r3, r2, r3
 80021ca:	4a09      	ldr	r2, [pc, #36]	@ (80021f0 <HAL_RCC_ClockConfig+0x1cc>)
 80021cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80021ce:	4b09      	ldr	r3, [pc, #36]	@ (80021f4 <HAL_RCC_ClockConfig+0x1d0>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4618      	mov	r0, r3
 80021d4:	f7ff f986 	bl	80014e4 <HAL_InitTick>

  return HAL_OK;
 80021d8:	2300      	movs	r3, #0
}
 80021da:	4618      	mov	r0, r3
 80021dc:	3710      	adds	r7, #16
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}
 80021e2:	bf00      	nop
 80021e4:	40022000 	.word	0x40022000
 80021e8:	40021000 	.word	0x40021000
 80021ec:	08002b18 	.word	0x08002b18
 80021f0:	2000001c 	.word	0x2000001c
 80021f4:	20000020 	.word	0x20000020

080021f8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021f8:	b480      	push	{r7}
 80021fa:	b087      	sub	sp, #28
 80021fc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80021fe:	2300      	movs	r3, #0
 8002200:	60fb      	str	r3, [r7, #12]
 8002202:	2300      	movs	r3, #0
 8002204:	60bb      	str	r3, [r7, #8]
 8002206:	2300      	movs	r3, #0
 8002208:	617b      	str	r3, [r7, #20]
 800220a:	2300      	movs	r3, #0
 800220c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800220e:	2300      	movs	r3, #0
 8002210:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002212:	4b1e      	ldr	r3, [pc, #120]	@ (800228c <HAL_RCC_GetSysClockFreq+0x94>)
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	f003 030c 	and.w	r3, r3, #12
 800221e:	2b04      	cmp	r3, #4
 8002220:	d002      	beq.n	8002228 <HAL_RCC_GetSysClockFreq+0x30>
 8002222:	2b08      	cmp	r3, #8
 8002224:	d003      	beq.n	800222e <HAL_RCC_GetSysClockFreq+0x36>
 8002226:	e027      	b.n	8002278 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002228:	4b19      	ldr	r3, [pc, #100]	@ (8002290 <HAL_RCC_GetSysClockFreq+0x98>)
 800222a:	613b      	str	r3, [r7, #16]
      break;
 800222c:	e027      	b.n	800227e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	0c9b      	lsrs	r3, r3, #18
 8002232:	f003 030f 	and.w	r3, r3, #15
 8002236:	4a17      	ldr	r2, [pc, #92]	@ (8002294 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002238:	5cd3      	ldrb	r3, [r2, r3]
 800223a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002242:	2b00      	cmp	r3, #0
 8002244:	d010      	beq.n	8002268 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002246:	4b11      	ldr	r3, [pc, #68]	@ (800228c <HAL_RCC_GetSysClockFreq+0x94>)
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	0c5b      	lsrs	r3, r3, #17
 800224c:	f003 0301 	and.w	r3, r3, #1
 8002250:	4a11      	ldr	r2, [pc, #68]	@ (8002298 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002252:	5cd3      	ldrb	r3, [r2, r3]
 8002254:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	4a0d      	ldr	r2, [pc, #52]	@ (8002290 <HAL_RCC_GetSysClockFreq+0x98>)
 800225a:	fb03 f202 	mul.w	r2, r3, r2
 800225e:	68bb      	ldr	r3, [r7, #8]
 8002260:	fbb2 f3f3 	udiv	r3, r2, r3
 8002264:	617b      	str	r3, [r7, #20]
 8002266:	e004      	b.n	8002272 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	4a0c      	ldr	r2, [pc, #48]	@ (800229c <HAL_RCC_GetSysClockFreq+0xa4>)
 800226c:	fb02 f303 	mul.w	r3, r2, r3
 8002270:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002272:	697b      	ldr	r3, [r7, #20]
 8002274:	613b      	str	r3, [r7, #16]
      break;
 8002276:	e002      	b.n	800227e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002278:	4b05      	ldr	r3, [pc, #20]	@ (8002290 <HAL_RCC_GetSysClockFreq+0x98>)
 800227a:	613b      	str	r3, [r7, #16]
      break;
 800227c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800227e:	693b      	ldr	r3, [r7, #16]
}
 8002280:	4618      	mov	r0, r3
 8002282:	371c      	adds	r7, #28
 8002284:	46bd      	mov	sp, r7
 8002286:	bc80      	pop	{r7}
 8002288:	4770      	bx	lr
 800228a:	bf00      	nop
 800228c:	40021000 	.word	0x40021000
 8002290:	007a1200 	.word	0x007a1200
 8002294:	08002b28 	.word	0x08002b28
 8002298:	08002b38 	.word	0x08002b38
 800229c:	003d0900 	.word	0x003d0900

080022a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80022a0:	b480      	push	{r7}
 80022a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80022a4:	4b02      	ldr	r3, [pc, #8]	@ (80022b0 <HAL_RCC_GetHCLKFreq+0x10>)
 80022a6:	681b      	ldr	r3, [r3, #0]
}
 80022a8:	4618      	mov	r0, r3
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bc80      	pop	{r7}
 80022ae:	4770      	bx	lr
 80022b0:	2000001c 	.word	0x2000001c

080022b4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80022b4:	b480      	push	{r7}
 80022b6:	b085      	sub	sp, #20
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80022bc:	4b0a      	ldr	r3, [pc, #40]	@ (80022e8 <RCC_Delay+0x34>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4a0a      	ldr	r2, [pc, #40]	@ (80022ec <RCC_Delay+0x38>)
 80022c2:	fba2 2303 	umull	r2, r3, r2, r3
 80022c6:	0a5b      	lsrs	r3, r3, #9
 80022c8:	687a      	ldr	r2, [r7, #4]
 80022ca:	fb02 f303 	mul.w	r3, r2, r3
 80022ce:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80022d0:	bf00      	nop
  }
  while (Delay --);
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	1e5a      	subs	r2, r3, #1
 80022d6:	60fa      	str	r2, [r7, #12]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d1f9      	bne.n	80022d0 <RCC_Delay+0x1c>
}
 80022dc:	bf00      	nop
 80022de:	bf00      	nop
 80022e0:	3714      	adds	r7, #20
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bc80      	pop	{r7}
 80022e6:	4770      	bx	lr
 80022e8:	2000001c 	.word	0x2000001c
 80022ec:	10624dd3 	.word	0x10624dd3

080022f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b082      	sub	sp, #8
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d101      	bne.n	8002302 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80022fe:	2301      	movs	r3, #1
 8002300:	e041      	b.n	8002386 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002308:	b2db      	uxtb	r3, r3
 800230a:	2b00      	cmp	r3, #0
 800230c:	d106      	bne.n	800231c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2200      	movs	r2, #0
 8002312:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002316:	6878      	ldr	r0, [r7, #4]
 8002318:	f7fe ffc0 	bl	800129c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2202      	movs	r2, #2
 8002320:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681a      	ldr	r2, [r3, #0]
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	3304      	adds	r3, #4
 800232c:	4619      	mov	r1, r3
 800232e:	4610      	mov	r0, r2
 8002330:	f000 fa56 	bl	80027e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2201      	movs	r2, #1
 8002338:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2201      	movs	r2, #1
 8002340:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2201      	movs	r2, #1
 8002348:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2201      	movs	r2, #1
 8002350:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2201      	movs	r2, #1
 8002358:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2201      	movs	r2, #1
 8002360:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2201      	movs	r2, #1
 8002368:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2201      	movs	r2, #1
 8002370:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2201      	movs	r2, #1
 8002378:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2201      	movs	r2, #1
 8002380:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002384:	2300      	movs	r3, #0
}
 8002386:	4618      	mov	r0, r3
 8002388:	3708      	adds	r7, #8
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}
	...

08002390 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002390:	b480      	push	{r7}
 8002392:	b085      	sub	sp, #20
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800239e:	b2db      	uxtb	r3, r3
 80023a0:	2b01      	cmp	r3, #1
 80023a2:	d001      	beq.n	80023a8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80023a4:	2301      	movs	r3, #1
 80023a6:	e035      	b.n	8002414 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2202      	movs	r2, #2
 80023ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	68da      	ldr	r2, [r3, #12]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f042 0201 	orr.w	r2, r2, #1
 80023be:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a16      	ldr	r2, [pc, #88]	@ (8002420 <HAL_TIM_Base_Start_IT+0x90>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d009      	beq.n	80023de <HAL_TIM_Base_Start_IT+0x4e>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80023d2:	d004      	beq.n	80023de <HAL_TIM_Base_Start_IT+0x4e>
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4a12      	ldr	r2, [pc, #72]	@ (8002424 <HAL_TIM_Base_Start_IT+0x94>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d111      	bne.n	8002402 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	689b      	ldr	r3, [r3, #8]
 80023e4:	f003 0307 	and.w	r3, r3, #7
 80023e8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	2b06      	cmp	r3, #6
 80023ee:	d010      	beq.n	8002412 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	681a      	ldr	r2, [r3, #0]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f042 0201 	orr.w	r2, r2, #1
 80023fe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002400:	e007      	b.n	8002412 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	681a      	ldr	r2, [r3, #0]
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f042 0201 	orr.w	r2, r2, #1
 8002410:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002412:	2300      	movs	r3, #0
}
 8002414:	4618      	mov	r0, r3
 8002416:	3714      	adds	r7, #20
 8002418:	46bd      	mov	sp, r7
 800241a:	bc80      	pop	{r7}
 800241c:	4770      	bx	lr
 800241e:	bf00      	nop
 8002420:	40012c00 	.word	0x40012c00
 8002424:	40000400 	.word	0x40000400

08002428 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b084      	sub	sp, #16
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	68db      	ldr	r3, [r3, #12]
 8002436:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	691b      	ldr	r3, [r3, #16]
 800243e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002440:	68bb      	ldr	r3, [r7, #8]
 8002442:	f003 0302 	and.w	r3, r3, #2
 8002446:	2b00      	cmp	r3, #0
 8002448:	d020      	beq.n	800248c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	f003 0302 	and.w	r3, r3, #2
 8002450:	2b00      	cmp	r3, #0
 8002452:	d01b      	beq.n	800248c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f06f 0202 	mvn.w	r2, #2
 800245c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2201      	movs	r2, #1
 8002462:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	699b      	ldr	r3, [r3, #24]
 800246a:	f003 0303 	and.w	r3, r3, #3
 800246e:	2b00      	cmp	r3, #0
 8002470:	d003      	beq.n	800247a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002472:	6878      	ldr	r0, [r7, #4]
 8002474:	f000 f998 	bl	80027a8 <HAL_TIM_IC_CaptureCallback>
 8002478:	e005      	b.n	8002486 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800247a:	6878      	ldr	r0, [r7, #4]
 800247c:	f000 f98b 	bl	8002796 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002480:	6878      	ldr	r0, [r7, #4]
 8002482:	f000 f99a 	bl	80027ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2200      	movs	r2, #0
 800248a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800248c:	68bb      	ldr	r3, [r7, #8]
 800248e:	f003 0304 	and.w	r3, r3, #4
 8002492:	2b00      	cmp	r3, #0
 8002494:	d020      	beq.n	80024d8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	f003 0304 	and.w	r3, r3, #4
 800249c:	2b00      	cmp	r3, #0
 800249e:	d01b      	beq.n	80024d8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f06f 0204 	mvn.w	r2, #4
 80024a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2202      	movs	r2, #2
 80024ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	699b      	ldr	r3, [r3, #24]
 80024b6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d003      	beq.n	80024c6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024be:	6878      	ldr	r0, [r7, #4]
 80024c0:	f000 f972 	bl	80027a8 <HAL_TIM_IC_CaptureCallback>
 80024c4:	e005      	b.n	80024d2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024c6:	6878      	ldr	r0, [r7, #4]
 80024c8:	f000 f965 	bl	8002796 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024cc:	6878      	ldr	r0, [r7, #4]
 80024ce:	f000 f974 	bl	80027ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2200      	movs	r2, #0
 80024d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80024d8:	68bb      	ldr	r3, [r7, #8]
 80024da:	f003 0308 	and.w	r3, r3, #8
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d020      	beq.n	8002524 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	f003 0308 	and.w	r3, r3, #8
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d01b      	beq.n	8002524 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f06f 0208 	mvn.w	r2, #8
 80024f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2204      	movs	r2, #4
 80024fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	69db      	ldr	r3, [r3, #28]
 8002502:	f003 0303 	and.w	r3, r3, #3
 8002506:	2b00      	cmp	r3, #0
 8002508:	d003      	beq.n	8002512 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800250a:	6878      	ldr	r0, [r7, #4]
 800250c:	f000 f94c 	bl	80027a8 <HAL_TIM_IC_CaptureCallback>
 8002510:	e005      	b.n	800251e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002512:	6878      	ldr	r0, [r7, #4]
 8002514:	f000 f93f 	bl	8002796 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002518:	6878      	ldr	r0, [r7, #4]
 800251a:	f000 f94e 	bl	80027ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2200      	movs	r2, #0
 8002522:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002524:	68bb      	ldr	r3, [r7, #8]
 8002526:	f003 0310 	and.w	r3, r3, #16
 800252a:	2b00      	cmp	r3, #0
 800252c:	d020      	beq.n	8002570 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	f003 0310 	and.w	r3, r3, #16
 8002534:	2b00      	cmp	r3, #0
 8002536:	d01b      	beq.n	8002570 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f06f 0210 	mvn.w	r2, #16
 8002540:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2208      	movs	r2, #8
 8002546:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	69db      	ldr	r3, [r3, #28]
 800254e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002552:	2b00      	cmp	r3, #0
 8002554:	d003      	beq.n	800255e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002556:	6878      	ldr	r0, [r7, #4]
 8002558:	f000 f926 	bl	80027a8 <HAL_TIM_IC_CaptureCallback>
 800255c:	e005      	b.n	800256a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800255e:	6878      	ldr	r0, [r7, #4]
 8002560:	f000 f919 	bl	8002796 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002564:	6878      	ldr	r0, [r7, #4]
 8002566:	f000 f928 	bl	80027ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2200      	movs	r2, #0
 800256e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002570:	68bb      	ldr	r3, [r7, #8]
 8002572:	f003 0301 	and.w	r3, r3, #1
 8002576:	2b00      	cmp	r3, #0
 8002578:	d00c      	beq.n	8002594 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	f003 0301 	and.w	r3, r3, #1
 8002580:	2b00      	cmp	r3, #0
 8002582:	d007      	beq.n	8002594 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f06f 0201 	mvn.w	r2, #1
 800258c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800258e:	6878      	ldr	r0, [r7, #4]
 8002590:	f7fe fbf5 	bl	8000d7e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002594:	68bb      	ldr	r3, [r7, #8]
 8002596:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800259a:	2b00      	cmp	r3, #0
 800259c:	d00c      	beq.n	80025b8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d007      	beq.n	80025b8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80025b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80025b2:	6878      	ldr	r0, [r7, #4]
 80025b4:	f000 fa6f 	bl	8002a96 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80025b8:	68bb      	ldr	r3, [r7, #8]
 80025ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d00c      	beq.n	80025dc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d007      	beq.n	80025dc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80025d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80025d6:	6878      	ldr	r0, [r7, #4]
 80025d8:	f000 f8f8 	bl	80027cc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80025dc:	68bb      	ldr	r3, [r7, #8]
 80025de:	f003 0320 	and.w	r3, r3, #32
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d00c      	beq.n	8002600 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	f003 0320 	and.w	r3, r3, #32
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d007      	beq.n	8002600 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f06f 0220 	mvn.w	r2, #32
 80025f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80025fa:	6878      	ldr	r0, [r7, #4]
 80025fc:	f000 fa42 	bl	8002a84 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002600:	bf00      	nop
 8002602:	3710      	adds	r7, #16
 8002604:	46bd      	mov	sp, r7
 8002606:	bd80      	pop	{r7, pc}

08002608 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b084      	sub	sp, #16
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
 8002610:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002612:	2300      	movs	r3, #0
 8002614:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800261c:	2b01      	cmp	r3, #1
 800261e:	d101      	bne.n	8002624 <HAL_TIM_ConfigClockSource+0x1c>
 8002620:	2302      	movs	r3, #2
 8002622:	e0b4      	b.n	800278e <HAL_TIM_ConfigClockSource+0x186>
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2201      	movs	r2, #1
 8002628:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2202      	movs	r2, #2
 8002630:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	689b      	ldr	r3, [r3, #8]
 800263a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800263c:	68bb      	ldr	r3, [r7, #8]
 800263e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002642:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002644:	68bb      	ldr	r3, [r7, #8]
 8002646:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800264a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	68ba      	ldr	r2, [r7, #8]
 8002652:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800265c:	d03e      	beq.n	80026dc <HAL_TIM_ConfigClockSource+0xd4>
 800265e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002662:	f200 8087 	bhi.w	8002774 <HAL_TIM_ConfigClockSource+0x16c>
 8002666:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800266a:	f000 8086 	beq.w	800277a <HAL_TIM_ConfigClockSource+0x172>
 800266e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002672:	d87f      	bhi.n	8002774 <HAL_TIM_ConfigClockSource+0x16c>
 8002674:	2b70      	cmp	r3, #112	@ 0x70
 8002676:	d01a      	beq.n	80026ae <HAL_TIM_ConfigClockSource+0xa6>
 8002678:	2b70      	cmp	r3, #112	@ 0x70
 800267a:	d87b      	bhi.n	8002774 <HAL_TIM_ConfigClockSource+0x16c>
 800267c:	2b60      	cmp	r3, #96	@ 0x60
 800267e:	d050      	beq.n	8002722 <HAL_TIM_ConfigClockSource+0x11a>
 8002680:	2b60      	cmp	r3, #96	@ 0x60
 8002682:	d877      	bhi.n	8002774 <HAL_TIM_ConfigClockSource+0x16c>
 8002684:	2b50      	cmp	r3, #80	@ 0x50
 8002686:	d03c      	beq.n	8002702 <HAL_TIM_ConfigClockSource+0xfa>
 8002688:	2b50      	cmp	r3, #80	@ 0x50
 800268a:	d873      	bhi.n	8002774 <HAL_TIM_ConfigClockSource+0x16c>
 800268c:	2b40      	cmp	r3, #64	@ 0x40
 800268e:	d058      	beq.n	8002742 <HAL_TIM_ConfigClockSource+0x13a>
 8002690:	2b40      	cmp	r3, #64	@ 0x40
 8002692:	d86f      	bhi.n	8002774 <HAL_TIM_ConfigClockSource+0x16c>
 8002694:	2b30      	cmp	r3, #48	@ 0x30
 8002696:	d064      	beq.n	8002762 <HAL_TIM_ConfigClockSource+0x15a>
 8002698:	2b30      	cmp	r3, #48	@ 0x30
 800269a:	d86b      	bhi.n	8002774 <HAL_TIM_ConfigClockSource+0x16c>
 800269c:	2b20      	cmp	r3, #32
 800269e:	d060      	beq.n	8002762 <HAL_TIM_ConfigClockSource+0x15a>
 80026a0:	2b20      	cmp	r3, #32
 80026a2:	d867      	bhi.n	8002774 <HAL_TIM_ConfigClockSource+0x16c>
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d05c      	beq.n	8002762 <HAL_TIM_ConfigClockSource+0x15a>
 80026a8:	2b10      	cmp	r3, #16
 80026aa:	d05a      	beq.n	8002762 <HAL_TIM_ConfigClockSource+0x15a>
 80026ac:	e062      	b.n	8002774 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80026be:	f000 f96a 	bl	8002996 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	689b      	ldr	r3, [r3, #8]
 80026c8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80026ca:	68bb      	ldr	r3, [r7, #8]
 80026cc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80026d0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	68ba      	ldr	r2, [r7, #8]
 80026d8:	609a      	str	r2, [r3, #8]
      break;
 80026da:	e04f      	b.n	800277c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80026ec:	f000 f953 	bl	8002996 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	689a      	ldr	r2, [r3, #8]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80026fe:	609a      	str	r2, [r3, #8]
      break;
 8002700:	e03c      	b.n	800277c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800270e:	461a      	mov	r2, r3
 8002710:	f000 f8ca 	bl	80028a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	2150      	movs	r1, #80	@ 0x50
 800271a:	4618      	mov	r0, r3
 800271c:	f000 f921 	bl	8002962 <TIM_ITRx_SetConfig>
      break;
 8002720:	e02c      	b.n	800277c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800272e:	461a      	mov	r2, r3
 8002730:	f000 f8e8 	bl	8002904 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	2160      	movs	r1, #96	@ 0x60
 800273a:	4618      	mov	r0, r3
 800273c:	f000 f911 	bl	8002962 <TIM_ITRx_SetConfig>
      break;
 8002740:	e01c      	b.n	800277c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800274e:	461a      	mov	r2, r3
 8002750:	f000 f8aa 	bl	80028a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	2140      	movs	r1, #64	@ 0x40
 800275a:	4618      	mov	r0, r3
 800275c:	f000 f901 	bl	8002962 <TIM_ITRx_SetConfig>
      break;
 8002760:	e00c      	b.n	800277c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681a      	ldr	r2, [r3, #0]
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4619      	mov	r1, r3
 800276c:	4610      	mov	r0, r2
 800276e:	f000 f8f8 	bl	8002962 <TIM_ITRx_SetConfig>
      break;
 8002772:	e003      	b.n	800277c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002774:	2301      	movs	r3, #1
 8002776:	73fb      	strb	r3, [r7, #15]
      break;
 8002778:	e000      	b.n	800277c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800277a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2201      	movs	r2, #1
 8002780:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2200      	movs	r2, #0
 8002788:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800278c:	7bfb      	ldrb	r3, [r7, #15]
}
 800278e:	4618      	mov	r0, r3
 8002790:	3710      	adds	r7, #16
 8002792:	46bd      	mov	sp, r7
 8002794:	bd80      	pop	{r7, pc}

08002796 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002796:	b480      	push	{r7}
 8002798:	b083      	sub	sp, #12
 800279a:	af00      	add	r7, sp, #0
 800279c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800279e:	bf00      	nop
 80027a0:	370c      	adds	r7, #12
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bc80      	pop	{r7}
 80027a6:	4770      	bx	lr

080027a8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80027a8:	b480      	push	{r7}
 80027aa:	b083      	sub	sp, #12
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80027b0:	bf00      	nop
 80027b2:	370c      	adds	r7, #12
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bc80      	pop	{r7}
 80027b8:	4770      	bx	lr

080027ba <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80027ba:	b480      	push	{r7}
 80027bc:	b083      	sub	sp, #12
 80027be:	af00      	add	r7, sp, #0
 80027c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80027c2:	bf00      	nop
 80027c4:	370c      	adds	r7, #12
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bc80      	pop	{r7}
 80027ca:	4770      	bx	lr

080027cc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b083      	sub	sp, #12
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80027d4:	bf00      	nop
 80027d6:	370c      	adds	r7, #12
 80027d8:	46bd      	mov	sp, r7
 80027da:	bc80      	pop	{r7}
 80027dc:	4770      	bx	lr
	...

080027e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80027e0:	b480      	push	{r7}
 80027e2:	b085      	sub	sp, #20
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
 80027e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	4a2b      	ldr	r2, [pc, #172]	@ (80028a0 <TIM_Base_SetConfig+0xc0>)
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d007      	beq.n	8002808 <TIM_Base_SetConfig+0x28>
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80027fe:	d003      	beq.n	8002808 <TIM_Base_SetConfig+0x28>
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	4a28      	ldr	r2, [pc, #160]	@ (80028a4 <TIM_Base_SetConfig+0xc4>)
 8002804:	4293      	cmp	r3, r2
 8002806:	d108      	bne.n	800281a <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800280e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	68fa      	ldr	r2, [r7, #12]
 8002816:	4313      	orrs	r3, r2
 8002818:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	4a20      	ldr	r2, [pc, #128]	@ (80028a0 <TIM_Base_SetConfig+0xc0>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d007      	beq.n	8002832 <TIM_Base_SetConfig+0x52>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002828:	d003      	beq.n	8002832 <TIM_Base_SetConfig+0x52>
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	4a1d      	ldr	r2, [pc, #116]	@ (80028a4 <TIM_Base_SetConfig+0xc4>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d108      	bne.n	8002844 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002838:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	68db      	ldr	r3, [r3, #12]
 800283e:	68fa      	ldr	r2, [r7, #12]
 8002840:	4313      	orrs	r3, r2
 8002842:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	695b      	ldr	r3, [r3, #20]
 800284e:	4313      	orrs	r3, r2
 8002850:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	68fa      	ldr	r2, [r7, #12]
 8002856:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	689a      	ldr	r2, [r3, #8]
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	681a      	ldr	r2, [r3, #0]
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	4a0d      	ldr	r2, [pc, #52]	@ (80028a0 <TIM_Base_SetConfig+0xc0>)
 800286c:	4293      	cmp	r3, r2
 800286e:	d103      	bne.n	8002878 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	691a      	ldr	r2, [r3, #16]
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2201      	movs	r2, #1
 800287c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	691b      	ldr	r3, [r3, #16]
 8002882:	f003 0301 	and.w	r3, r3, #1
 8002886:	2b00      	cmp	r3, #0
 8002888:	d005      	beq.n	8002896 <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	691b      	ldr	r3, [r3, #16]
 800288e:	f023 0201 	bic.w	r2, r3, #1
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	611a      	str	r2, [r3, #16]
  }
}
 8002896:	bf00      	nop
 8002898:	3714      	adds	r7, #20
 800289a:	46bd      	mov	sp, r7
 800289c:	bc80      	pop	{r7}
 800289e:	4770      	bx	lr
 80028a0:	40012c00 	.word	0x40012c00
 80028a4:	40000400 	.word	0x40000400

080028a8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80028a8:	b480      	push	{r7}
 80028aa:	b087      	sub	sp, #28
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	60f8      	str	r0, [r7, #12]
 80028b0:	60b9      	str	r1, [r7, #8]
 80028b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	6a1b      	ldr	r3, [r3, #32]
 80028b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	6a1b      	ldr	r3, [r3, #32]
 80028be:	f023 0201 	bic.w	r2, r3, #1
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	699b      	ldr	r3, [r3, #24]
 80028ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80028cc:	693b      	ldr	r3, [r7, #16]
 80028ce:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80028d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	011b      	lsls	r3, r3, #4
 80028d8:	693a      	ldr	r2, [r7, #16]
 80028da:	4313      	orrs	r3, r2
 80028dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80028de:	697b      	ldr	r3, [r7, #20]
 80028e0:	f023 030a 	bic.w	r3, r3, #10
 80028e4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80028e6:	697a      	ldr	r2, [r7, #20]
 80028e8:	68bb      	ldr	r3, [r7, #8]
 80028ea:	4313      	orrs	r3, r2
 80028ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	693a      	ldr	r2, [r7, #16]
 80028f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	697a      	ldr	r2, [r7, #20]
 80028f8:	621a      	str	r2, [r3, #32]
}
 80028fa:	bf00      	nop
 80028fc:	371c      	adds	r7, #28
 80028fe:	46bd      	mov	sp, r7
 8002900:	bc80      	pop	{r7}
 8002902:	4770      	bx	lr

08002904 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002904:	b480      	push	{r7}
 8002906:	b087      	sub	sp, #28
 8002908:	af00      	add	r7, sp, #0
 800290a:	60f8      	str	r0, [r7, #12]
 800290c:	60b9      	str	r1, [r7, #8]
 800290e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	6a1b      	ldr	r3, [r3, #32]
 8002914:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	6a1b      	ldr	r3, [r3, #32]
 800291a:	f023 0210 	bic.w	r2, r3, #16
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	699b      	ldr	r3, [r3, #24]
 8002926:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002928:	693b      	ldr	r3, [r7, #16]
 800292a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800292e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	031b      	lsls	r3, r3, #12
 8002934:	693a      	ldr	r2, [r7, #16]
 8002936:	4313      	orrs	r3, r2
 8002938:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800293a:	697b      	ldr	r3, [r7, #20]
 800293c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002940:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002942:	68bb      	ldr	r3, [r7, #8]
 8002944:	011b      	lsls	r3, r3, #4
 8002946:	697a      	ldr	r2, [r7, #20]
 8002948:	4313      	orrs	r3, r2
 800294a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	693a      	ldr	r2, [r7, #16]
 8002950:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	697a      	ldr	r2, [r7, #20]
 8002956:	621a      	str	r2, [r3, #32]
}
 8002958:	bf00      	nop
 800295a:	371c      	adds	r7, #28
 800295c:	46bd      	mov	sp, r7
 800295e:	bc80      	pop	{r7}
 8002960:	4770      	bx	lr

08002962 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002962:	b480      	push	{r7}
 8002964:	b085      	sub	sp, #20
 8002966:	af00      	add	r7, sp, #0
 8002968:	6078      	str	r0, [r7, #4]
 800296a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	689b      	ldr	r3, [r3, #8]
 8002970:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002978:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800297a:	683a      	ldr	r2, [r7, #0]
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	4313      	orrs	r3, r2
 8002980:	f043 0307 	orr.w	r3, r3, #7
 8002984:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	68fa      	ldr	r2, [r7, #12]
 800298a:	609a      	str	r2, [r3, #8]
}
 800298c:	bf00      	nop
 800298e:	3714      	adds	r7, #20
 8002990:	46bd      	mov	sp, r7
 8002992:	bc80      	pop	{r7}
 8002994:	4770      	bx	lr

08002996 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002996:	b480      	push	{r7}
 8002998:	b087      	sub	sp, #28
 800299a:	af00      	add	r7, sp, #0
 800299c:	60f8      	str	r0, [r7, #12]
 800299e:	60b9      	str	r1, [r7, #8]
 80029a0:	607a      	str	r2, [r7, #4]
 80029a2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	689b      	ldr	r3, [r3, #8]
 80029a8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80029aa:	697b      	ldr	r3, [r7, #20]
 80029ac:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80029b0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	021a      	lsls	r2, r3, #8
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	431a      	orrs	r2, r3
 80029ba:	68bb      	ldr	r3, [r7, #8]
 80029bc:	4313      	orrs	r3, r2
 80029be:	697a      	ldr	r2, [r7, #20]
 80029c0:	4313      	orrs	r3, r2
 80029c2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	697a      	ldr	r2, [r7, #20]
 80029c8:	609a      	str	r2, [r3, #8]
}
 80029ca:	bf00      	nop
 80029cc:	371c      	adds	r7, #28
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bc80      	pop	{r7}
 80029d2:	4770      	bx	lr

080029d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80029d4:	b480      	push	{r7}
 80029d6:	b085      	sub	sp, #20
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
 80029dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80029e4:	2b01      	cmp	r3, #1
 80029e6:	d101      	bne.n	80029ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80029e8:	2302      	movs	r3, #2
 80029ea:	e041      	b.n	8002a70 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2201      	movs	r2, #1
 80029f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2202      	movs	r2, #2
 80029f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	689b      	ldr	r3, [r3, #8]
 8002a0a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002a12:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	68fa      	ldr	r2, [r7, #12]
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	68fa      	ldr	r2, [r7, #12]
 8002a24:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a14      	ldr	r2, [pc, #80]	@ (8002a7c <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d009      	beq.n	8002a44 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a38:	d004      	beq.n	8002a44 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4a10      	ldr	r2, [pc, #64]	@ (8002a80 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d10c      	bne.n	8002a5e <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002a44:	68bb      	ldr	r3, [r7, #8]
 8002a46:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002a4a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	68ba      	ldr	r2, [r7, #8]
 8002a52:	4313      	orrs	r3, r2
 8002a54:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	68ba      	ldr	r2, [r7, #8]
 8002a5c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2201      	movs	r2, #1
 8002a62:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2200      	movs	r2, #0
 8002a6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002a6e:	2300      	movs	r3, #0
}
 8002a70:	4618      	mov	r0, r3
 8002a72:	3714      	adds	r7, #20
 8002a74:	46bd      	mov	sp, r7
 8002a76:	bc80      	pop	{r7}
 8002a78:	4770      	bx	lr
 8002a7a:	bf00      	nop
 8002a7c:	40012c00 	.word	0x40012c00
 8002a80:	40000400 	.word	0x40000400

08002a84 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002a84:	b480      	push	{r7}
 8002a86:	b083      	sub	sp, #12
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002a8c:	bf00      	nop
 8002a8e:	370c      	adds	r7, #12
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bc80      	pop	{r7}
 8002a94:	4770      	bx	lr

08002a96 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002a96:	b480      	push	{r7}
 8002a98:	b083      	sub	sp, #12
 8002a9a:	af00      	add	r7, sp, #0
 8002a9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002a9e:	bf00      	nop
 8002aa0:	370c      	adds	r7, #12
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bc80      	pop	{r7}
 8002aa6:	4770      	bx	lr

08002aa8 <memset>:
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	4402      	add	r2, r0
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d100      	bne.n	8002ab2 <memset+0xa>
 8002ab0:	4770      	bx	lr
 8002ab2:	f803 1b01 	strb.w	r1, [r3], #1
 8002ab6:	e7f9      	b.n	8002aac <memset+0x4>

08002ab8 <__libc_init_array>:
 8002ab8:	b570      	push	{r4, r5, r6, lr}
 8002aba:	2600      	movs	r6, #0
 8002abc:	4d0c      	ldr	r5, [pc, #48]	@ (8002af0 <__libc_init_array+0x38>)
 8002abe:	4c0d      	ldr	r4, [pc, #52]	@ (8002af4 <__libc_init_array+0x3c>)
 8002ac0:	1b64      	subs	r4, r4, r5
 8002ac2:	10a4      	asrs	r4, r4, #2
 8002ac4:	42a6      	cmp	r6, r4
 8002ac6:	d109      	bne.n	8002adc <__libc_init_array+0x24>
 8002ac8:	f000 f81a 	bl	8002b00 <_init>
 8002acc:	2600      	movs	r6, #0
 8002ace:	4d0a      	ldr	r5, [pc, #40]	@ (8002af8 <__libc_init_array+0x40>)
 8002ad0:	4c0a      	ldr	r4, [pc, #40]	@ (8002afc <__libc_init_array+0x44>)
 8002ad2:	1b64      	subs	r4, r4, r5
 8002ad4:	10a4      	asrs	r4, r4, #2
 8002ad6:	42a6      	cmp	r6, r4
 8002ad8:	d105      	bne.n	8002ae6 <__libc_init_array+0x2e>
 8002ada:	bd70      	pop	{r4, r5, r6, pc}
 8002adc:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ae0:	4798      	blx	r3
 8002ae2:	3601      	adds	r6, #1
 8002ae4:	e7ee      	b.n	8002ac4 <__libc_init_array+0xc>
 8002ae6:	f855 3b04 	ldr.w	r3, [r5], #4
 8002aea:	4798      	blx	r3
 8002aec:	3601      	adds	r6, #1
 8002aee:	e7f2      	b.n	8002ad6 <__libc_init_array+0x1e>
 8002af0:	08002b3c 	.word	0x08002b3c
 8002af4:	08002b3c 	.word	0x08002b3c
 8002af8:	08002b3c 	.word	0x08002b3c
 8002afc:	08002b40 	.word	0x08002b40

08002b00 <_init>:
 8002b00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b02:	bf00      	nop
 8002b04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b06:	bc08      	pop	{r3}
 8002b08:	469e      	mov	lr, r3
 8002b0a:	4770      	bx	lr

08002b0c <_fini>:
 8002b0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b0e:	bf00      	nop
 8002b10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b12:	bc08      	pop	{r3}
 8002b14:	469e      	mov	lr, r3
 8002b16:	4770      	bx	lr
